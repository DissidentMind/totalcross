/********************************************************************************* *  TotalCross Software Development Kit                                          * *  Copyright (C) 2000-2012 SuperWaba Ltda.                                      * *  All Rights Reserved                                                          * *                                                                               * *  This library and virtual machine is distributed in the hope that it will     * *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    * *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         * *                                                                               * *  This file is covered by the GNU LESSER GENERAL PUBLIC LICENSE VERSION 3.0    * *  A copy of this license is located in file license.txt at the root of this    * *  SDK or can be downloaded here:                                               * *  http://www.gnu.org/licenses/lgpl-3.0.txt                                     * *                                                                               * *********************************************************************************/package tc.samples.io.device.serialports;import totalcross.sys.*;import totalcross.ui.*;import totalcross.ui.event.*;import totalcross.io.device.*;public class TestPorts extends MainWindow{   static   {      Settings.useNewFont = true;   }   PushButtonGroup portSelect, operationSelect;   Button sendButton;   Button receiveButton;   ListBox output;   Check flow, endRead;   PortConnector port;   byte readBuf[];   String portNames[] = {"Serial", "IrCOMM", "SIR", "USB", "Bluetooth"};   String operationNames[] = {"Send", "Receive"};   int ports[];   int helloCount = 1;   StringBuffer sb = new StringBuffer(100);   StringBuffer sb2 = new StringBuffer(100);   public TestPorts()   {      super("Test Ports", TAB_ONLY_BORDER);   }   public void initUI()   {      readBuf = new byte[100];      ports = new int[] {PortConnector.DEFAULT, PortConnector.IRCOMM, PortConnector.SIR, PortConnector.USB, PortConnector.BLUETOOTH};      portSelect = new PushButtonGroup(portNames, false, -1, -1, 6, 2, true, PushButtonGroup.NORMAL);      add(portSelect);      portSelect.setRect(CENTER, TOP + 2, PREFERRED, PREFERRED + 4);      operationSelect = new PushButtonGroup(operationNames, false, -1, 4, 20, 1, true, PushButtonGroup.BUTTON);      add(operationSelect);      operationSelect.setRect(CENTER + 4, AFTER + 2, PREFERRED, PREFERRED + 4);      /*      Button.commonGap = 0;      add(sendButton = new Button("Send Data"), LEFT + 15, AFTER + 4);      add(receiveButton = new Button("Receive Data"), RIGHT - 15, SAME);      */      Button.commonGap = 0;      add(flow = new Check("Use flow control"), LEFT, AFTER + 2);      add(endRead = new Check("End write on check timeout"), LEFT, AFTER + 2);      endRead.setChecked(true);      add(output = new ListBox());      output.enableHorizontalScroll();      output.setRect(LEFT, AFTER, FILL, FILL);   }   private int lastSelectedPort = -1; // fabio: PushButtonGroup.NORMAL is sending a pressed event when a pressed button is clicked. This should be temporary.   public void onEvent(Event event)   {      switch (event.type)      {         case ControlEvent.PRESSED:         {            if (event.target == portSelect)            {               int selectedPort = portSelect.getSelectedIndex();               if (selectedPort == -1 || selectedPort != lastSelectedPort)               {                  if (port != null)                  {                     try                     {                        port.close();                     }                     catch (totalcross.io.IOException e)                     {                        output.add("Exception in port.close: " + e.getMessage());                        e.printStackTrace();                     }                     finally                     {                        port = null;                     }                  }                  if (selectedPort != -1)                  {                     output.add("Opening port " + portNames[selectedPort]);                     try                     {                        port = new PortConnector(ports[selectedPort], 9600);                        flow.setEnabled(selectedPort != 2);                        if (selectedPort == 2)                           output.add("SIR has no flow control");                        port.stopWriteCheckOnTimeout = endRead.isChecked();                        port.setFlowControl(flow.isChecked());                        port.readTimeout = 2000;                        lastSelectedPort = selectedPort;                     }                     catch (totalcross.io.IOException e)                     {                        port = null;                        portSelect.setSelectedIndex(-1);                        output.add("Exception in PC constructor: " + e.getMessage());                        e.printStackTrace();                     }                  }               }               output.repaintNow();            }            else if (event.target == operationSelect)            {               if (port == null)               {                  output.add("No connection available for this operation");               }               else               {                  switch (operationSelect.getSelectedIndex())                  {                     case 0: // send button                     {                        String s = "Hello " + helloCount++;                        byte[] buf = s.getBytes();                        int n;                        try                        {                           n = port.writeBytes(buf, 0, buf.length);                           if (n == buf.length)                              output.add("Sent " + s);                           else                              output.add("Sent only " + new String(buf, 0, n));                        }                        catch (totalcross.io.IOException e)                        {                           output.add(">>>Write failed: " + e.getMessage());                           e.printStackTrace();                        }                     } break;                     case 1: // receive button                     {                        int count;                        try                        {                           count = port.readBytes(readBuf, 0, 100);                           if (count == 0)                           {                              output.add("No data received");                           }                           else                           {                              int b;                              sb.setLength(0);                              sb2.setLength(0);                              for (int i = 0; i < count; i++)                              {                                 b = readBuf[i] & 0xFF;                                 if (b != 255)                                 {                                    sb.append((char) b);                                    sb2.append(b).append(' ');                                 }                              }                              output.add("Asc " + sb.toString());                              output.add("Dec " + sb2.toString());                           }                        }                        catch (totalcross.io.IOException e)                        {                           output.add(">>>Read Failed: " + e.getMessage());                           e.printStackTrace();                        }                     } break;                  }                  output.repaintNow();               }            }         } break;      }   }}