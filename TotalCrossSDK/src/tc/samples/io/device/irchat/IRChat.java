/********************************************************************************* *  TotalCross Software Development Kit                                          * *  Copyright (C) 2002 Shaun O'Brien                                             * *  Copyright (C) 2002-2011 SuperWaba Ltda.                                      * *  All Rights Reserved                                                          * *                                                                               * *  This library and virtual machine is distributed in the hope that it will     * *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    * *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         * *                                                                               * *  This file is covered by the GNU LESSER GENERAL PUBLIC LICENSE VERSION 3.0    * *  A copy of this license is located in file license.txt at the root of this    * *  SDK or can be downloaded here:                                               * *  http://www.gnu.org/licenses/lgpl-3.0.txt                                     * *                                                                               * *********************************************************************************//*  IRChat.java  This is the main class of the entire application.  The application is a secure chat program that  has multiple user and database support.  It uses  the repeating keyword Ceasar Cypher to encrypt and  decrypt messages.*/package tc.samples.io.device.irchat;import totalcross.io.*;import totalcross.io.device.*;import totalcross.ui.*;import totalcross.ui.dialog.*;import totalcross.ui.event.*;public class IRChat extends MainWindow{   //user interface specific varaibles   private Button send,receive;   private Edit dataEdit;   private ListBox textArea;   private MenuBar mbar;   private MenuItem miLogin, miLogout;   //window classes specific varaibles   private Login login;   private KeyWord keyWord;   //Infrared Communications specific variables   private byte buf[];   private byte readBuf[];   private PortConnector port;   //Cryptology specific varaibles   public static String key = "";   public static String currentUser = "";   private String about = "Secure Chat V1.0| |Secure chat allows safe IR |communications through message|encryption. After logging in the|user must enter a unique codeword|for that session of communciation.|For bug reports and comments email|shob22@ptd.net. Thank you.";   public IRChat()   {      super("Secure Chat", RECT_BORDER);   }   //default constructor   public void initUI()   {//on load      //add the strings that will construct the menu      MenuItem[] OptionsMenu={new MenuItem("File"),new MenuItem("About"),new MenuItem("Exit")};      MenuItem[] ManageMenu={new MenuItem("Connection"),miLogin = new MenuItem("Login"), miLogout = new MenuItem("Logout")};      setMenuBar(mbar = new totalcross.ui.MenuBar(new MenuItem[][]{OptionsMenu,ManageMenu}));      setBackColor(0xCDCDD2);      //textArea is where the received messages will display      Button.commonGap = 2;      add(receive = new Button("Get"), RIGHT - 1, BOTTOM - 1);      add(send = new Button( "Send"), BEFORE - 1, SAME);      add(dataEdit = new Edit());      dataEdit.setRect(LEFT+1, SAME, send.getRect().x - 4, PREFERRED );      Button.commonGap = 0;      textArea=new ListBox();      add(textArea);      textArea.setRect(LEFT+1,TOP+1,FILL-1,FILL - dataEdit.getRect().height - 2);      //data edit the edit where messages will be typed to send      textArea.add("Not logged in.\n");      miLogout.isEnabled = false;      controlStateChange(false);   }   /*controlStateChange marks all the controls on the mainwindow unusable     like in MS Windows when controls are grayed out.   */   private void controlStateChange(boolean state)   {      textArea.setEnabled(state);      dataEdit.setEnabled(state);      send.setEnabled(state);      receive.setEnabled(state);   }//end of controlStateChange   /*userLogin pops up a dialog box that prompts the user     for a userID and password.   */   private void userLogin()   {      login=new Login();      login.popupNonBlocking();   }//end of userLogin   /*encryptMessage takes a plainText string and encrypts it with the repeating-keyword     Ceasar cypher using the current key in use for this session   */   private String encryptMessage(String pt)   {      char keyArray[] = key.toCharArray();      char plainText[] = pt.toCharArray();      String cypherText = "";      int count = 0;      for(int i = 0;i < plainText.length;i++){         if(plainText[i] == ' '){cypherText += " ";}         else         {            int t = ((((int)plainText[i]) - 96) - (((int)keyArray[count]) - 96))+1;            if(t <= 0) t += 26;            if(count++ == keyArray.length-1) count = 0;            cypherText += (char)(t+96);         }      }      return cypherText;   }//end of encryptMessage   /*decryptMessage takes a cypherText string and decrypts it with the repeating-keyword     Ceasar cypher using the current key in use for this session   */   private String decryptMessage(String ct)   {      char keyArray[] = key.toCharArray();      char cypherText[] = ct.toCharArray();      String plainText = "";      int count = 0;      for(int i = 0;i < cypherText.length;i++){         if(cypherText[i] == ' '){plainText += " ";}         else         {            int t = ((((int)cypherText[i]) - 96) + (((int)keyArray[count]) - 96)) - 1;            if(t > 26) t -= 26;            if(count++ == keyArray.length-1) count = 0;            plainText += (char)(t+96);         }      }      return plainText;   }//end of decryptMessage   /*onEvent captures events from the user and acts on them*/   public void onEvent(Event event)   {      switch(event.type){         //if a window was closed         case ControlEvent.WINDOW_CLOSED:            //if the menu bar was chosen            if(event.target == mbar)            {               switch (mbar.getSelectedIndex())               {                  case -1: break;                  case 1: //about menu                     new MessageBox("About?",about).popupNonBlocking();                     break;                  case 2:  /*close the port and exit the                     program*/                     if(port != null)                        try                        {                           port.close();                        }                        catch (totalcross.io.IOException e)                        {                           e.printStackTrace();                        }                     port = null;                     exit(0);                                 break;                  //101, and 102 are menuchoices under the manage menu                  case 101://user login                     userLogin();                     miLogin.isEnabled = false;                     break;                  case 102://user logout                     currentUser = "";                     key = "";                     textArea.removeAll();                     textArea.add("Not logged in:\n");                     controlStateChange(false);                     repaint();                     miLogout.isEnabled = false;                     miLogin.isEnabled = true;                     setFocus(this);                     break;               }            }//end of mbar event(events for the menu bar)            //if the login window was closed            else if(event.target == login)            {               if(login.CANCEL){}//if the user  cancelled               else               {                  /*if the user entered the                    correct password and username                  */                  if(Login.goodUser)                  {                     /*prompt the user to                       enter the keyword for                       the current chat                       session.                     */                     (keyWord = new KeyWord()).popupNonBlocking();                     textArea.removeAll();                     textArea.add(currentUser + " logged in:\n");                     //enable to logout                     miLogout.isEnabled = true;                     //now enable the program for use                     controlStateChange(true);                     //and open up the infrared port                     if(port != null) port = null;                     try                     {                        port = new PortConnector(PortConnector.IRCOMM, 9600);                     }                     catch (totalcross.io.IOException e)                     {                        new MessageBox("IrPort Error","There was an error opening the\nInfrared Port for Communications").popupNonBlocking();                        port = null;                     }                  }               }            }//end of login event            //if the keyword window was closed            else if(event.target == keyWord)            {               /*if they entered a keyword get it and                 assign to the main key               */               key = keyWord.key;            }//end of keyWord event            break;            //if a button was pressed         case ControlEvent.PRESSED:            //if the button was send            if (event.target == send)            {               // send button               //if the IR port is open               if (port != null)               {                  String cypherText = "";                  //if the message to send is not  blank                  if(dataEdit.getLength() > 0)                  {                     //now encypt the message                     cypherText = encryptMessage(dataEdit.getText());                     /*messageToSend is the                       cypherText and the user                       ID of the user that sent                       it and the pound sign                       distinguishes between                       the 2.                     */                     String messageToSend = currentUser + "#" + cypherText;                     /*now convert the message to bytes and send it over                       Infrared port                     */                     char convert[] = messageToSend.toCharArray();                     buf = new byte[messageToSend.length()];                     //write the data to the buffer                     for(int i = 0;i < messageToSend.length();i++)                        buf[i] = (byte)convert[i];                     //now send                     try                     {                        port.setFlowControl( true );                        port.readTimeout = 2000;                        port.writeBytes( buf, 0, messageToSend.length());                     }                     catch (totalcross.io.IOException e)                     {                        e.printStackTrace();                     }                     textArea.add(currentUser + ":"+dataEdit.getText());                     repaint();                     dataEdit.setText("");                  }                  else                  {                     //the message was blank                     new MessageBox("***Error***","Must enter a message.").popupNonBlocking();                  }               }            }//end of send event            //if the button was receive            else if (event.target == receive)            {               // receive button               if (port != null)               {                  String receiveText="";                  //check how much data is coming in                  int count;                  try                  {                     readBuf= new byte[port.readCheck()];                     count = port.readBytes( readBuf, 0, port.readCheck());                     if (count > 0) //if there is data                     {                        for (int i = 0; i < count; i++)                           receiveText += (char) readBuf[i];                        /*                         * let the user know who the message was sent from                         */                        new MessageBox("Confirm Receive", "You are about to receive data\nfrom: user "                              + receiveText.substring(0, receiveText.indexOf('#', 0))).popupNonBlocking();                        String plainText = decryptMessage(receiveText.substring(receiveText.indexOf('#', 0) + 1,                              receiveText.length()));                        textArea.add(receiveText.substring(0, receiveText.indexOf('#', 0)) + ":" + plainText);                        repaint();                     }                     else                     {                         //no text was received                        textArea.add("No Information was received.");                        repaint();                     }                  }                  catch (IOException e)                  {                     e.printStackTrace();                  }               }            }//end of receive event            break;         }//end of type switch   }//end of onEvent }//end of IRChat class