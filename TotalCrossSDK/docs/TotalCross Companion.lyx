#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\begin_preamble
%used by the cover
\usepackage{graphicx}

%used to insert tab stops in itemize or enumerate
\usepackage{tabto}

\usepackage[utf8]{inputenc}
\DeclareUnicodeCharacter{2190}{\ifmmode \leftarrow \else \textleftarrow \fi} % override

% T1 Helvetica scaled
\usepackage[T1]{fontenc}
\usepackage[scaled]{helvet}
\renewcommand*{\familydefault}{\sfdefault}

% Chapter style
\usepackage{xcolor,calc}

\makechapterstyle{combined}{
  \setlength{\beforechapskip}{30pt}
  \setlength{\midchapskip}{-60pt}
  \setlength{\afterchapskip}{60pt}
  \renewcommand*{\printchaptername}{}
  \renewcommand*{\chapnumfont}{\normalfont\sffamily\bfseries\fontsize{80}{0}\selectfont}
  \renewcommand*{\printchapternum}{\flushright\chapnumfont\textcolor[rgb]{.64,.79,.87}{\thechapter}}
  \renewcommand*{\chaptitlefont}{\normalfont\sffamily\Huge\bfseries}
  \renewcommand*{\printchaptertitle}[1]{%
    \raggedright\chaptitlefont\parbox[t]{\textwidth-3cm}{\raggedright##1}}
}

\chapterstyle{combined}

% Code listing
\usepackage{listings,color}

\definecolor{dkgreen}{RGB}{63,127,95}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{light-gray}{rgb}{0.925,0.925,0.925}
\definecolor{mauve}{RGB}{127,0,85}

 \lstset{
        language=Java,
        backgroundcolor=\color{light-gray},
         basicstyle=\footnotesize\ttfamily, % Standardschrift
         numbers=left,               % Ort der Zeilennummern
         numberstyle=\tiny,          % Stil der Zeilennummern
         %stepnumber=2,               % Abstand zwischen den Zeilennummern
         numbersep=5pt,              % Abstand der Nummern zum Text
         tabsize=2,                  % Groesse von Tabs
         extendedchars=true,         %
         breaklines=true,            % Zeilen werden Umgebrochen
        emph={LEFT,RIGHT,CENTER,TOP,BOTTOM,FILL,FIT,CENTER_OF,BOTTOM_OF,AFTER,BEFORE},
        emphstyle=\color{blue}\textit,
         keywordstyle=\color{mauve}\textbf,
         frame=b,
 %        keywordstyle=[2]\textbf,    % Stil der Keywords
 %        keywordstyle=[2]\textbf,    %
 %        keywordstyle=[3]\textbf,    %
 %        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
         commentstyle=\color{dkgreen},       % comment style
         stringstyle=\color{blue},         % string literal style
  %       stringstyle=\color{white}\ttfamily, % Farbe der String
         showspaces=false,           % Leerzeichen anzeigen ?
         showtabs=false,             % Tabs anzeigen ?
         xleftmargin=17pt,
         framexleftmargin=17pt,
         framexrightmargin=5pt,
         framexbottommargin=4pt,
         %backgroundcolor=\color{lightgray},
         showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
 }
 \lstloadlanguages{% Check Dokumentation for further languages ...
         %[Visual]Basic
         %Pascal
         %C
         %C++
         %XML
         %HTML
         Java
 }
    %\DeclareCaptionFont{blue}{\color{blue}} 

  %\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
  \usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% New style chapter star, so we can have unumbered chapters to show in ToC
\newcommand{\tocchap}[1]{\addcontentsline{toc}{chapter}{\protect\numberline
{}#1}\markboth{\textsc{#1}}{\textsc{#1}}\thispagestyle{plain}}
\newcommand{\chapterstar}[1]{\chapter*{#1}\tocchap{#1}}

% Sections are not numbered
\setcounter{secnumdepth}{0}

% Vertical gap between paragraphs
\setlength{\parskip}{\medskipamount}
\end_preamble
\use_default_options true
\begin_modules
enumitem
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Input fieldlist.inc

Style Chapterstar
Copystyle Chapter
LatexName chapterstar
LabelType Top_Environment
LabelString "Unnumbered chapter"
LabelFont
Series Bold
Size LARGE
EndFont
End
\end_local_layout
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_title "TotalCross Companion"
\pdf_author "SuperWaba"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=black"
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 4cm
\footskip 1cm
\secnumdepth 0
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout

%% temporary titles 
\end_layout

\begin_layout Plain Layout

% command to provide stretchy vertical space in proportion
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbvspace[1][3]{
\backslash
vspace*{
\backslash
stretch{#1}}}
\end_layout

\begin_layout Plain Layout

% allow some slack to avoid under/overfull boxes
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbstretchyspace{
\backslash
spaceskip0.5em plus 0.25em minus 0.25em}
\end_layout

\begin_layout Plain Layout

% To improve spacing on titlepages
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
nbtitlestretch}{
\backslash
spaceskip0.6em}
\end_layout

\begin_layout Plain Layout


\backslash
pagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
bfseries
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1]
\end_layout

\begin_layout Plain Layout


\backslash
Huge
\end_layout

\begin_layout Plain Layout

{
\backslash
nbtitlestretch
\backslash
huge
\backslash
textcolor[RGB]{25,60,240} 
\end_layout

\begin_layout Plain Layout

{The TotalCross Companion}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=1]{companion_resources/images/TotalCross_cor_vertical}
 
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[5] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
large 
\end_layout

\begin_layout Plain Layout

Version 1.63
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1] 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagestyle{companion}
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Part
THE PLATFORM
\end_layout

\begin_layout Chapterstar
Welcome
\end_layout

\begin_layout Standard
Welcome to TotalCross.
 This tutorial assumes that you know how to write Java programs.
 If not, I suggest that you take a basic course in Java at 
\begin_inset CommandInset href
LatexCommand href
target "http://java.sun.com/docs/books/tutorial/java/index.html"

\end_inset


\end_layout

\begin_layout Standard
However, you'll have to forget the JDK API and use the TotalCross API.
 Make a good read of the API javadocs: they will show you the differences
 between the JDK and the TotalCross API.
\end_layout

\begin_layout Standard
Some conventions used in this tutorial:
\end_layout

\begin_layout Itemize
When a code sample has ...
 (ellipses) between two parts, it means that some part of that code has
 been omitted.
\end_layout

\begin_layout Itemize
Measurements are always in 
\emph on
pixels
\emph default
, unless otherwise specified.
\end_layout

\begin_layout Standard
This tutorial follows the Object Oriented naming convention: a class containing
 methods (~functions) and properties or fields (~variables).
\end_layout

\begin_layout Standard

\series bold
WINDOWS CE
\series default
 refers to all the possible names deriving from that platform: Windows CE
 (up to 2.x), Pocket PC (Windows CE 3.x), .NET (Windows CE 4.x), Windows Mobile
 (5.x and 6.x).
 
\end_layout

\begin_layout Standard

\series bold
TC
\series default
 refers to TotalCross.
 
\end_layout

\begin_layout Standard

\series bold
TCVM
\series default
 refers to the TotalCross virtual machine.
\end_layout

\begin_layout Standard
The term “
\series bold
main class
\series default
” always refers to the class that extends 
\family typewriter
totalcross.ui.MainWindow
\family default
 or 
\family typewriter
totalcross.io.sync.Conduit
\family default
, or implements 
\family typewriter
totalcross.MainClass
\family default
.
\end_layout

\begin_layout Standard
The term “
\series bold
<TOTALCROSS_HOME>
\series default
” refers to the directory where the TotalCross SDK is located.
 The default location is 
\family typewriter
C:
\backslash
TotalCrossSDK
\family default
.
\end_layout

\begin_layout Standard
Please read the Copyright terms in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Copyright"

\end_inset

.
 By reading this text, you're agreeing with them.
\end_layout

\begin_layout Chapter
TotalCross Overview
\end_layout

\begin_layout Standard
Thank you for your interest in TotalCross.
 If you don't know where to start, here's a quick overview of the platform:
\end_layout

\begin_layout Section
Supported Platforms
\end_layout

\begin_layout Itemize
Android 1.6 and above.
\end_layout

\begin_layout Itemize
iOS 4.0 and above.
\end_layout

\begin_layout Itemize
BlackBerry 4.3.0 and above.
 
\end_layout

\begin_layout Itemize
Palm OS 5 with NVFS.
 
\end_layout

\begin_layout Itemize
Windows CE: Pocket PC ARM/SH3/MIPS (3.0, .NET, Windows Mobile 5 and 6), PPC
 2.11 ARM, HPC2000 ARM.
 
\end_layout

\begin_layout Itemize
Windows 2000 and above
\end_layout

\begin_layout Itemize
Linux.
 
\end_layout

\begin_layout Itemize
Browser as Java applet (JDK 1.1 and above).
 
\end_layout

\begin_layout Section
Virtual Machine Features
\end_layout

\begin_layout Standard
The TotalCross Virtual Machine (TCVM) is a shared library written from scratch,
 and has the following features: 
\end_layout

\begin_layout Itemize
It interprets a proprietary set of opcodes instead of Java Bytecodes.
\end_layout

\begin_layout Itemize
It is a register-based VM, not stack-based as Java, which results in better
 performance.
\end_layout

\begin_layout Itemize
It has support for real multi-threading.
 Note that the TotalCross API does not supports concurrency, which must
 be implemented by your own.
\end_layout

\begin_layout Itemize
The TotalCross class (tclass) files stores internal information in little
 endian, since its the most widely used format of actual microprocessors.
\end_layout

\begin_layout Itemize
The tclass files are highly optimized to save space.
 For instance, the constant pool (where Strings, constants and identifiers
 are stored) is shared among all deployed classes, and each class entry
 is compressed using zlib.
\end_layout

\begin_layout Itemize
Supports headless applications (like daemon applications, without user interface
): just implement the interface 
\family typewriter
totalcross.MainClass
\family default
 and this class will be loaded by the TCVM.
 The 
\family typewriter
appStarting()
\family default
 and 
\family typewriter
appEnding()
\family default
 methods are called and the application exits.
\end_layout

\begin_layout Itemize
Supports the method 
\family typewriter
finalize()
\family default
, ran every time the garbage collector (gc) finishes its job.
 There's a limitation: no objects can be created inside a finally method,
 otherwise the method will silently abort itself.
 Optionally, to improve GC's performance, you can define in your class a
 public non-static field named 
\family typewriter
dontFinalize
\family default
 that, if present and set to 
\family typewriter
true
\family default
, will skip the finalize call.
 In most cases, 
\family typewriter
finalize()
\family default
 is used to ensure that a class that holds system resources (like file or
 socket) and should be closed to release these resources is always closed,
 either because the programmer forgot to do it himself or because the program
 was halted by an exception.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that you must define the field 
\family typewriter
dontFinalize
\family default
 and set it to 
\family typewriter
true
\family default
 when the close method is run for the first time.
 Otherwise the gc will try to finalize an object that was already closed
 by the programmer, which may cause trouble.
 Doing so also speeds up the gc.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The TotalCross VM also has a drawback:
\end_layout

\begin_layout Itemize
It does not support the 
\family typewriter
float
\family default
 type, only 
\family typewriter
double
\family default
.
 This option was adopted because all actual PDA processors have a math co-proces
sor, and also because the vast majority of mobile applications are not scientifi
c programs.
 During our research, we found that 
\family typewriter
float
\family default
 types are two times faster than double, but this small performance difference
 does not make up for the overhead needed to add 
\family typewriter
float
\family default
 type support to the virtual machine.
 The change from 
\family typewriter
float
\family default
 to 
\family typewriter
double
\family default
 will be done by the translator to let legacy applications work, however,
 you should change your application to use 
\family typewriter
double
\family default
, since there's no benefit by using 
\family typewriter
float
\family default
.
\end_layout

\begin_layout Section
Thread support
\end_layout

\begin_layout Standard
TotalCross supports preemptive threads using the native thread mechanism
 of each supported platform.
 On Android, iOS, and Linux, it uses pthread; on Palm OS, it uses the undocument
ed (and quite limited) thread api; on Windows, it uses the quite well documented
 thread api, in BlackBerry, it uses the Java's thread scheduler.
\end_layout

\begin_layout Standard
The API does not support concurrency.
 If your program needs to access the same object from many threads, you
 must use the 
\family typewriter
synchronized
\family default
 keyword.
 The support for synchronized is limited: it does not support synchronized
 methods, neither classes, neither standard objects.
 You must use the 
\family typewriter
synchronized(object)
\family default
, and the only object type that can be used as parameter is the 
\family typewriter
totalcross.util.concurrent.Lock
\family default
.
 If you use 
\family typewriter
synchronized(this)
\family default
, the 
\family typewriter
tc.Deploy
\family default
 will abort during deploy; if you use synchronized with an object from any
 other class besides the 
\family typewriter
Lock
\family default
 class, a 
\family typewriter
RuntimeException
\family default
 will be thrown when your program runs in the TotalCross virtual machine.
 Note that these problems will not occur when running on Java desktop, only
 when running on TCVM.
 Here's a sample that shows how to use it:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[label=samplecode,caption=A sample]{companion_resources/listings/
TestConcurrent.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the sample above, commenting out the line marked with *****, the log
 list box will be filled randomly by the threads.
 With the lock, it will be filled in sequence, because each thread will
 gain the lock once, and the other threads will have to wait the main loop
 of the lock owner finish before starting their loops.
 There's no limit in the number of locks used.
\end_layout

\begin_layout Standard
Generally speaking, you can create a thread to listen to a socket or a file
 or even a Litebase table in background, but be aware that if you try to
 access the same resource by different threads your application might just
 blow up.
 We also don't recommend running the user interface in a background thread,
 due to system event concurrency.
 Threads should be used for I/O and other tasks, but not for showing user
 interface screens that could receive events.
\end_layout

\begin_layout Section
Graphics, Palette and Color
\end_layout

\begin_layout Standard
TotalCross has a graphics engine written from scratch, and some important
 performance-tailored decisions were taken.
\end_layout

\begin_layout Standard
Regardless of the device's color depth, the screen and images are stored
 in a 24 bpp RGB array.
 All drawings are made into a single off screen, which is then converted
 on the fly to the device's screen color depth when the 
\family typewriter
updateScreen()
\family default
 method is called.
\end_layout

\begin_layout Standard
If the screen is 8 bpp, a variant of the 685 palette (6 bits for red, 8
 for green and 5 for blue, plus 16 shades of gray) is used.
 (see Appendix C – 685 palette).
 Note: since 2011, no devices with 8 bpp are released to the market; all
 of them use 16 bpp (65536 colors).
\end_layout

\begin_layout Standard
The 
\family typewriter
Graphics
\family default
 class supports real clipping, which allowed us to support containers that
 automatically show scrollbars if components are placed beyond its limits.
\end_layout

\begin_layout Standard
TotalCross also supports screen rotation and collapsible input area.
 If the user interface is implemented using only relative coordinates, it
 will automatically reposition itself whenever the screen resolution is
 changed.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that 
\family typewriter
aControl.setRect(getClientRect())
\family default
 should never be used, otherwise the automatic repositioning will not work.
 Instead, 
\family typewriter
aControl.setRect(LEFT, TOP, FILL, FILL)
\family default
 should be used to produce the same result without affecting the repositioning.
 If you really have to use 
\family typewriter
getClientRect()
\family default
, you must also override the 
\family typewriter
reposition()
\family default
 method to support screen rotation.
 (see the WorldWatch sample).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Colors are represented by 
\family typewriter
int
\family default
 values in the 
\family typewriter
0xRRGGBB
\family default
 format.
 A 
\family typewriter
null
\family default
 color is represented by the value -1.
\end_layout

\begin_layout Section
Images
\end_layout

\begin_layout Standard
Images in TotalCross supports transparency (also known as alpha-channel).
 The best way to show images is to generate a PNG image from a vectorized
 image through Photoshop or any other good editor.
 Prefer creating a big image (for example, 96x96), then decrease its size
 at runtime using 
\family typewriter
Image.getSmoothScaledInstance
\family default
.
\end_layout

\begin_layout Section
Inheritance and Delegation event models
\end_layout

\begin_layout Standard
TotalCross supports both Inheritance (Java 1.0) and Delegation (Java 1.1)
 event models.
 However, the usage of the later one is not recommended.
 The Inheritance model will make your code smaller and faster, but there
 are some situations that require the usage of the Delegation model.
\end_layout

\begin_layout Section
Security
\end_layout

\begin_layout Standard
TotalCross applications are currently impossible to be decompiled, because,
 as mentioned before, TotalCross uses a proprietary set of opcodes instead
 of Java Bytecodes.
 The translation between Java Bytecodes to TotalCross opcodes is done automatica
lly when the application is deployed.
\end_layout

\begin_layout Standard
However, this also means that you cannot retrieve your application's source
 files from the deployed application, so don't forget to backup your source
 files!
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Standard
Be sure to read the API javadocs at 
\family typewriter
TotalCrossSDK/docs/html/index.html
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The javadocs and this reference manual are complementary, and the javadocs
 are updated more often than this text.
 So make sure to read them for more information.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are some examples in the 
\family typewriter
TotalCrossSDK/src/java/tc/samples
\family default
 directories.
 These samples covers the usage of a great portion of TotalCross' class
 library, so it's a good source of information from where you can start
 your applications.
\end_layout

\begin_layout Standard
Our official forum (
\begin_inset CommandInset href
LatexCommand href
target "http://forum.totalcross.net"

\end_inset

) is a good place to seek for help from fellow TotalCross users and share
 your knowledge.
\end_layout

\begin_layout Section
Bug Reporting
\end_layout

\begin_layout Standard
If you'd like to report a bug or problem within the TotalCross SDK – including,
 but not limited to:
\end_layout

\begin_layout Itemize
Documentation problems, grammar errors or typos.
\end_layout

\begin_layout Itemize
TotalCross platform bug.
\end_layout

\begin_layout Itemize
Sample bug.
\end_layout

\begin_layout Standard
You should first take a look at the TotalCross changelog
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "(http://www.superwaba.com.br/en/changelogs.asp)"
target "http://www.superwaba.com.br/en/changelogs.asp"

\end_inset

 and check if your bug was already fixed on a later version of the TotalCross
 SDK.
\end_layout

\begin_layout Standard
You may then use the forum to report the bug, however, its not guaranteed
 that we will fix the bug.
 If you want the bug fixed in a few days and receive a fixed virtual machine,
 you must purchase a support plan
\begin_inset CommandInset href
LatexCommand href
name " (http://www.superwaba.com.br/en/suporte.asp)"
target "http://www.superwaba.com.br/en/suporte.asp"

\end_inset

 at the site.
\end_layout

\begin_layout Standard
Here's a rough template of a bug report for TotalCross:
\end_layout

\begin_layout Itemize
TotalCross version, e.g.
 1.0 beta 4.
\end_layout

\begin_layout Itemize
Platform used and OS version, e.g.
 JDK 1.5, Windows XP, Windows Mobile 5
\end_layout

\begin_layout Itemize
Devices used, e.g.
 Android, iPhone, Java Standard Edition (desktop).
\end_layout

\begin_layout Itemize
Device model.
\end_layout

\begin_layout Itemize
Bug description.
\end_layout

\begin_layout Itemize
How to reproduce the bug?
\end_layout

\begin_layout Standard
For documentation problems and such, just pointing the resource and the
 problem is enough.
\end_layout

\begin_layout Standard
The purchased support can also be used to solve doubts about using TotalCross.
\end_layout

\begin_layout Chapter
The TotalCross SDK
\end_layout

\begin_layout Standard
The TotalCross SDK Java files are covered by the LGPL version 3.
 By installing the SDK you are agreeing with this.
 The TotalCross virtual machine follows another license.
\end_layout

\begin_layout Standard
The VM provided in the SDK is a demo version.
 It will work for 80 non-contiguous hours, regardless of the platform.
 The remaining time is updated every 5 seconds.
\end_layout

\begin_layout Standard
On devices, performing a hard-reset allows you to reinstall the VM and have
 more 80 hours to test.
 This is NOT considered a license violation.
\end_layout

\begin_layout Standard
On Win32 (Windows 2000, XP, Vista or Seven), this can only be done by reformatti
ng your hard drive and reinstalling Windows.
\end_layout

\begin_layout Standard
In order to deploy applications, the JDK 1.6 or higher is required.
\end_layout

\begin_layout Standard
In most situations, you will install several programs that will share the
 same TCVM.
 For instance, you can install 10 or more samples and a single virtual machine.
 However, if you're deploying an application to your costumer, you can package
 the VM with your application, using the 
\family typewriter
tc.Deploy
\family default
's 
\family typewriter
/p
\family default
 option.
 In this case, a single package is needed.
\end_layout

\begin_layout Section
Directory structure
\end_layout

\begin_layout Standard
The SDK has the following structure: 
\end_layout

\begin_layout Description

\family typewriter
TotalCrossSDK
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- dist
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
+ samples
\end_layout

\begin_layout Description

\family typewriter
+ vm
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
+ docs
\end_layout

\begin_layout Description

\family typewriter
+ etc
\end_layout

\begin_layout Description

\family typewriter
+ src
\end_layout

\end_deeper
\begin_layout Standard
Inside 
\family typewriter
dist
\family default
, we have:
\end_layout

\begin_layout Itemize

\family typewriter
TotalCrossSDK/dist/tc.jar
\family default
 : This file contains all 
\family typewriter
totalcross.*
\family default
 base classes and deploy tools, and it should be added to the classpath
 of your chosen IDE.
\end_layout

\begin_layout Itemize

\family typewriter
TotalCrossSDK/dist/tcweb.jar
\family default
 : This file contains all 
\family typewriter
totalcross.*
\family default
 base classes and fonts, to be used if you want to run the application in
 a browser.
\end_layout

\begin_layout Itemize

\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
samples
\family default
: Installation files for all samples.
 Lets take the UIGadgets sample, located at 
\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
samples
\backslash
UIGadgets
\family default
.
 Inside there's an install folder, and below the following folders:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
applet
\family default
: contains some 
\family typewriter
.html
\family default
 files (representing most used devices) and the application's jar.
 Using a multi-tabbed browser, you should close it every time you open one
 of the samples 
\family typewriter
.html
\family default
, otherwise errors may occur.
 You should also give special permission for file usage so that it is possible
 to manipulate files and Litebase.
\end_layout

\begin_layout Itemize

\family typewriter
bb
\family default
: BlackBerry installation files.
 The 
\family typewriter
.alx
\family default
, 
\family typewriter
.cod
\family default
 and 
\family typewriter
.jad
\family default
 files are used to deploy the file to the device, and the 
\family typewriter
.csl
\family default
 and 
\family typewriter
.cso
\family default
 to sign the file.
 (more information on the BlackBerry installation section).
\end_layout

\begin_layout Itemize

\family typewriter
iOS
\family default
: for newer versions of the iOS (iPhone and iPad), contains a 
\family typewriter
.deb
\family default
 file.
 
\end_layout

\begin_layout Itemize

\family typewriter
palm
\family default
: contains the 
\family typewriter
.pdb
\family default
 and 
\family typewriter
.prc
\family default
 files to be installed on the device.
 Optionally, you may use the 
\family typewriter
install.exe
\family default
 file, which installs the same files, but provides a simple installation
 interface.
\end_layout

\begin_layout Itemize

\family typewriter
win32
\family default
: there are two files, an 
\family typewriter
.exe
\family default
 and a 
\family typewriter
.tcz
\family default
, which must be copied to the same folder where the TotalCross VM for Win32
 is located, or to a sub folder.
 The executable will search for the VM on these locations.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If your desktop has the SDK installed, you may run the application from
 any place, as long as the environment variables set during the installation
 are not changed and the SDK installation folder is not moved.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
wince
\family default
: there are 6 
\family typewriter
.cab
\family default
 files.
 Just run the 
\family typewriter
.bat
\family default
 file inside that folder and the correct 
\family typewriter
.cab
\family default
 file for the currently connected Windows CE device will be chosen.
 If it doesn't work, you may copy the 
\family typewriter
.cab
\family default
 file to your device and open it using the device's file explorer.
\end_layout

\begin_layout Itemize

\family typewriter
linux
\family default
: a 
\family typewriter
.tcz
\family default
 file and a binary file.
 They must be copied to where the VM is, or a folder below.
\end_layout

\begin_layout Itemize

\family typewriter
android
\family default
: an 
\family typewriter
.apk
\family default
 file that contains the binary and the 
\family typewriter
.tcz
\family default
 files.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
vm
\family default
: virtual machine files that which will interpret your TotalCross code on
 the device.
 Below are instructions of how to install them in each platform:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
bb
\family default
: open the 
\family typewriter
TotalCross.alx
\family default
 file in your BlackBerry desktop software.
\end_layout

\begin_layout Itemize

\family typewriter
iOS
\family default
: copy the 
\family typewriter
.deb
\family default
 file into the device and execute a 
\family typewriter
dpkg -i <deb file>
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
palm
\family default
: install 
\family typewriter
TCBase.pdb
\family default
, 
\family typewriter
TCFont.pdb
\family default
, and 
\family typewriter
TCVM.prc
\family default
.
 Optionally, you may simply execute the 
\family typewriter
Install.exe
\family default
 file which installs the same files.
\end_layout

\begin_layout Itemize

\family typewriter
win32
\family default
: have the files 
\family typewriter
TCSync.dll
\family default
, 
\family typewriter
TCSyncLib.tcz
\family default
, 
\family typewriter
TCVM.dll
\family default
, 
\family typewriter
TCBase.tcz
\family default
, and 
\family typewriter
TCFont.tcz
\family default
 on the same folder of the application.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If your desktop has the SDK installed, this is not required, as long as
 the environment variables set during the installation are not changed and
 the SDK installation folder is not moved.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
wince
\family default
: just run the 
\family typewriter
_CEInstall-RunMe.bat
\family default
 file and the correct 
\family typewriter
.cab
\family default
 file will be installed on the device (if the installation fails, there's
 also a 
\family typewriter
.bat
\family default
 file that can be used on Windows Mobile).
 Optionally, you can grab the 
\family typewriter
TCVM.dll
\family default
 file inside the target plaform's folder and copy it to the device (preferrably,
 to 
\family typewriter

\backslash
TotalCross
\family default
).
 In this case, you must also copy the files 
\family typewriter
TCBase.tcz
\family default
 and 
\family typewriter
TCFont.tcz
\family default
 to the same folder.
\end_layout

\begin_layout Itemize

\family typewriter
android
\family default
: just install the file 
\family typewriter
TotalCross.apk
\family default
 (
\family typewriter
adb install -r TotalCross.apk
\family default
).
\end_layout

\end_deeper
\begin_layout Standard
Inside 
\family typewriter
docs
\family default
, we have:
\end_layout

\begin_layout Itemize

\family typewriter
TotalCross Companion.pdf
\family default
.
\end_layout

\begin_layout Itemize
The folder 
\family typewriter
html
\family default
, which contains the generated javadocs.
 Open the file 
\family typewriter
index.html
\family default
 to see the javadocs start page.
\end_layout

\begin_layout Standard
Inside 
\family typewriter
etc
\family default
, we have the following folders:
\end_layout

\begin_layout Itemize

\family typewriter
images
\family default
: contains images used by the SDK.
\end_layout

\begin_layout Itemize

\family typewriter
launchers
\family default
: contains files used by 
\family typewriter
tc.Deploy
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
security
\family default
: contains signature files.
\end_layout

\begin_layout Itemize

\family typewriter
tools
\family default
: contains tools used by 
\family typewriter
tc.Deploy
\family default
.
 Inside this folder, you may have to use the apache folder, which contains
 a xml-rpc server, and the commapi, which contains files that must be added
 to the classpath to use the 
\family typewriter
PortConnector
\family default
 class on desktop.
 There's also a high resolution fix for TreoPro devices, and a folder with
 some Android tools used to install the application on the device.
\end_layout

\begin_layout Standard
Inside 
\family typewriter
src
\family default
:
\end_layout

\begin_layout Itemize

\family typewriter
tc/samples:
\family default
 the sources files of all samples.
\end_layout

\begin_layout Itemize

\family typewriter
totalcross
\family default
: the sources files of the TotalCross API used on the desktop.
\end_layout

\begin_layout Section
Running the Samples
\end_layout

\begin_layout Standard
The TotalCross SDK comes with various sample applications along with their
 source code.
 The samples are simple and most of them address a specific feature.
 They were designed to show you the TotalCross main features and to provide
 a starting point for your own applications.
\end_layout

\begin_layout Standard
The built samples can be found on 
\family typewriter
TotalCrossSDK/dist/samples
\family default
.
 Just follow the installation instructions from chapter 6 and run the sample
 on your target platform.
\end_layout

\begin_layout Chapter
Building and deploying your first TotalCross application
\end_layout

\begin_layout Standard
TotalCross applications are developed almost exactly like Java applications,
 so anyone familiar with Java should be able to start small TotalCross applicati
ons in a few minutes.
\end_layout

\begin_layout Standard
However, this similarity is often also source of problems, so before writing
 any code, we must first be aware of the differences between Java and TotalCross
 development.
\end_layout

\begin_layout Itemize
The entry point of a TotalCross application is always a class that extends
 the class 
\family typewriter

\begin_inset Newline newline
\end_inset

MainWindow
\family default
 (directly or indirectly, such as 
\family typewriter
Conduit
\family default
) or implements the interface 
\family typewriter

\begin_inset Newline newline
\end_inset

MainClass
\family default
.
 It is not possible to directly run TotalCross applications in Java, in
 this case, you must use the lLauncher provided with the SDK.
 (see Chapter 4 for details about 
\family typewriter

\begin_inset Newline newline
\end_inset

totalcross.Launcher
\family default
)
\end_layout

\begin_layout Itemize
For your convenience, the TotalCross package 
\family typewriter
totalcross.lang
\family default
 is directly mapped to the Java package 
\family typewriter
java.lang
\family default
.
 Therefore, you may refer to classes from this package, such as 
\family typewriter
Object
\family default
 or 
\family typewriter
String
\family default
, like you would in any Java application, without requiring any explicit
 import.
\end_layout

\begin_deeper
\begin_layout Standard
Unfortunately this feature can be misleading, because the opposite is NOT
 true.
 The 
\family typewriter

\begin_inset Newline newline
\end_inset

java.lang
\family default
 package does have members (interfaces, classes, exceptions or errors) that
 are not available in 
\family typewriter
totalcross.lang
\family default
 – and some of the members that are available, may not implement all the
 methods provided by the homonymous member.
 Some examples are the 
\family typewriter
Integer
\family default
 class and the method 
\family typewriter
String.split()
\family default
, which are not implemented by TotalCross.
\end_layout

\begin_layout Standard
This is one of the most common pitfalls when developing TotalCross applications
 using a Java IDE, because its content assist will show classes and methods
 that are not implemented by TotalCross, and therefore, not available on
 the device.
\end_layout

\begin_layout Standard
To avoid this problem, the TotalCross deployer verifies the class files,
 reporting any invalid references found.
 The deployer will throw an exception if you try to deploy an application
 with references to classes not available in 
\family typewriter
totalcross.lang
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
TotalCross is compatible only with the Java 1.1 class file format, therefore
 the class files MUST be generated targeting the JDK 1.1 and the source files
 must be compatible with JDK 1.2.
\end_layout

\begin_deeper
\begin_layout Standard
If you're compiling using 
\family typewriter
javac
\family default
 from command line (or an ANT file), add this to your command line: 
\family typewriter
-target 1.1 -source 1.2
\family default
.
\end_layout

\begin_layout Standard
If you're using a Java IDE, look for its Java Compiler settings and set
 its compliance level to 1.3.
\end_layout

\begin_layout Standard
Again, the deployer will throw an exception if it detects an invalid class
 file format.
\end_layout

\end_deeper
\begin_layout Section
Building a sample application
\end_layout

\begin_layout Standard
For our first application, let's make a typical “Hello World” application
 using just your preferred plain text editor.
\end_layout

\begin_layout Standard
First, make sure you have a JDK installed (preferably the JDK 6) and the
 environment variables are set.
 There should be a JAVA_HOME variable set with the installation path of
 your JDK, like 
\family typewriter
C:
\backslash
Program Files
\backslash
Java
\backslash
jdk1.6.0_11
\family default
.
\end_layout

\begin_layout Standard
And another variable named PATH, which should contain a list of paths, separated
 by semicolons, with the path to the JDK's bin directory, like 
\family typewriter
%JAVA_HOME%
\backslash
bin
\family default
.
 If you don't do this, you will get the error: 
\family typewriter
[preverify] JAR file creation failed with error -1
\family default
.
\end_layout

\begin_layout Standard
You may also add the path to the TotalCross 
\family typewriter
.jar
\family default
 file (located in 
\family typewriter
TotalCrossSDK/dist/tc.
 jar
\family default
) to your CLASSPATH environment variable (or create one if the variables
 does not exists).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The usage of the CLASSPATH variable is usually not advised, because it may
 cause conflicts when different classes share the same package structure.
 Creating an ANT build file and using the command line option 
\family typewriter
-classpath
\family default
 is a better choice.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open your text editor and write the code below, saving the file as 
\family typewriter
HelloWorld.java
\family default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[label=samplecode,caption=A sample]{companion_resources/listings/
HelloWorld.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Don't worry about understanding the code, this will be covered later.
\end_layout

\begin_layout Standard
Now open a command shell at the directory where the 
\family typewriter
HelloWorld.java
\family default
 was saved, and execute the following command:
\end_layout

\begin_layout Standard

\family typewriter
javac -target 1.1 -source 1.2 HelloWorld.java
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember, if you preferred to not use the CLASSPATH variable, you must ALWAYS
 specify the path to the 
\family typewriter
tc.jar
\family default
 file using the 
\family typewriter
-classpath
\family default
 option, like this:
\end_layout

\begin_layout Plain Layout

\family typewriter
javac -classpath C:
\backslash
TotalCrossSDK
\backslash
dist
\backslash
tc.jar -target 1.1 -source 1.2 HelloWorld.java
\end_layout

\begin_layout Plain Layout
Otherwise, the Java compiler won't be able to find the TotalCross classes
 used by the application.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If successful, the Java compiler should finish silently, creating a new
 file named 
\family typewriter
HelloWorld.
 class
\family default
.
\end_layout

\begin_layout Section
Running with the Launcher (on JDK)
\end_layout

\begin_layout Standard
Using the launcher, we can run our application and take alook at the result.
 Using a command shell, execute the following command:
\end_layout

\begin_layout Standard

\family typewriter
java -classpath .;%CLASSPATH% totalcross.Launcher HelloWorld
\end_layout

\begin_layout Standard
Here we are executing the Java application 
\family typewriter
totalcross.Launcher
\family default
, passing the name of our main class (case sensitive) as argument.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
In this case, the usage of the option 
\family typewriter
-classpath
\family default
 is needed because the 
\family typewriter
HelloWorld.class
\family default
 is not in a valid package directory structure, so we must add the current
 folder to the classpath.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following window should appear on your screen:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename companion_resources/images/companion_HelloWorld_JDK.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you just started your first TotalCross application running
 on JDK!
\end_layout

\begin_layout Section
Deploying and running on Win32
\end_layout

\begin_layout Standard
The launcher provided us a quick way to look at our application's appearance,
 but that's still a Java application.
 To actually deploy our application to all platforms supported by TotalCross,
 go back to the command shell and execute this command:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy HelloWorld -all
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember to use the 
\family typewriter
-classpath
\family default
 option with the 
\family typewriter
tc.jar
\family default
 path if you're not using the CLASSPATH environment variable.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This time, we are executing the program 
\family typewriter
tc.Deploy
\family default
, passing the name of our main class as the first argument, and the platforms
 to deploy as the second argument – in this case all platforms.
 (see Chapter 5 for more information about the Deployment process).
\end_layout

\begin_layout Standard
A new folder named 
\family typewriter
install
\family default
 will be created, and inside it you should find several folders, each one
 containing the installer (or the executable) for each supported platform.
\end_layout

\begin_layout Standard
We should be able now to run the Win32 version of our application, so let's
 move to 
\family typewriter
./install/ win32
\family default
 and run the executable 
\family typewriter
HelloWorld.exe
\family default
, which should look like this:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename companion_resources/images/companion_HelloWorld_Win32.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default screen size is 240x320.
 You can change the screen size and position by editing the 
\family typewriter
.exe
\family default
 shortcut and adding the parameter 
\family typewriter
/scr x,y,width,height
\family default
.
 The possible values are: -1 to use the default and -2 to center on screen.
 Ex: "
\family typewriter
/scr -2,100,320,-1
\family default
" will open a window horizontally centered at y=100, w=320, h=320 (default
 is 0,0,240,320).
\end_layout

\begin_layout Standard
On the next chapter we'll see installation instructions for each platform.
 Practice by installing our application on different devices and see how
 it looks like on each one.
\end_layout

\begin_layout Chapter
The Launcher 
\end_layout

\begin_layout Standard
The TotalCross Launcher is a Java application that allows you to run a TotalCros
s application over the installed JDK, providing you a quick way to run and
 test your application.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Some people think that running the application on the desktop under an IDE
 (such as Eclipse or Netbeans) or on BlackBerry will use the TotalCross
 virtual machine.
 This is not true: the actual virtual machine used is the one provided in
 the Java Development Kit installed (or 
\family typewriter
java.exe
\family default
) on the desktop and a virtual machine based on J2ME on BlackBerry.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may also pass arguments to the launcher to simulate different resolutions
 and styles, and have an idea of how your application is going to look like
 on a particular device.
\end_layout

\begin_layout Standard
The basic format for using the launcher is:
\end_layout

\begin_layout Standard

\family typewriter
totalcross.Launcher [optional arguments] <main class>
\end_layout

\begin_layout Standard
The optional arguments can be any combination of the following (not case
 sensitive):
\end_layout

\begin_layout Subsection*
Screen resolution and color depth
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

<W>x<H>
\family default
: sets the width and height.
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

<W>x<H>x<bpp>
\family default
: sets the width, height and color depth.
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

PalmLo
\family default
: Palm OS low (same of 
\family typewriter
/scr 160x160x8
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

PalmHI
\family default
: Palm OS high (same of 
\family typewriter
/scr 320x320x16
\family default
), the 
\series bold
default
\series default
.
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

PalmTall
\family default
: Palm OS tall (same of 
\family typewriter
/scr 320x480x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

PalmWide
\family default
: Palm OS wide (same of 
\family typewriter
/scr 480x320x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

WinCE
\family default
: Windows CE (same of 
\family typewriter
/scr 240x320x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

Win32
\family default
: Windows 32 (same of 
\family typewriter
/scr 240x320x24
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

bbLo
\family default
: BlackBerry low (same of 
\family typewriter
/scr 320x240x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

bbBold
\family default
: BlackBerry Bold (same of 
\family typewriter
/scr 480x360x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

bbStorm
\family default
: BlackBerry Storm (same of 
\family typewriter
/scr 480x320x16
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

iPhone
\family default
: iPhone (same of 
\family typewriter
/scr 320x480x24
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

android
\family default
: Android (same of 
\family typewriter
/scr 320x480x16
\family default
).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Color depth
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

8
\family default
: emulates 8 bits per pixel screens.
 (256 colors).
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

16
\family default
: emulates 16 bits per pixel screens.
 (64K colors).
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

24
\family default
: emulates 24 bits per pixel screens.
 (16M colors).
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

32
\family default
: emulates 32 bits per pixel screens.
 (16M colors without transparency).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
User interface style
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

WinCE
\family default
: Windows CE user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

PalmOS
\family default
: Palm OS user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Flat
\family default
: Flat user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Vista
\family default
: Vista user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Android
\family default
: Android user interface style.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Device characteristics
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/penlessDevice
\family default
: acts as a device that has no touch screen.
\end_layout

\begin_layout Itemize

\family typewriter
/geofocus
\family default
: uses geographical focus (also activates 
\family typewriter
penlessDevice
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/fingerTouch
\family default
: simulates the use of fingers (since a finger is less precise than a pen,
 uses an algorithm to find the control near the finger and also activates
 drag and flick).
\end_layout

\begin_layout Itemize

\family typewriter
/unmovableSip
\family default
: specifies that the Soft Input Panel (SIP) is unmovable, and simulates
 the screen shift that's made when an 
\family typewriter
Edit
\family default
 or 
\family typewriter
MultiEdit
\family default
 gains focus.
\end_layout

\begin_layout Itemize

\family typewriter
/keypadOnly
\family default
: acts as a device that has only the 0-9{*}
\backslash
# keys.
\end_layout

\begin_layout Itemize

\family typewriter
/virtualKeyboard
\family default
: specifies that the device does not have a physical keyboard (or it has
 but the keyboard is closed).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Others
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/pos
\begin_inset space ~
\end_inset

x,y
\family default
: sets the opening position of the application.
\end_layout

\begin_layout Itemize

\family typewriter
/scale
\begin_inset space ~
\end_inset

<0.1
\begin_inset space ~
\end_inset

to
\begin_inset space ~
\end_inset

4>
\family default
: scales the screen, magnifying the contents (if greater than 1) or shrinking
 (if between 0 and 1).
\end_layout

\begin_layout Itemize

\family typewriter
/dataPath
\begin_inset space ~
\end_inset

<path>
\family default
: sets where the PDB and media files are stored.
 This is also the default path for Litebase table files.
\end_layout

\begin_layout Itemize

\family typewriter
/cmdLine
\begin_inset space ~
\end_inset

<...>
\family default
: the rest of the arguments (except the last one) are passed as the command
 line to the application being launched.
\end_layout

\begin_layout Itemize

\family typewriter
/showmousepos
\family default
: shows the mouse position (only when running on JavaSE).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last argument passed to the launcher is always the qualified name of
 the main class of the application to be launched (for example, 
\family typewriter
tc.samples.ui.gadgets.UIGadgets
\family default
).
\end_layout

\begin_layout Standard
When running the application, the emulator shows some function keys that
 can be used to emulate a device key.
 For example, F6 opens the application menu, F9 tests the screen rotation
 using the launcher and F11 opens the keyboard (or calendar) in an 
\family typewriter
Edit
\family default
 field.
\end_layout

\begin_layout Chapter
Deployment Process
\end_layout

\begin_layout Standard
To deploy your TotalCross application, you must use the Java application
 named 
\family typewriter
tc.Deploy
\family default
, packaged with the 
\family typewriter
tc.jar
\family default
 located at 
\family typewriter
TotalCrossSDK/dist
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To run a Java application from a jar file, you must specify the source 
\family typewriter
.jar
\family default
 to the Java classpath, e.g.
 
\family typewriter
java -classpath C:
\backslash
TotalCrossSDK
\backslash
dist
\backslash
tc.jar tc.Deploy […]
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
tc.Deploy
\family default
 program will, starting in the working directory, create folders with the
 installation files for each platform.
 A 
\family typewriter
.tcz
\family default
 file is outputted with all classes and its dependencies, already translated
 to the target opcodes, and compressed with ZLib to save space.
 We recommend that the original classes are compiled with debug information,
 because line numbers will be included in the 
\family typewriter
.tcz
\family default
 and will be available in the stack trace (all other debug information are
 discarded).
 
\family typewriter
.bmp
\family default
 and 
\family typewriter
.gif
\family default
 files are automatically converted to 24bpp 
\family typewriter
.png
\family default
 files (JPeg are kept in its original format – read more about images below).
 The 
\family typewriter
.tcz
\family default
 file is not compliant with the 
\family typewriter
.zip
\family default
 format, although ZLib is used, because we need to store more information
 in the 
\family typewriter
.tcz
\family default
 file.
 Note that, since we translate the programs to our opcodes, there's no need
 to run obfuscators in the class file, because obfuscation is already done
 by the converter.
 Actually, 
\family typewriter
.tcz
\family default
 files are 1/4 of the original class size, 50% due to our tclass file format
 and 50% more due to the ZLib compression.
 
\end_layout

\begin_layout Section
Parameters
\end_layout

\begin_layout Standard
The basic format is: 
\end_layout

\begin_layout Standard

\family typewriter
tc.Deploy <application/library to deploy> <target platforms> [other options]
\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Enumerate

\family typewriter
<application/library to deploy>
\family default
 must be one of the following:
\end_layout

\begin_deeper
\begin_layout Itemize
The main class file name (the 
\family typewriter
.class
\family default
, not the 
\family typewriter
.java
\family default
).
 You can pass the full path to the main class file instead of its fully
 qualified name (
\family typewriter
App
\family default
 x 
\family typewriter
my.sample.App
\family default
).
\begin_inset Newline newline
\end_inset

For example, to deploy 
\family typewriter
my.sample.App
\family default
 at 
\family typewriter

\begin_inset Newline newline
\end_inset

C:/myprogram/classes/my/sample/App.class
\family default
:
\begin_inset Newline newline
\end_inset


\family typewriter
cd C:/myprogram/classes
\begin_inset Newline newline
\end_inset

tc.Deploy my/sample/App.class
\family default

\begin_inset Newline newline
\end_inset

or
\begin_inset Newline newline
\end_inset


\family typewriter
tc.Deploy c:/myprogram/classes/my/sample/App.class
\family default

\begin_inset Newline newline
\end_inset

The correct package is automatically detected from the class file.
\end_layout

\begin_layout Itemize
The folder that contains a single class that implements 
\family typewriter
MainClass
\family default
 or directly extends one of the following classes: 
\family typewriter
MainWindow
\family default
, 
\family typewriter
Conduit
\family default
, 
\family typewriter
TestSuite
\family default
 or 
\family typewriter

\begin_inset Newline newline
\end_inset

GameEngineMainWindow
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
This option will not work if your main class extends a class which in turn
 extends one of the classes listed above.
\end_layout

\begin_layout Standard
For instance:
\end_layout

\begin_layout Standard
Assuming 
\family typewriter
App
\family default
 is the main class, “
\family typewriter
MainWindow
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
App
\family default
” will work, but “
\family typewriter
MainWindow
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
AnotherClass
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
App
\family default
” will not work.
\end_layout

\begin_layout Standard
This option will also fail if the given folder contains more than one valid
 main class.
\end_layout

\begin_layout Standard
The deployer automatically detects and includes 
\family typewriter
Class.forName()
\family default
 references.
\end_layout

\end_deeper
\begin_layout Itemize
A 
\family typewriter
.jar
\family default
 or 
\family typewriter
.zip
\family default
 file containing all the required files, like 
\family typewriter
tc.Deploy App.jar
\family default
 or 
\family typewriter
tc.Deploy App.zip
\family default
 (a 
\family typewriter
.jar
\family default
 file is basically a 
\family typewriter
.zip
\family default
 file with a new extension).
 To create a 
\family typewriter
.jar
\family default
 file, open the command prompt, change to the class files folder (usually
 
\family typewriter
/bin
\family default
 or 
\family typewriter
/classes
\family default
), and type: 
\family typewriter
jar cvf App.jar
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
Please notice this is the only option that does not require a main class
 to be used, therefore, it's the only valid option to create libraries (which
 usually does not have a main class).
\end_layout

\begin_layout Standard
To create a library, you must end your 
\family typewriter
.jar
\family default
 name with 
\family typewriter
lib
\family default
 or 
\family typewriter
Lib
\family default
, such as 
\family typewriter
xxxlib.jar
\family default
 or 
\family typewriter
xxxLib.jar
\family default
.
\end_layout

\begin_layout Standard
However, if you use this option to deploy an application, the 
\family typewriter
.jar/.zip
\family default
 file must have the same name of the main class.
 (e.g.
 if your main class is 
\family typewriter
App.class
\family default
, the resulting 
\family typewriter
.jar/.zip
\family default
 file must be either 
\family typewriter
App.jar
\family default
 or 
\family typewriter
App.zip
\family default
).
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\family typewriter
<platforms to deploy>
\family default
 must be any combination of the following:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
palm
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

-palmos
\family default
 Creates the Palm OS files (
\family typewriter
.pdb
\family default
 and 
\family typewriter
.prc
\family default
 if a main class is detected, otherwise only a 
\family typewriter
.pdb
\family default
 file) and also an installer, which is an executable that contains the created
 files.
\end_layout

\begin_layout Itemize

\family typewriter
ce
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

-wince
\family default
 Creates the 
\family typewriter
.cab
\family default
 files for WinCE, and a batch installer which invokes your synchronization
 software (ActiveSync or Windows Mobile Device Center).
\end_layout

\begin_layout Itemize

\family typewriter
winmo
\family default
 Creates a 
\family typewriter
.cab
\family default
 file for Windows Mobile only.
\end_layout

\begin_layout Itemize

\family typewriter
win32
\family default
 Creates an executable file to run the application in Win32.
\end_layout

\begin_layout Itemize

\family typewriter
bb
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

-blackberry
\family default
 Creates the 
\family typewriter
.cod
\family default
 file for BlackBerry.
\end_layout

\begin_layout Itemize

\family typewriter
applet
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

-html
\family default
 Creates the HTML files and a 
\family typewriter
.jar
\family default
 file.
\end_layout

\begin_layout Itemize

\family typewriter
android
\family default
 Creates the 
\family typewriter
.apk
\family default
 file for Android.
\end_layout

\begin_layout Itemize

\family typewriter
linux
\family default
 Creates the binary and the 
\family typewriter
.tcz
\family default
 files for Linux.
\end_layout

\begin_layout Itemize

\family typewriter
all
\family default
 Single command to create all of the above.
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
[other options]
\family default
 may be any combination of the following options:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
/a
\begin_inset space ~
\end_inset

ApId
\family default
 : Assigns the application id; can only be used for libraries or passing
 a 
\family typewriter
.tcz
\family default
 file.
 Under normal situations, set the 
\family typewriter
Settings.applicationId
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
/autostart
\family default
 : automatically starts the application after a boot is completed.
 Currently works for Android only.
\end_layout

\begin_layout Itemize

\family typewriter
/c
\begin_inset space ~
\end_inset

cmd
\family default
 : Specify a command line to be passed to the application.
\end_layout

\begin_layout Itemize

\family typewriter
/i
\begin_inset space ~
\end_inset

platforms
\family default
 : Pass a list of comma-separated platforms to let the generated file be
 installed.
 Currently works on for Android.
 E.G.: 
\family typewriter
/i android
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
/k
\family default
 : Keeps the .
\family typewriter
exe
\family default
 and other temporary files during WinCE generation (the files needed for
 manual installation).
\end_layout

\begin_layout Itemize

\family typewriter
/kn
\family default
 : As 
\family typewriter
/k
\family default
, but does not create the 
\family typewriter
.cab
\family default
 files for wince.
\end_layout

\begin_layout Itemize

\family typewriter
/m
\begin_inset space ~
\end_inset

path
\family default
 : Specifies a path to the mobileprovision and certificate store to deploy
 an 
\family typewriter
.ipa
\family default
 file for iOS.
\end_layout

\begin_layout Itemize

\family typewriter
/n
\begin_inset space ~
\end_inset

name
\family default
 : Overrides the name of the 
\family typewriter
.tcz
\family default
 file with the given one.
 Only works when deploying a 
\family typewriter
.jar
\family default
 or a 
\family typewriter
.tcz
\family default
 file.
\end_layout

\begin_layout Itemize

\family typewriter
/o
\begin_inset space ~
\end_inset

path
\family default
 : Overrides the output folder (defaults to the current folder) to the given
 one.
\end_layout

\begin_layout Itemize

\family typewriter
/p
\begin_inset space ~
\end_inset

type
\family default
 : Packages the VM (and optionally Litebase) with the application, creating
 a single installation file.
 The type parameter can be one of the following: 
\family typewriter
demo
\family default
, 
\family typewriter
demo+ litebase
\family default
, 
\family typewriter
release
\family default
, 
\family typewriter
release+litebase
\family default
 (where demo/release are the virtual machine types you want to include:
 the time-limited demonstration, or the release that requires activation).
 The DEMO SDKs must be in the path or in the TOTALCROSS_HOME/ LITEBASE_HOME
 environment variables, and the RELEASE SDKs must be in the same parent
 folder of the DEMO ones.
 Example: if TOTALCROSS_HOME points to 
\family typewriter
t:
\backslash
sdks
\backslash
 TotalCrossSDK
\family default
, then the VMS must be at 
\family typewriter
t:
\backslash
sdks
\backslash
TotalCrossVMS
\family default
.
 If the TOTALCROSS_HOME and LITEBASE_HOME are not set, then all SDKs must
 be at the top-level folder of the 
\family typewriter
TotalCrossSDK
\backslash
etc
\family default
 folder.
\begin_inset Newline newline
\end_inset

The files are always installed at the same folder of the application, so
 each application will have its own VM/litebase.
 You can optionally set four environment variables, pointing to the folder
 of each SDK (these will have priority over the other locations previously
 described): 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
TabPositions{4.5cm}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
TOTALCROSS_DEMO 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tab
\end_layout

\end_inset

 : must point to the TotalCross SDK folder
\end_layout

\begin_layout Itemize
TOTALCROSS_RELEASE 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tab
\end_layout

\end_inset

 : must point to the TotalCross VMS folder
\end_layout

\begin_layout Itemize
LITEBASE_DEMO 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tab
\end_layout

\end_inset

 : must point to the Litebase SDK folder
\end_layout

\begin_layout Itemize
LITEBASE_RELEASE 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tab
\end_layout

\end_inset

 : must point to the Litebase VMS folder
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
/r
\begin_inset space ~
\end_inset

key
\family default
: Signs the 
\family typewriter
.tcz
\family default
 file with the given registration key (used when you purchase a VM license).
\end_layout

\begin_layout Itemize

\family typewriter
/s
\begin_inset space ~
\end_inset

pass
\family default
: Launches the BlackBerry SignatureTool and automatically sign the COD module
 using the password provided.
 If no password is provided, the SignatureTool will be launched and you
 will have to specify a password manually.
\end_layout

\begin_layout Itemize

\family typewriter
/t
\family default
: Only tests if the class is ok to be deployed; no 
\family typewriter
.tcz
\family default
 files nor installation files are generated.
\end_layout

\begin_layout Itemize

\family typewriter
/v
\family default
: Verbose output for information messages.
\end_layout

\begin_layout Itemize

\family typewriter
/w
\family default
: If an error occurs, waits for the ENTER key to be pressed before the window
 closes.
\end_layout

\begin_layout Itemize

\family typewriter
/x
\begin_inset space ~
\end_inset

list
\family default
: Comma-separated list of class names that must be excluded (in a starts-with
 manner).
\end_layout

\end_deeper
\begin_layout Section
Options retrieved from the static initializer
\end_layout

\begin_layout Standard
You may have noticed that there's no need to pass any parameters for the
 application, like creator id or the icon's title.
 All these are inferred from the default constructor and the static initializer
 of the main class.
\end_layout

\begin_layout Standard
The following patterns are used:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Icon
\begin_inset space ~
\end_inset

Title
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value Main class' name.
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
super(“My application”, border_type);
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "My application" is used as the icon's title.
 You may change the application's title to something else if desired: 
\family typewriter
super("My icon title", border_type); setTitle("My app title");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application Title
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
super("My application" + " " + Settings.appVersion, border_type);
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "My application" is used as the icon's title, but the application
 title would be something like “My application 1.3”.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

ID
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value An ID is created based on the name of the main class.
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {Settings.applicationId = "Crtr";}
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "Crtr" will be the creator id (in TotalCross it is called application
 id, which is the correct name that Palm should use or BlackBerry and Android,
 when using a single package, application folder).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

Version
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {Settings.appVersion = "1.3";}
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "1.3" will be used to set the version of the application in the
 stubs.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Company
\begin_inset space ~
\end_inset

Informations
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {
\end_layout

\begin_deeper
\begin_layout Plain Layout

\family typewriter
Settings.companyInfo = "My company information";
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.companyContact = “me@company.com”;
\end_layout

\begin_layout Plain Layout

\family typewriter
}
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "This is my company information" will be used as the company's
 information.
 You may also use this in an 
\begin_inset Quotes eld
\end_inset

about
\begin_inset Quotes erd
\end_inset

 box in your program.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

Information
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {
\end_layout

\begin_deeper
\begin_layout Plain Layout

\family typewriter
Settings.appCategory = “my products”;
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.appLocation = “www.mycompany.com”;
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.appDescription = “This is my program”;
\end_layout

\begin_layout Plain Layout

\family typewriter
}
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property The 
\family typewriter
appCategory
\family default
 is used on the iPhone and palm platforms.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
appLocation
\family default
 is used on the iPhone platform.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
appDescription
\family default
 is used on the iPhone and BlackBerry platforms.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you specify these outside the static initializer, like in the constructor,
 default values will be assumed.
\end_layout

\begin_layout Standard
There are other options that are set by the programmer in the static initializer
: 
\end_layout

\begin_layout Itemize

\family typewriter
Settings.closeButtonType
\family default
: for WinCE only, can assume three options: 
\family typewriter
NO_BUTTON
\family default
, which shows no button in the task bar; 
\family typewriter
CLOSE_BUTTON
\family default
, which shows the default OK button that closes the application, or 
\family typewriter
MINIMIZE_BUTTON
\family default
, which uses a X button to minimize the application.
\end_layout

\begin_layout Itemize

\family typewriter
Settings.fullScreen
\family default
: makes it full screen at startup.
\end_layout

\begin_layout Itemize

\family typewriter
Settings.fullScreenPlatforms
\family default
: selects which platforms the fullScreen member will be applied to.
\end_layout

\begin_layout Itemize

\family typewriter
Settings.useNewFont
\family default
: uses the new font format introduced in version 1.3
\end_layout

\begin_layout Itemize

\family typewriter
Settings.activationServerURI
\family default
 and 
\family typewriter
activationServerNamespace
\family default
: defines the middleware server that will be used to restrict the activations.
 Read more in the Activation Server chapter.
\end_layout

\begin_layout Section
Specifying the Icon
\end_layout

\begin_layout Standard
The easiest way to create an icon is to provide an 
\family typewriter
appicon.gif
\family default
 file of any SQUARE size (80x80 preferable) and any palette, which will
 be automatically converted to the target icon sizes.
 Put the file in the 
\family typewriter
src
\family default
 folder.
\end_layout

\begin_layout Standard
If the appearance of the icons does not look good, you can create some 
\family typewriter
.bmp
\family default
 and 
\family typewriter
.png
\family default
 files for each platform: 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring Blackberry0
Palm
\begin_inset space ~
\end_inset

OS 
\family typewriter
icon15x9x8.bmp
\family default
, 
\family typewriter
icon30x18x8.bmp
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

icon22x22x8.bmp
\family default
, 
\family typewriter
icon44x44x8.bmp
\end_layout

\begin_layout Labeling
\labelwidthstring Blackberry0
Windows 
\family typewriter
icon16x16x8.bmp
\family default
, 
\family typewriter
icon32x32x8.bmp
\family default
, 
\family typewriter
icon48x48x8.bmp
\end_layout

\begin_layout Labeling
\labelwidthstring Blackberry0
iPhone 
\family typewriter
icon60x60.png
\end_layout

\begin_layout Labeling
\labelwidthstring Blackberry0
BlackBerry 
\family typewriter
icon80x80.png
\end_layout

\begin_layout Labeling
\labelwidthstring Blackberry0
Android 
\family typewriter
icon72x72.png
\family default
.
 Use alpha-channel on PNG for better appearance).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Be careful with the palette of the 
\family typewriter
.bmp
\family default
 files, never use the MS Paint program; instead, get the 
\family typewriter
.bmp
\family default
 files that are in the 
\family typewriter
etc/images
\family default
 folder and edit them in a software that keeps the original palette, like
 Photoshop and PaintShopPro.
\end_layout

\begin_layout Section
Adding other files to the package
\end_layout

\begin_layout Standard
Optionally, you can create a 
\family typewriter
.pkg
\family default
 file with additional files that will be added to the 
\family typewriter
install.exe
\family default
 or to the cab files.
 The file must have a set of 
\family typewriter
[G]
\family default
 and/or 
\family typewriter
[L]
\family default
 lines followed by the file name (which is searched in the classpath and
 in current folder).
 Files prefixed with 
\family typewriter
[G]
\family default
 are placed in the same folder of the TCVM, and 
\family typewriter
[L]
\family default
 in the application's folder.
 If the file ends with a slash, indicating that its a path, all files inside
 that path will be added.
\end_layout

\begin_layout Standard
The possible pkg files are: 
\family typewriter
palm.pkg
\family default
, 
\family typewriter
wince.pkg
\family default
, 
\family typewriter
iphone.pkg
\family default
, 
\family typewriter
android.pkg
\family default
, 
\family typewriter
bb.pkg
\family default
, 
\family typewriter
linux.pkg
\family default
, and 
\family typewriter
win32.pkg
\family default
 – for each platform, or 
\family typewriter
all.pkg
\family default
 for all platforms.
\end_layout

\begin_layout Standard
See other options running 
\family typewriter
tc.Deploy
\family default
 without parameters.
\end_layout

\begin_layout Chapter
Installing your application
\end_layout

\begin_layout Section
BlackBerry
\end_layout

\begin_layout Subsection
Deployment
\end_layout

\begin_layout Standard
You must update your ROM to version 4.3.
 TotalCross will not run on versions before that one.
\end_layout

\begin_layout Standard
To deploy a TotalCross application or library for BlackBerry devices, run
 tc.Deploy as follows:
\end_layout

\begin_layout Standard

\family typewriter
tc.Deploy [-Drim.root=“rim_root”] 
\begin_inset Newline newline
\end_inset

[-Drim.class.path=“rim_class_path”] [/s [password]] “application” -bb 
\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Itemize

\family typewriter
rim_root
\family default
 is the path to the BlackBerry JDE or BlackBerry Component Package root
 directory.
 If not specified, 
\family typewriter
tc.Deploy
\family default
 will use the internal BlackBerry Component Package distribution: 
\family typewriter
…/TotalCrossSDK/etc/tools/bb
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
rim_class_path
\family default
 is the set of paths to search for BlackBerry libraries (
\family typewriter
.jar
\family default
 files).
 This path must include the BlackBerry library (
\family typewriter
net_rim_api.jar
\family default
), the TotalCross for BlackBerry (
\family typewriter
TotalCross.jar
\family default
) and any other TotalCross libraries needed by your application (like Litebase,
 for example).
 If not specified, 
\family typewriter
tc.Deploy
\family default
 will search for libraries only under the default library directory: 
\family typewriter
rim.root/lib
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
application
\family default
 is the path to the main class of your application, or the 
\family typewriter
.jar
\family default
 file containing the application or the library to be deployed.
\end_layout

\begin_layout Standard
If the optional parameter 
\family typewriter
/s
\family default
 is specified, 
\family typewriter
tc.Deploy
\family default
 will automatically open the SignatureTool after the TotalCross application
 or library has been deployed, so you can type the password (you may also
 give the password as a parameter to 
\family typewriter
/s
\family default
).
 It is important to say that the two signature files (see the Signature
 section for details) must be placed under the 
\family typewriter
TotalCrossSDK/etc/tools/bb/bin
\family default
 directory, otherwise the deployer will claim that no signature key was
 found.
\end_layout

\begin_layout Subsection
Installation
\end_layout

\begin_layout Standard
To install a TotalCross application or library on BlackBerry devices or
 the simulators, first you have to deploy it.
 Then, make sure 
\family typewriter
tc.Deploy
\family default
 has generated the following files under the 
\family typewriter
…/install/ bb
\family default
 directory:
\end_layout

\begin_layout Itemize

\family typewriter
<application_name
\family default
>
\family typewriter
.cod
\family default
 contains the application modules for BlackBerry.
 It is used both in desktop and OTA (over-the-air, refer to 
\family typewriter
http://www.blackberry.com/
\begin_inset Newline newline
\end_inset

developers
\family default
) installations.
\end_layout

\begin_layout Itemize

\family typewriter
<application_name
\family default
>
\family typewriter
.alx
\family default
 is used together with 
\family typewriter
<application_name>.cod
\family default
 to install the application or library using the BlackBerry Desktop Software.
\end_layout

\begin_layout Itemize

\family typewriter
<application_name
\family default
>
\family typewriter
.jad
\family default
 is used together with 
\family typewriter
<application_name>.cod
\family default
 to install the application or library using the OTA method.
\end_layout

\begin_layout Standard
The Desktop installation method is pretty straightforward.
 In the BlackBerry Desktop Software, open the “Application Loader” and follow
 the instructions.
 When the list box containing all the applications that are currently installed
 on the device is displayed, click “Add…”, select the
\begin_inset Newline newline
\end_inset


\family typewriter
<application_name>.alx
\family default
 file and confirm.
 The selected application should appear on the list.
 If so, click “Next” and wait until the process is finished.
 
\end_layout

\begin_layout Standard
You must always install 
\family typewriter
TotalCross.cod
\family default
, then 
\family typewriter
Litebase.cod
\family default
, then your application's 
\family typewriter
.cod
\family default
 file.
 If you don't follow this order, you will have problems.
 It is also possible to install the above three modules at the same time
 using BlackBerry Desktop Software.
\end_layout

\begin_layout Subsection
Signature
\end_layout

\begin_layout Standard
Before a TotalCross application can be installed on a BlackBerry device
 it is necessary to sign its module using the SignatureTool and the keys
 provided by RIM – Research In Motion.
 
\end_layout

\begin_layout Standard
If you do not have the signature keys, you must request them directly to
 RIM.
 More information can be found here: http://na.blackberry.com/eng/developers/javaa
ppdev/codekeys.jsp (if this link is broken, go to www.blackberry.com, click
 Developers at the top row, then click “Java Application Development” at
 the left menu, and then “Development Tools and Downloads”) .
 After receiving and registering your keys in your computer, you will see
 the two key files in your BlackBerry JDE or BlackBerry Component Package
 root directory: 
\family typewriter
sigtool.csk
\family default
 and 
\family typewriter
sigtool.db
\family default
.
 
\end_layout

\begin_layout Standard
Signing a TotalCross application or library is the same as signing any other
 BlackBerry application: you must open SignatureTool (the RIM signature
 application) and load the application 
\family typewriter
.cod
\family default
 module.
 Then, click request, type your password and wait until the signing process
 is finished.
 
\end_layout

\begin_layout Standard
You can also automatically sign TotalCross applications or libraries during
 the deployment process.
 To do this, you must specify the option 
\family typewriter
/s
\family default
 when running 
\family typewriter
tc.Deploy
\family default
 (see the Deployment section for details).
 
\end_layout

\begin_layout Section
iPhone/iPad
\end_layout

\begin_layout Subsection
Deploying as IPA for enterprise distribution
\end_layout

\begin_layout Standard
After joining Apple's enterprise development program, you'll be able to
 create a certificate to distribute in-house applications.
 Applications signed with this certificate may be distributed 
\emph on
only
\emph default
 for employees of the company that owns the certificate, and may not be
 distributed for third companies.
\end_layout

\begin_layout Standard
First, download and install openssl for your OS.
 (For 
\begin_inset CommandInset href
LatexCommand href
name "Win32"
target "http://slproweb.com/products/Win32OpenSSL.html"

\end_inset

)
\end_layout

\begin_layout Standard
Now create a config file with your certificate request info, like this:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
[ req ]
\end_layout

\begin_layout Plain Layout

\family typewriter
distinguished_name = req_distinguished_name
\end_layout

\begin_layout Plain Layout

\family typewriter
prompt = no
\end_layout

\begin_layout Plain Layout

\family typewriter
[ req_distinguished_name ]
\end_layout

\begin_layout Plain Layout

\family typewriter
emailAddress = john@webmail.com 
\end_layout

\begin_layout Plain Layout

\family typewriter
commonName = John Doe 
\end_layout

\begin_layout Plain Layout

\family typewriter
countryName = BR 
\end_layout

\begin_layout Plain Layout

\family typewriter
stateOrProvinceName = Rio de Janeiro 
\end_layout

\begin_layout Plain Layout

\family typewriter
localityName = Rio de Janeiro
\end_layout

\begin_layout Plain Layout

\family typewriter
organizationName = John's Company
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now run the following command on the shell:
\end_layout

\begin_layout Standard

\family typewriter
openssl req -nodes -newkey rsa:2048 -keyout request.key -out 
\begin_inset Newline newline
\end_inset

request.csr -config config
\end_layout

\begin_layout Standard
If successful, there will be two new files on the folder: 
\family typewriter
request.key
\family default
 and 
\family typewriter
request.csr
\family default
.
\end_layout

\begin_layout Standard
Now go to the iOS Provisioning Portal and request a new distribution certificate.
 When prompted for a certificate request, use the file 
\family typewriter
request.csr
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Uploading the certificate request may fail on some browsers, but it should
 work on Safari, Chrome or Firefox.
 Try using a different browser if the certificate request is not accepted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Download the newly created certificate (which name is by default 
\family typewriter
ios_distribution.cer
\family default
) and run the following command:
\end_layout

\begin_layout Standard

\family typewriter
openssl x509 -in ios_distribution.cer -inform DER -out 
\begin_inset Newline newline
\end_inset

ios_distribution.pem -outform PEM
\end_layout

\begin_layout Standard
This command will create the file 
\family typewriter
ios_distribution.pem
\family default
, now run:
\end_layout

\begin_layout Standard

\family typewriter
openssl pkcs12 -export -inkey request.key -in ios_distribution.pem 
\begin_inset Newline newline
\end_inset

-out ios_distribution.p12
\end_layout

\begin_layout Standard
When prompted for a password, just hit enter and leave it empty.
\end_layout

\begin_layout Standard
Now you must go back to the iOS Provisioning Portal to create a new mobile
 provision.
\end_layout

\begin_layout Standard
From the iOS Provisioning Portal, go to "App IDs" to create an id for your
 application.
 Make sure to double check everything when creating ids because once created
 they cannot be removed! (There's no limit to the number of app ids you
 can have, but you don't want to end up with dozens of unused ids cluttering
 your page.)
\end_layout

\begin_layout Standard
For this first time, I suggest you to use the wildcard app id that should
 come configured by default.
 (If you don't have it, just create one using * as Bundle Identifier)
\end_layout

\begin_layout Standard
Now move on to Provisioning, switch to the Distribution tab and click on
 "New Profile".
 In "Distribution Method" choose "In House", and use the same distribution
 certificate and app ids you already created.
 Name it and after submitting use the download option in the Distribution
 tab to download it to the same folder where you have your certificate and
 keystore.
\end_layout

\begin_layout Standard
The mobile provision allows only the application with the specified id to
 run on the device.
 If you create the mobile provision using the wildcard app id, it will allow
 any application signed by you to work on the device, making it very useful
 for testing your applications without creating additional ids that can't
 be later removed.
\end_layout

\begin_layout Standard
After completing this steps you should have the following files:
\end_layout

\begin_layout Description

\family typewriter
\series medium
config
\family default
\series default
 used to create a request certificate, may be deleted now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
request.key
\family default
\series default
 RSA key used to sign your certificate request, it is no longer necessary
 but you should keep it as it is required to create 
\family typewriter
ios_distribution.p12
\family default
.
\end_layout

\begin_layout Description

\family typewriter
\series medium
request.csr
\family default
\series default
 certificate request sent to the iOS Provisioning Portal, may be deleted
 now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.cer
\family default
\series default
 certificate downloaded from the iOS Provisioning Portal.
 Required to deploy the application, but it may be redownloaded if lost.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.pem
\family default
\series default
 intermediary file used to create 
\family typewriter
ios_distribution.p12
\family default
, may be deleted now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.p12
\family default
\series default
 key store that contains the keys used to generate the certificate.
 Required to deploy the application and must not be password protected.
\end_layout

\begin_layout Description

\family typewriter
\series medium
<user-defined
\begin_inset space ~
\end_inset

name>.mobileprovision
\family default
\series default
 provisioning file that allows your application to be installed on the device.
\end_layout

\begin_layout Standard
When deploying your application you must use the argument 
\family typewriter
/m
\family default
 with the path to the certificate and key store that will be used to sign
 your iOS application.
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy .....
 -iphone (or -all) /m <cert-and-keystore-path>
\end_layout

\begin_layout Subsection
Deploying as .deb for jailbroken devices
\end_layout

\begin_layout Standard
First, to deploy TotalCross in your iPhone/iPad, you will have to JailBreak
 it.
\end_layout

\begin_layout Standard
To install a TotalCross application on iPhone, you have two choices: perform
 a manual installation or support the package manager named “Cydia”.
\end_layout

\begin_layout Standard
When the iOS is jailbroken, most programs have problems to keep the wifi
 connection working.
 We found an easy way to bypass this: all you have to do is ping the device.
 The best way to do this is to give your iOS device a fixed ip.
 Suppose it is 192.168.2.100; open a command prompt, and type: 
\family typewriter
ping 192.168.2.100 -n 1000000
\family default
.
 This will keep pinging the device 1 million times.
 If at the start of the ping you get that the ip is unreachable, open any
 URL at Safari on the device.
 Note that the device's wifi will continue to work even if the screen is
 dimmed, thus, consuming batteries.
 To completely turn off the device, you must press the on-off button.
\end_layout

\begin_layout Subsubsection
"Cydia" support 
\end_layout

\begin_layout Standard
Upload the 2 files (
\family typewriter
.bz2
\family default
 and 
\family typewriter
.deb
\family default
) that were created by 
\family typewriter
tc.Deploy
\family default
 to a site.
 For example, we will use 
\family typewriter
www.totalcross.com/androidui
\family default
.
\end_layout

\begin_layout Standard
Run Cydia on the iphone/ipad, press Manage and then the Sources button.
 Press Edit, then Add button.
 Then type the site url you created (e.g.: http://www.totalcross.com/androidui).
 Cydia will then add this site as a source.
 When it returns to the list, select the url in the list and select the
 application you want to install.
 
\end_layout

\begin_layout Standard
If you're running a Windows server, you must add two mimetypes to it: 
\family typewriter
.bz2
\family default
 (
\family typewriter
application/ bzip2
\family default
) and 
\family typewriter
.deb
\family default
 (
\family typewriter
application/x-deb
\family default
).
 Otherwise, Cydia will fail to locate the files in the folder.
\end_layout

\begin_layout Standard
By default, the option 
\family typewriter
-iphone
\family default
 will create a 
\family typewriter
.bz2
\family default
 file with a simple program.
 You can join 
\family typewriter
.bz2
\family default
 files of many programs using the 
\family typewriter
tc.tools.deployer.IPhoneBuildSource
\family default
 tool.
\end_layout

\begin_layout Subsubsection
Manual installation of .deb files 
\end_layout

\begin_layout Standard
You can also follow these instructions, which shows two ways to install
 a 
\family typewriter
.deb
\family default
 file manually:
\end_layout

\begin_layout Standard
Prerequisites: 
\end_layout

\begin_layout Itemize
A Jailbroken iPhone/iPad/iPodTouch.
\end_layout

\begin_layout Itemize
iSpirit (for Windows) installed.
\begin_inset Newline newline
\end_inset

This free software can be found at http://www.ithemesky.com/ispirit.
\end_layout

\begin_layout Itemize
Optional: you may also use WinSCP, which can be found at http://winscp.net/eng/do
wnload.php.
 Note that iSpirit is much easier.
\end_layout

\begin_layout Standard
Using iSpirit
\end_layout

\begin_layout Enumerate
Select the [Connection Mode].
 If you want to use wifi, select wifi and put the ip address of the phone.
\end_layout

\begin_layout Enumerate
Press the [Install app] button from the iSpirit menu.
\end_layout

\begin_layout Enumerate
From the file browser dialog box that appears below, navigate to and select
 the desired 
\family typewriter
.deb
\family default
 file by tapping the Select File button.
 
\end_layout

\begin_layout Enumerate
After selecting the desired 
\family typewriter
.deb
\family default
 file, press the install button shown in the above dialog box, and iSpirit
 will do the rest.
 When it completes, your application will be installed and ready to run.
\end_layout

\begin_layout Section
Palm OS
\end_layout

\begin_layout Standard
By default, the application will be installed under the "TotalCross Apps"
 category.
 To change it to another category, set the 
\family typewriter
Settings.appCategory
\family default
 field to the desired category.
 Note that there's a limit in the number of categories a Palm device can
 have; the new category is ignored if this limit is reached.
\end_layout

\begin_layout Subsection
Using the installer
\end_layout

\begin_layout Standard
Just execute the installer created by the deployer under the palm directory.
\end_layout

\begin_layout Subsection
Manual installation
\end_layout

\begin_layout Standard
If the installer fails for some reason (required libraries not found or
 incompatible version), you can manually install the 
\family typewriter
.pdb
\family default
 and 
\family typewriter
.prc
\family default
 files using the Palm Quick Install.
\end_layout

\begin_layout Section
Windows CE
\end_layout

\begin_layout Subsection
Using the installer
\end_layout

\begin_layout Standard
Just execute the batch file created by the deployer under the wince directory.
 There are two 
\family typewriter
.bat
\family default
 files: one for windows mobile (suffix 
\family typewriter
WMOBILE
\family default
), and one for all others.
 We recommend that you first try the generic one, and only if the installation
 fails, try the 
\family typewriter
WMOBILE
\family default
 version.
 Note that if you created the cab file using 
\family typewriter
tc.Deploy -winmo
\family default
, only the 
\family typewriter
WMOBILE
\family default
 bat file will be installed.
\end_layout

\begin_layout Subsection
Manual installation
\end_layout

\begin_layout Standard
Copy the right 
\family typewriter
.cab
\family default
 file to your device and run it from the device's file explorer.
 If it doesn't succeed, copy the following files to 
\family typewriter

\backslash
TotalCross
\family default
 (or any other folder):
\end_layout

\begin_layout Standard

\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
vm
\backslash
wince
\backslash
POCKETPC
\backslash
ARM
\backslash
tcvm.dll
\end_layout

\begin_layout Standard

\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
vm
\backslash
TCBase.tcz
\end_layout

\begin_layout Standard

\family typewriter
TotalCrossSDK
\backslash
dist
\backslash
vm
\backslash
TCFont.tcz
\end_layout

\begin_layout Standard
If you're using Litebase, you must also copy 
\family typewriter
Litebase.dll
\family default
 and 
\family typewriter
Litebase.tcz
\family default
.
\end_layout

\begin_layout Subsection
Identifying the right installation for your device
\end_layout

\begin_layout Standard
Each 
\family typewriter
.cab
\family default
 file targets a different platform:
\end_layout

\begin_layout Labeling
\labelwidthstring POCKETPC0
HPC211 Handheld PC with Windows CE 2.11.
\end_layout

\begin_layout Labeling
\labelwidthstring POCKETPC0
HPC2000 Handheld PC 2000.
\end_layout

\begin_layout Labeling
\labelwidthstring POCKETPC0
POCKETPC PocketPC with Windows CE 3.0+.
\end_layout

\begin_layout Labeling
\labelwidthstring POCKETPC0
WMOBILE Windows Mobile.
\end_layout

\begin_layout Standard
The Pocket PC also supports the given processors: ARM, MIPS, and SH3.
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
Starting in version 1.15, on Windows Mobile, it is possible to find exactly
 where an error, that results in a critical stop, occured.
 This can help a lot to fix problems in the virtual machine.
\end_layout

\begin_layout Standard
When the program starts, the virtual machine makes two logs in the Windows
 Mobile registry, enabling the error reporting, but disabling the dialog
 that appears when such error occurs.
 This way, the crash dumps are kept in place, allowing us to recover it.
 It's throught this crash dump that we can now find the exact point where
 the error occured (in both TotalCross and Litebase VMs).
\end_layout

\begin_layout Standard
See what you have to do when a critical error happens:
\end_layout

\begin_layout Enumerate
Go to the folder 
\family typewriter

\backslash
Windows
\backslash
System
\backslash
DumpFiles
\family default
 and zip all files that you find.
 If you can't do that, the most important files are the ones that has the
 
\family typewriter
.kdmp
\family default
 extension.
\end_layout

\begin_layout Enumerate
Send this file to us, specifying which virtual machine version you're using
 and if its a demo or one that requires activation.
 
\end_layout

\begin_layout Section
Android
\end_layout

\begin_layout Subsection
Installing the device
\end_layout

\begin_layout Standard
After you purchase the device, you have to install the USB driver, which
 can be downloaded from here:
\end_layout

\begin_layout Standard
http://developer.android.com/sdk/oem-usb.html
\end_layout

\begin_layout Standard
If a device that is not recognized, search for “adb driver <device name>”
 in your preferred search engine.
\end_layout

\begin_layout Subsection
Deployment
\end_layout

\begin_layout Standard
How to deploy your application to Android:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy .....
 -android (or -all)
\end_layout

\begin_layout Standard
A directory named 
\family typewriter
install
\backslash
android
\family default
 will be created with a single 
\family typewriter
.apk
\family default
 inside.
 This 
\family typewriter
.apk
\family default
 contains your application's TCZ and the launcher.
 You can install additional files by creating an 
\family typewriter
android.pkg
\family default
 (or 
\family typewriter
all.pkg
\family default
).
 The deployer will search for a file named 
\family typewriter
icon72x72.png
\family default
 as a special icon for it (remember to use alpha channel in the PNG for
 better appearance); if it doesn't find the file, it will resize the 
\family typewriter
appicon.gif
\family default
 (already used in other platforms) to 72x72 and use it.
 The first time that TotalCross, Litebase and your application run, it will
 take longer because the 
\family typewriter
.tcz
\family default
 (and possibly other libraries) will be being decompressed and installed
 in the application's data folder.
 
\end_layout

\begin_layout Standard
IMPORTANT: In Android you can only read/write from 
\family typewriter
Settings.appPath
\family default
 (which is 
\family typewriter
/data/ data/totalcross.app.<your application name here>
\family default
 or 
\family typewriter
/data/data/
\begin_inset Newline newline
\end_inset

totalcross.app.<application id>
\family default
 if using single package).
 Trying to load from anything else will fail with permission error.
 You can't even list the files from elsewhere.
\end_layout

\begin_layout Subsection
Installing on the Device
\end_layout

\begin_layout Standard
The ADB (Android Debugging Bridge) is the tool that is used to install applicati
ons in the device, and also to get the log from it.
 This tool is released with the TotalCross SDK and is located at 
\family typewriter
TotalCrossSDK
\backslash
etc
\backslash
tools
\backslash
android
\family default
.
 If you plan to use it from the command-line, add it to the PATH environment
 variable of your computer.
\end_layout

\begin_layout Standard
Be sure that the Android device is connected to USB and that the driver
 was installed.
 To be able to find if the Android device is ok, type (from cmd):
\end_layout

\begin_layout Standard

\family typewriter
adb devices
\end_layout

\begin_layout Standard
If the device is ok, it will be listed (like this):
\end_layout

\begin_layout Standard

\family typewriter
List of devices attached
\end_layout

\begin_layout Standard

\family typewriter
HT9A3LV00045 device
\end_layout

\begin_layout Standard
The number above is the serial number of the device.
\end_layout

\begin_layout Standard
To install the file in the device, you can use:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r xxx.apk
\end_layout

\begin_layout Standard
Note: if you're running on Windows and installed 
\family typewriter
TotalCrossSDK.exe
\family default
, the 
\family typewriter
setup.bat
\family default
 file at the root has created a registry entry that adds an “Install APK”
 file to the right-button click in Windows Explorer.
 This greatly helps installing any application in the device.
 So, just open Windows Explorer, select the APK file, right-click your mouse
 button, and select “Install APK”.
 The file will then be downloaded to the device.
 Note that the registry key adds this menu option to all file types, so,
 be careful to use it only with 
\family typewriter
.apk
\family default
 files.
\end_layout

\begin_layout Standard
So, if you want to test the 
\family typewriter
UIGadgets.apk
\family default
, from the command line, use:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r UIGadgets.apk
\end_layout

\begin_layout Standard
Remember to install the TotalCross and Litebase 
\family typewriter
.apk
\family default
s as:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r 
\backslash
TotalCrossSDK
\backslash
dist
\backslash
vm
\backslash
android
\backslash
android-tcvm.apk
\end_layout

\begin_layout Standard

\family typewriter
adb install -r 
\backslash
LitebaseSDK
\backslash
dist
\backslash
lib
\backslash
android
\backslash
android-litebase.apk
\end_layout

\begin_layout Standard
You can look at other adb commands just typing:
\end_layout

\begin_layout Standard

\family typewriter
adb
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
The 
\family typewriter
Vm.debug()
\family default
 outputs to a file named 
\family typewriter
DebugConsole.txt
\family default
 at the application's folder.
 You can alternatively set the output to the ADB logger by calling 
\family typewriter
Vm.debug(Vm.ALTERNATIVE_DEBUG)
\family default
.
 Open the command prompt and type:
\end_layout

\begin_layout Standard

\family typewriter
adb logcat TotalCross:I *:S
\end_layout

\begin_layout Standard
You can use the 
\family typewriter
.bat
\family default
 file located at: 
\family typewriter
etc/tools/android/debug_console.bat
\family default
.
 It greatly helps debugging.
\end_layout

\begin_layout Standard
If, for some reason, the application crashes, do this:
\end_layout

\begin_layout Standard

\family typewriter
adb bugreport >bug.txt
\end_layout

\begin_layout Standard
Then zip this 1MB file and send to us.
\end_layout

\begin_layout Chapter
Using the Release Vms
\end_layout

\begin_layout Standard
When you decide to release the application to your client, you must purchase
 TotalCross+Litebase licenses.
 See the correct approach going to the SuperWaba 
\begin_inset CommandInset href
LatexCommand href
name "site"
target "http://www.superwaba.com.br"

\end_inset

 and clicking the buy item at the horizontal menu.
 Once we detect the payment, we will then create an activation key and enable
 it at the site.
 Login in the account and press the “Check activation keys and licenses”.
\end_layout

\begin_layout Standard
The SuperWaba site has two types of accounts: one for the user that downloads
 the SDK, and one for the user that purchases licenses.
 They can even have the same e-mail, however, the passwords are necessarily
 different.
 The account that is used to download the SDK cannot see the activation
 VMs, however, the account that is used to download the activation VMs can
 see both.
 So, if you login using the SDK user and password, you will NOT be able
 to download the VMs, neither see the “Check activation keys and licenses”
 submenu.
\end_layout

\begin_layout Standard
If you have lots of costumers, you can create new activation keys and transfer
 credits between them.
 All this can be done at the site.
 Note that an activation key cannot be deleted.
\end_layout

\begin_layout Standard
More information can be found at the SuperWaba site, under the Products
 menu.
\end_layout

\begin_layout Section
Signing your application
\end_layout

\begin_layout Standard
Once you get access to the activation key, you must sign your application
 with it, using the deploy's 
\family typewriter
/r
\family default
 option.
 Just do something like:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy … /r <activation key>
\end_layout

\begin_layout Section
Activating your application
\end_layout

\begin_layout Standard
After you login with the right account, download the TotalCross VMS package.
 This package is complimentary to the TotalCross SDK: it only contains special
 virtual machines that will authenticate to our server (hosted at Rackspace
 – Boston USA) at the first time that the application runs.
\end_layout

\begin_layout Standard
The VM uses the port 80 and connects a to webservice located at www.superwaba.net
 server.
 So, if you're behind a firewall or a proxy, remember to allow connections
 to this site.
\end_layout

\begin_layout Standard
The first time that the application runs at the device, it generates a file
 named 
\family typewriter
tcreq.pdb
\family default
 at the application's folder, containing the IMEI and the serial number.
 Then it connects to the server and, if succeed, replaces the file with
 a 
\family typewriter
tcsuc.pdb
\family default
.
\end_layout

\begin_layout Standard
If the device is hard-reseted (looses everything), a new connection to the
 server will be made once the program runs again.
 However, a new license will NOT be consumed, since the device was already
 activated once.
\end_layout

\begin_layout Standard
If you upgrade the device's firmware, the serial number may change.
 In this case, when a new activation is done, it will consume a new license,
 since the information that is used to track the device was changed.
\end_layout

\begin_layout Standard
The license is per-device.
 If the device is stolen, broken, or the costumer replaces it by another
 one, a new license is consumed.
\end_layout

\begin_layout Standard
There's a special contract that can be made with us that will allow you
 to replace a device and return the license.
 Contact us at the site if you desire to be covered by this special agreement.
\end_layout

\begin_layout Standard
Some devices may not have an IMEI nor a serial number accessible by software.
 On these devices, a hard-reset will result in the consumption of one more
 lisence if there is no backup of the activation file.
\end_layout

\begin_layout Standard
If you sign your application with two activation keys, the license will
 be discounted again.
\end_layout

\begin_layout Section
Manual Activation
\end_layout

\begin_layout Standard
If you don't have internet connection from the device, you can do a manual
 activation:
\end_layout

\begin_layout Enumerate
Try to activate the device once.
\end_layout

\begin_layout Enumerate
Copy the 
\family typewriter
tcreq.pdb
\family default
 from the application's folder on the device.
\end_layout

\begin_layout Enumerate
Run the manual activation application, located at:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- TotalCrossSDK
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- dist
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- samples
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
ManualActivation
\backslash
install
\backslash
win32
\backslash
ManualActivation.exe
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
(a linux version is available at 
\family typewriter
install
\backslash
linux folder
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If a message stating that the 
\family typewriter
tcvm.dll
\family default
 was not found, copy the 
\family typewriter
tcvm.dll
\family default
, 
\family typewriter
tcbase.tcz
\family default
 and 
\family typewriter
tcfont.tcz
\family default
 for Windows 32 to this folder and try again.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Select the 
\family typewriter
tcreq.pdb
\family default
 file from within the program.
\end_layout

\begin_layout Enumerate
Our server will be contacted and will write back a 
\family typewriter
tcsuc.pdb
\family default
 file.
\end_layout

\begin_layout Enumerate
Replace the 
\family typewriter
tcreq.pdb
\family default
 by the 
\family typewriter
tcsuc.pdb
\family default
 at the same folder in the device.
\end_layout

\begin_layout Standard
The ManualActivation also accepts a 
\family typewriter
tcreq.pdb
\family default
 from the command line.
\end_layout

\begin_layout Section
Using a third server to control licenses
\end_layout

\begin_layout Standard
Suppose that you release your signed application to the customer and he
 starts spreading the application to other people.
 We created a way to allow a company to control which costumers will use
 the activated VM.
\end_layout

\begin_layout Standard
You can instruct the VM to call a custom webservice created by yourself.
 This webservice will process the login/password to allow or deny the activation
, and then will call our webservice which will return data to the application
 running at the device.
\end_layout

\begin_layout Standard
Follow these steps:
\end_layout

\begin_layout Enumerate
Download the webservice 
\begin_inset CommandInset href
LatexCommand href
name "(http://www.totalcross.com/activation/Activation_sample.rar) sample"
target "http://www.totalcross.com/activation/Activation_sample.rar"

\end_inset

.
 
\end_layout

\begin_layout Enumerate
In the folder “Sample Webservice” there's a class named 
\family typewriter
ActivationService
\family default
, which is an Axis webservice created in Java (like the sample in this companion
), but which also uses TotalCross classes.
 
\end_layout

\begin_deeper
\begin_layout Itemize
You can host the webservice in any kind of server, such as Tomcat, .NET and
 Ruby.
\end_layout

\end_deeper
\begin_layout Enumerate
In the folder "Sample Application", there's a sample application named Activatio
nTest.
 Change the 
\family typewriter
Settings.activationServerURI
\family default
 field (at your application's static initializer!) to point to your webservice,
 and make the deploy using the 
\family typewriter
build_sdk.bat
\family default
 (demo version) or 
\family typewriter
build_vms.bat
\family default
 (release version).
 In 
\family typewriter
build_vms.bat
\family default
, change the KEY to your activation key.
 Execute the application to see the results.
 
\end_layout

\begin_layout Enumerate
You can change the file 
\family typewriter
activation.html
\family default
 as you wish, but the property 
\family typewriter
name
\family default
 of the confirmation button must be 
\family typewriter
SubmitActivation
\family default
.
\end_layout

\begin_layout Enumerate
Besides the 
\family typewriter
activation.html
\family default
, there are three optional files: 
\family typewriter
activation_success.
 html
\family default
 (which is shown if the activation succeeds), 
\family typewriter
activation_error.html
\family default
 (shown if the server rejects the activation), and 
\family typewriter
activation_nointernet.html
\family default
 (a test is made before calling the webservice to make sure that there's
 internet, if there's not, this page is shown).
 This way you can customize all messages in your own language.
\end_layout

\begin_layout Enumerate
From your webservice, you can check the data that was received and you may
 return an error message to interrupt the activation.
\begin_inset Newline newline
\end_inset

So, this is a summary of what you have to do in your application:
\end_layout

\begin_deeper
\begin_layout Itemize
Specify the address of the webservice using 
\family typewriter
Settings.activationServerURI
\family default
 (and optionally also the namespace using 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

activationServerNamespace
\family default
).
 This must be done inside the static initializer of your main class.
\end_layout

\begin_layout Itemize
Optionally, if you want to create a custom screen to show at startup, follow
 the instructions described previously.
\end_layout

\begin_layout Itemize
Note that its impossible to run any code from your application before the
 activation.
 The only possible way to show a custom screen is from the 
\family typewriter
.html
\family default
.
\end_layout

\begin_layout Itemize
Your webservice must obey the given interface:
\begin_inset Newline newline
\end_inset


\family typewriter
public static String[] activate(String request, String[] keys, String[]
 values) throws Exception
\end_layout

\begin_deeper
\begin_layout Itemize
The request parameter cannot be changed and must be passed to our webservice.
\end_layout

\begin_layout Itemize
The keys and values contains some basic information used by the activation,
 such as the device model, the serial number, the IMEI, and also any other
 parameters defined in the 
\family typewriter
.html
\family default
.
\end_layout

\begin_layout Standard
After you apply your own logic to confirm if this is a valid user (like
 checking the login and password), you must connect to our webservice, sending
 the request string as parameter.
\end_layout

\begin_layout Standard
The return of this method must be:
\end_layout

\begin_layout Itemize
If error: an array with a single element with the error message that will
 be displayed to the user (like new 
\family typewriter
String[]{“Invalid password
\begin_inset Quotes erd
\end_inset

}
\family default
).
\end_layout

\begin_layout Itemize
If success: a two dimensional array, where the first element is a message
 that will be displayed to the user, and the second element is the answer
 received from our server.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Attention: the activation server that this webservice uses is our production
 server, so, one credit will be consumed each time that the activation succeeds
 in a computer that was never activated.
 In other words, be aware that your tests will consume a license.
\end_layout

\begin_layout Chapter
SuperWaba to TotalCross conversion
\end_layout

\begin_layout Standard
In order to make the conversion easier, we created a program, 
\family typewriter
tc.tools.SW2TC
\family default
 (included in 
\family typewriter
tc.jar
\family default
), which recursively reads a set of folders and change the names of the
 old SuperWaba packages, classes and methods to the new ones.
\end_layout

\begin_layout Standard
This program does not create a backup, it simply overwrites the original
 files, so you should backup your files before running the program.
\end_layout

\begin_layout Standard
This converter takes care of about 99% of the problems, remaining only 1%
 for you to manually update.
 Also, the program is just a token replacer, therefore, it cannot find that
 in "xxx.yyy", xxx is a ListBox nor a hotdog, so it cannot replace tokens
 based on the type.
 Always refer to this table ( 
\begin_inset CommandInset href
LatexCommand href
target "http://www.superwaba.com.br/pt/sw2tc.asp"

\end_inset

), where we summarize the package, class, and method changes.
\end_layout

\begin_layout Section
General Tips
\end_layout

\begin_layout Standard
Some important tips to finish the conversion after running the SW2TC:
\end_layout

\begin_layout Itemize
SW2TC cannot change some method names, refer to the javadocs for the new
 name of these methods.
\end_layout

\begin_layout Itemize
The return type of some methods were changed, most of them used to return
 a 
\family typewriter
boolean
\family default
 or 
\family typewriter
int
\family default
 value to indicate success or failure and now return 
\family typewriter
void
\family default
.
 Errors handling is done with exceptions.
\end_layout

\begin_layout Itemize
Many methods now throw checked exceptions, which must be handled accordingly.
 In SuperWaba, there were almost no validation on the arguments passed to
 the methods; in TotalCross, nearly all methods perform argument validation,
 throwing the appropriate exception for each case (in the future, this will
 be extended to all arguments and methods).
 To easily display the exception to the user, you can use the static method
 
\family typewriter
MessageBox.showException
\family default
.
 Read the tip described in the next section.
\end_layout

\begin_layout Standard
ALWAYS handle the exceptions thrown.
 Ignoring exceptions or simply logging the error without handling the exception
 is just wrong.
 Also remember that unchecked exceptions are usually caused by bad programming
 and are not supposed to be caught, unless you're using an unchecked exception
 instead of testing a condition.
\end_layout

\begin_layout Standard
E.g., instead of:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int sum = 0;
\end_layout

\begin_layout Plain Layout

for (int i = 0 ; i < values.length ; i++)
\end_layout

\begin_layout Plain Layout

	sum += values[i];
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may use:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int sum = 0;
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	for (int = 0 ; ; i++)
\end_layout

\begin_layout Plain Layout

		sum+= values[i];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (ArrayIndexOutOfBoundsException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// do nothing, it only means we finished reading the array.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice we are not discussing the performance of each approach, just
 showing an example.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Some packages and classes were removed or changed, like the 
\family typewriter
datergf
\family default
 package and the 
\family typewriter
IntVector(DataStream)
\family default
 constructor.
 Most of them can be easily replaced by other classes or methods on TotalCross.
 But if needed, you may grab their code from SuperWaba, convert to TotalCross
 and add to your project.
 
\end_layout

\begin_layout Itemize

\family typewriter
Color
\family default
 is now an 
\family typewriter
int
\family default
, in the format 0xRRGGBB.
 Change all 
\family typewriter
Color
\family default
 to 
\family typewriter
int
\family default
.
 Instead of comparing or initializing the color to null, use -1.
\end_layout

\begin_layout Standard
Instead of:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

Color c1 = ...;
\end_layout

\begin_layout Plain Layout

Color c2 = c1.brighter();
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int c1 = ...;
\end_layout

\begin_layout Plain Layout

int c2 = Color.brighter(c1);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The method 
\family typewriter
isOpen()
\family default
 was removed from all streams.
 Their constructors now throw an 
\family typewriter
IOException
\family default
 (or a subclass of it, like 
\family typewriter
FileNotFoundException
\family default
) if the operation fails.
\end_layout

\begin_layout Itemize
In SuperWaba some classes had a 
\family typewriter
lastError
\family default
 field that had a platform dependent error code; in TotalCross this field
 no longer exists, the exception message contains a platform dependent error
 message identifying the error.
 This error message is provided by the underlying OS and may not be as helpful
 as expected, but it's still better than an error value.
 If the OS is unable to find a given error code on its error table, the
 exception message will have only the error code.
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
onStart()
\family default
 and 
\family typewriter
onAdd()
\family default
 were respectively renamed to 
\family typewriter
initUI()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

onAddAgain()
\family default
.
 The SW2TC should perform these changes, but if the screen appears blank
 for some reason, check if the method 
\family typewriter
onStart()
\family default
 was not renamed.
\end_layout

\begin_layout Itemize
The 
\family typewriter
WINDOW_MOVED
\family default
 event was removed.
 It was usually used to update the 
\family typewriter
myg
\family default
 (my Graphics) object.
 Now the correct approach is to do a 
\family typewriter
getGraphics()
\family default
 in all places 
\family typewriter
myg
\family default
 was used.
 
\end_layout

\begin_layout Itemize

\family typewriter
Settings.onDevice
\family default
 is now called 
\family typewriter
onJavaSE
\family default
 (Standard Edition), but notice it has the opposite meaning! Be sure to
 search for this field and make sure it is being used correctly.
 For instance:
\begin_inset Newline newline
\end_inset


\family typewriter
if (Settings.onDevice)
\family default
 replaced 
\family typewriter
for if(!Settings.onJavaSE)
\end_layout

\begin_layout Itemize
All classes that extend 
\family typewriter
Container
\family default
 must explicitly set 
\family typewriter
focusTraversable = true
\family default
 in the constructor, otherwise the class will not be able to receive focus
 using the keyboard in penless devices.
 This flag defaults to true in SuperWaba, but to false in TotalCross.
 
\end_layout

\begin_layout Section
Correct way to handle Exceptions
\end_layout

\begin_layout Standard
We decided to write this to explain to programmers how to deal with exceptions.
 It does not apply only to TotalCross, but also to all other languages that
 make use of exceptions.
 One of the main differences between SuperWaba and TotalCross is the dispatch
 of exceptions by the API.
 Careless programmers tend to code this way:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f = new File(...);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e){}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In other words, just ignore the exception that is being thrown.
 A programmer that codes this way should be fired for carelessness.
 A variation of this approach is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Vm.debug("An exception was thrown");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here the programmer informs itself that the exception was thrown but completely
 ignores crucial information that can help to resolve the problem.
 And he will see the exception only if he opens the 
\family typewriter
DebugConsole.txt
\family default
.
\end_layout

\begin_layout Standard
The second error is to handle exceptions in the same method it was thrown,
 like in this sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Report
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void createReport()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		createFile();
\end_layout

\begin_layout Plain Layout

		runReport();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	void createFile()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		f = new File("report.txt", File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		e.printStackTrace();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What's the problem here? Simple: the 
\family typewriter
createReport()
\family default
 method is unable to confirm that the file was created or failed.
 
\end_layout

\begin_layout Standard
So, what's the correct way? The correct implementation is always throw the
 exception to the caller, and this to its caller, and so on, until you reach
 a root method that cannot pass the exception along, like the 
\family typewriter
initUI()
\family default
 and 
\family typewriter
onEvent()
\family default
 methods (since these methods are overriden and you cannot change the method's
 signature).
\end_layout

\begin_layout Standard
Therefore, the correct implementation is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Report
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void createReport() throws IOException
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		createFile();
\end_layout

\begin_layout Plain Layout

		runReport();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	void createFile() throws IOException
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		f = new File("report.txt", File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Implementing this way, in the root method, we would do:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	createReport();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e,true);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this approach is not yet perfect, because the 
\family typewriter
createFile()
\family default
 method is throwing 
\family typewriter
Exception
\family default
, while 
\family typewriter
new File()
\family default
 throws three exceptions: 
\family typewriter
IllegalArgumentIOException
\family default
, 
\family typewriter
FileNotFoundException
\family default
 and 
\family typewriter
IOException
\family default
.
 Hence, the correct is that each exception be declared on its own in the
 throws clause of the method, and that your program handle them in the correct
 way.
 For example, 
\family typewriter
IllegalArgumentIOException
\family default
 occurs most times by a coding error and should never occur in production
 code.
 However, there may exist some exceptions that are less serious than others
 and can be ignored or handled locally, letting others to be passed along
 to the caller.
 Under situations that the handling is the same for all exceptions, there
 is no problem in catching them in a single 
\family typewriter
catch (Exception e)
\family default
 block.
 
\end_layout

\begin_layout Standard
Finally, what's the correct way to handle the exception? The most common
 is call
\begin_inset Newline newline
\end_inset


\family typewriter
printStackTrace()
\family default
.
 This is a classic and BAD coding, because the stack trace is logged in
 the debug console (the same output of 
\family typewriter
Vm.debug()
\family default
), and thus the programmer will NOT know that the exception was thrown unless
 he exits the program and looks at the output file (note that in Eclipse
 or any other IDE the 
\family typewriter
printStackTrace()
\family default
 shows up in the console panel, not in the file).
 The ideal is that the exceptions are informed in real time, even if this
 can cause some bad impressions in your costumer.
 
\end_layout

\begin_layout Standard
TotalCross has a method in the 
\family typewriter
MessageBox
\family default
 class that shows the exception in a dialog.
 Its format is shown in the previous example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	totalcross.ui.dialog.MessageBox.showException(e,true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first parameter is the exception itself, and the second parameter indicates
 if
\begin_inset Newline newline
\end_inset


\family typewriter
printStackTrace()
\family default
 should be called.
 This method shows the stack trace on screen, along with the exception's
 class name and a description message, if any.
 You can change the title through the 
\family typewriter
MessageBox.showExceptionTitle
\family default
 member.
\end_layout

\begin_layout Standard
The use of exceptions is one of the most powerful features of Java, and
 can greatly simplify finding errors, if it is used correctly.
\end_layout

\begin_layout Standard
TotalCross has checked and unchecked exceptions.
 The checked exceptions are 
\family typewriter
Exception
\family default
 subclasses and if they might happen in a code block, it must be surrounded
 by a try-catch.
 The unchecked exceptions are 
\family typewriter
RuntimeException
\family default
 subclasses and do not need to be treated.
 The first kind of exceptions are usually errors that occur in a program,
 whereas the second one are usually a programming bug.
\end_layout

\begin_layout Standard
Below there are all TotalCross possible exceptions (except for Litebase
 exceptions) and their description:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Throwable Base class of all Exceptions.
 
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Error General Error class.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
NoClassDefFoundError Thrown when a class was not found during the parse
 of 
\family typewriter
xxx.class
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
NoSuchFieldError Thrown when a field was not found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
NoSuchMethodError Thrown when a method was not found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
OutOfMemoryError Thrown when no more memory exists to continue the execution
 of the last requested operation.
 You should exit the program immediately.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
Exception General exception class.
 
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
AddressException Thrown by the 
\family typewriter
Address
\family default
 constructor if the given string address is invalid.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AuthenticationException When an authentication fails.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
CryptoException Thrown when something wrong occurs at the cryptographic
 algorithms.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
NoSuchAlgorithmException This exception is thrown when a particular cryptographi
c algorithm is requested but is not available in the environment.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
ElementNotFoundException Thrown when an element of a 
\family typewriter
Vector
\family default
 or a 
\family typewriter
Hashtable
\family default
 is not found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
FTPConnectionClosedException This exception is thrown when a FTP connection
 is closed, maybe explicitly or by timeout.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ImageException This class is used to throw an exception when an image could
 not be loaded for any reason.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InstantiationException Thrown when an abstract class or an interface is
 trying to be 
\family typewriter
Class.newInstance()
\family default
'd.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IntHashtable.DuplicatedKeyException Exception thrown when 
\family typewriter
allowDuplicateKeys
\family default
 is set to 
\family typewriter
false
\family default
 in an 
\family typewriter
IntHashtable
\family default
 and one tries to add a repeated key.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InvalidDateException Represents a date that is invalid.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InvalidNumberException Thrown when you try to convert a string that does
 not represents a valid number.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IOException Base class of all input/output exceptions.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
EOFException Signals that an end of file or end of stream has been reached
 unexpectedly during input.
 This exception is mainly used by data input streams to signal end of stream.
 Note that many other input operations return a special value on end of
 stream rather than throwing an exception.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
FileNotFoundException Thrown when a file was not found.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IllegalArgumentIOException Illegal argument passed to an IO method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SocketTimeoutException Thrown when a socket times out in a connect, read,
 or write operation.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
UnknownHostException Thrown when you try to connect to a host that was not
 found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZipException Signals that a Zip exception of some sort has occurred.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
MessagingException Thrown when a write operation fails when sending a 
\family typewriter
Message
\family default
, or when an unexpected code is received from the remote host.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SOAPException Thrown when a problem when using 
\family typewriter
SOAP
\family default
 occurs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SyntaxException Exception thrown by the 
\family typewriter
XmlTokenizer
\family default
 when a syntax error is found.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
XmlRpcException Used to alert the user of xml-rpc errors.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZLibException This exception may be dispatched by zlib routines.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
RuntimeException General runtime exception class.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
AppExitException This exception is thrown when 
\family typewriter
Event.handleOneEvent()
\family default
 encounters an event that requires the application to exit.
 The main purpose of this event is to unwind the stack all the way back
 to the main event loop so that the application can properly exit.
 It is mostly used to exit the VM when a 
\family typewriter
Window
\family default
 is open with the 
\family typewriter
popup()
\family default
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ArithmeticException Thrown when an arithmetic problem occurs, usually a
 division by zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ArrayStoreException Thrown when the source and target arrays are not compatible
 when using
\begin_inset Newline newline
\end_inset

 
\family typewriter
Vm.arrayCopy()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AssertionFailedError Exception dispatched when an assertion fails.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ClassCastException Thrown when a class is casted to an incompatible class.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ClassNotFoundException Thrown when a class is not found.
 Were all required tcz/pdb files installed?
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GameEngineException An exception related to a game funcionality in the game
 engine.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IllegalAccessException Thrown when you try to load a private class using
 
\family typewriter
Class.newInstance()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IllegalArgumentException Thrown when an illegal argument was passed to a
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IllegalStateException Signals that a method has been invoked at an illegal
 or inappropriate time.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IndexOutOfBoundsException Thrown when an index is used outside of the defined
 bounds.
 
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
ArrayIndexOutOfBoundsException Thrown when you try to access an array index
 that is < 0 or >= 
\family typewriter
array.length
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
StringIndexOutOfBoundsException Thrown when you try to create a 
\family typewriter
String
\family default
 using the constructor that receives a byte array, an offset and the length.
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
IntHashtable.DuplicatedKeyException Exception thrown when 
\family typewriter
IntHashtable.allowDuplicateKeys
\family default
 is set to 
\family typewriter
false
\family default
 and one tries to insert a duplicated key in the 
\family typewriter
IntHashtable
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
NullPointerException Thrown when a 
\family typewriter
null
\family default
 object has being used in the last operation.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Chapter
Exit Codes
\end_layout

\begin_layout Standard
When the VM exits, it returns an exit code.
 Obviously, this chapter only concerns TotalCross applications running on
 Windows 32, Windows CE/Mobile, Palm OS, iOS, and Android since on Java
 SE and BlackBerry the TotalCross VM is not used.
 
\end_layout

\begin_layout Standard
The codes and their description are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
100 If it was not possible to initialize the application current context.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
101 If it was not possible to load 
\family typewriter
TCBase.tcz
\family default
.
 
\family typewriter
TCBase.tcz
\family default
 was not found or is corrupted.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
102 If it was not possible to initialize the event handler.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
104 If it was not possible to load the application 
\family typewriter
.tcz
\family default
.
 One of the most common errors.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
105 If the 
\family typewriter
Settings
\family default
 class could not be loaded.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
106 If it is not possible to run multiple instances of the application and
 the application is already running.
 This only happens on Windows 32 and Windows CE.
 One of the most common errors.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
107 It it was not possible to initialize the graphics before the 
\family typewriter
MainWindow
\family default
 settings is loaded.
 One of the most common errors.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
108 If it was not possible to retrive the settings.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
109 If it was not possible to initialize the graphics after the 
\family typewriter
MainWindow
\family default
 settings is loaded.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
111 If the class 
\family typewriter
ras.ActivationClient
\family default
 can' t be loaded or an exception occurs when loading it during the activation
 check.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.tcz
\family default
 file.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
112 If the method 
\family typewriter
getInstance()
\family default
 can't be loaded from the class 
\family typewriter
ras.ActivationClient
\family default
 during the activation check.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.tcz
\family default
 file.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
113 If the method 
\family typewriter
getInstance()
\family default
 during the activation check throws an exception.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
114 If the method 
\family typewriter
isActivatedSilent()
\family default
 can't be loaded from the class 
\family typewriter
ras.
\begin_inset Newline newline
\end_inset

ActivationClient
\family default
 during the activation process.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.tcz
\family default
 file.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
115 If an error occurs when loading the TotalCross libraries.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
116 If the main class could not be loaded (has thrown an exception, was
 not found or is corrupted).
\end_layout

\begin_layout Part
USER INTERFACE
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
The following chapters will introduce you to the main aspects of user interface
 in TotalCross, including graphical interface controls and events support.
\end_layout

\begin_layout Chapter
User Interface styles
\end_layout

\begin_layout Section
List of types
\end_layout

\begin_layout Standard
TotalCross has five look-and-feel types of user interfaces:
\end_layout

\begin_layout Itemize

\family typewriter
WinCE
\family default
 – Defines a Windows CE user interface style.
 This is the default look-and-feel.
 People that use Microsoft Windows may feel better with it.
 
\end_layout

\begin_layout Itemize

\family typewriter
PalmOS
\family default
 – Defines a Palm OS user interface style.
 The controls are flat with round borders.
 Unlike the other styles, the default background color is white instead
 of blue.
\end_layout

\begin_layout Itemize

\family typewriter
Flat
\family default
 – Defines a FLAT user interface style that looks like the Pocket PC look-and-fe
el.
 It's basically the 
\family typewriter
WinCE
\family default
 style with flat controls.
\end_layout

\begin_layout Itemize

\family typewriter
Vista
\family default
 – Defines a Windows Vista user interface style.
 It's like the Flat style with a shaded background.
 It looks better on 16bpp+.
\end_layout

\begin_layout Itemize

\family typewriter
Android
\family default
 – Defines an Android user interface style.
 Its like the Vista but with round borders.
 Its almost identical to the controls used by the Android platform.
\end_layout

\begin_layout Standard
The style can be switched to by using 
\family typewriter
MainWindow.setUIStyle(int type)
\family default
, and it is platform-idenpendent (can be used in any device of any platform).
 Here is an example of use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Foo extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Foo()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Hi bar", TAB_ONLY_BORDER);
\end_layout

\begin_layout Plain Layout

		totalcross.ui.MainWindow.setUIStyle(totalcross.sys.Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The decision of which user interface to use must be made in the main window's
 constructor.
 If nothing is changed, Windows CE with a blue background is used.
 Changing the user interface outside the main window's constructor can crash
 your application.
 If you try to change it more than once, a 
\family typewriter
RuntimeException
\family default
 will be thrown.
 The other possible values to 
\family typewriter
type
\family default
 are: 
\family typewriter
Settings.PalmOS
\family default
, 
\family typewriter
Settings.WinCE
\family default
, 
\family typewriter
Settings.Flat
\family default
, and 
\family typewriter
Settings.Vista
\family default
.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
In the pictures below you can see snapshots of the UIGadgets sample running
 on JDK using different resolutions and user interface styles.
 After each picture you'll find the command line options provided to the
 launcher on each case:
\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_Android.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_iPhone.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align left

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

android
\begin_inset space ~
\end_inset

/uiStyle
\begin_inset space ~
\end_inset

android
\family default
:
\end_layout

\begin_layout Plain Layout
\align left

\size small
Android (320x480x16)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

iPhone
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
iPhone
\begin_inset space ~
\end_inset

(320x480x24)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_WinCE.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_Win32.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

WinCE
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
Windows
\begin_inset space ~
\end_inset

CE
\begin_inset space ~
\end_inset

(240x320x16)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

Win32
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
Windows
\begin_inset space ~
\end_inset

32
\begin_inset space ~
\end_inset

(240x320x24)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_PalmTall.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

PalmTall
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
Palm
\begin_inset space ~
\end_inset

OS
\begin_inset space ~
\end_inset

tall
\begin_inset space ~
\end_inset

(320x480x16)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_PalmWide.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

PalmWide
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
Palm
\begin_inset space ~
\end_inset

OS
\begin_inset space ~
\end_inset

wide
\begin_inset space ~
\end_inset

(480x320x16)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_bbLo.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

bbLo
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
BlackBerry
\begin_inset space ~
\end_inset

low
\begin_inset space ~
\end_inset

(320x240x16)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_bbBold.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

bbBold
\family default
:
\begin_inset space ~
\end_inset

BlackBerry
\begin_inset space ~
\end_inset

Bold
\begin_inset space ~
\end_inset

(480x360x16)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_bbStorm.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

bbStorm
\family default
:
\begin_inset space ~
\end_inset

BlackBerry
\begin_inset space ~
\end_inset

Storm
\begin_inset space ~
\end_inset

(480x320x16)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\size default

\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStyleWinCE.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStylePalmOS.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle WinCE
\family default
: Windows CE
\begin_inset Newline newline
\end_inset

(default style on JDK)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle PalmOS
\family default
: Palm OS user interface style
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStyleFlat.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStyleVista.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle Flat
\family default
: Flat user interface style
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle Vista
\family default
: Vista user interface style
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_bbStorm.png
	scale 60

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/penlessDevice
\family default
: Acts as a device without touch screen.
 (notice the highlighted control)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Support for devices without pen
\end_layout

\begin_layout Standard
The iPhone and Android platforms introduced the use of finger instead of
 pen (however, some new Android works better with pens than with finger).
 A finger is much less precise than a pen, thus an algorithm is used to
 locate the closest control.
 These platforms also introduced the concept of drag and flick: drag means
 that you placed your finger in the screen and moved it while pressed, and
 flick means that you suddenly lifted the finger, to continue the scroll
 even while your finger is up.
 The scroll then slows down until a complete stop or if you press the finger
 again.
\end_layout

\begin_layout Standard
TotalCross 1.3 added support for this, activated when you set the user interface
 style to Android or when making 
\family typewriter
Settings.fingerTouch = true
\family default
.
 
\end_layout

\begin_layout Standard
The following controls supports flicking: button menu, grid, list box, list
 container, multi edit, scroll container (and its subtypes), tabbed container,
 and tree.
\end_layout

\begin_layout Standard
When 
\family typewriter
fingerTouch
\family default
 is true, controls that can be flicked replace the scroll bar by a scroll
 position control, which only appears while the control is being scrolled
 or flicked.
\end_layout

\begin_layout Chapter
Font Support
\end_layout

\begin_layout Standard
To keep the user interface consistent across different platforms, TotalCross
 applications uses its own font types instead of using the device's font
 type.
 The basic font type chosen for TotalCross is the Tahoma font, included
 on the SDK as the 
\family typewriter
TCFont.tcz file
\family default
.
 It contains fonts ranging from size 7 to 44, regular and bold.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unicode fonts are not included in the default font file!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The base size of the application's font is defined as 
\family typewriter
Font.NORMAL_SIZE
\family default
, which is a constant initialized at runtime based on the screen resolution.
 This way you may select another size by using a relative value, like 
\family typewriter
Font.NORMAL_SIZE+2
\family default
 (which is equal to 
\family typewriter
Font.BIG_SIZE
\family default
), and the font will be correctly scaled among different resolutions.
 The constants 
\family typewriter
Font.MIN_FONT_SIZE
\family default
 and 
\family typewriter
Font.MAX_FONT_SIZE
\family default
 have the minimum and maximum font size, respectively.
 Their default values are 6 and 22, respectively.
\end_layout

\begin_layout Standard
Finally, 
\family typewriter
Font.TABSIZE
\family default
 is the number of spaces that will drawn when a tab character is found by
 the VM.
 You can define the number of spaces that will be drawn setting this field.
 It defaults to 3, but you can change it at any time.
 
\end_layout

\begin_layout Standard
To create your own font files you may use the 
\family typewriter
FontGenerator
\family default
 (included in the 
\family typewriter
tc.jar
\family default
).
 It creates a compressed file with your own set of bitmap fonts, and supports
 anti-aliased fonts, which makes the font appear rounded and improves legibility.
 The created font must be based on the TrueType fonts.
\end_layout

\begin_layout Standard
Some usage examples (here we assume the 
\family typewriter
tc.jar
\family default
 is in the classpath):
\end_layout

\begin_layout Itemize
Anti-aliased Arial font:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /aa
\end_layout

\end_deeper
\begin_layout Itemize
Anti-aliased Arial font, but including only the sizes 12 and 14.
 Reducing the final font file from 158kb to 16kb:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /sizes:12,14 /aa /rename:TCFont
\end_layout

\end_deeper
\begin_layout Itemize
Anti-aliased Arial font with Unicode characters up to 1279, but including
 only sizes 20, 24 and 28, and excluding bold fonts:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /aa /sizes:20,24,28 /nobold
\begin_inset Newline newline
\end_inset

/rename:TCFont /u 32-255 256-383 402-402 1024-1279
\end_layout

\end_deeper
\begin_layout Standard
To see if the font you created is installed on the target device, query
 its name after the creation.
 If the font is not found, its name is changed to match the default font.
 When the parameter 
\family typewriter
/rename:
\family default
 is used with 
\family typewriter
TCFont
\family default
, the default font is changed to the new created font.
\end_layout

\begin_layout Standard
Starting in version 1.3, we changed the font engine to generate better fonts.
 To keep compatibility with old programs, we have two font sets: TCFont
 and TCFontOld.
 By default, it will use the old font set.
 To use the new font set, you must add to your program: 
\end_layout

\begin_layout Standard

\family typewriter
static {Settings.useNewFont = true;}
\end_layout

\begin_layout Standard
If you don't set this, a warning will be issued in the output window when
 running the application on the desktop.
 Migrate to the new font as soon as possible.
 The default font name used is stored in 
\family typewriter
Font.DEFAULT
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The TotalCross installation packages contains both fonts, thus, increasing
 the size by 500k.
 If you create a single package with the 
\family typewriter
/p
\family default
 parameter of the deployer, it will detect the font type and will add only
 the one you plan to use.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The class font has just a public default constructor, and the following
 public fields and methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
name Read-only field that contains the font's name.
 Note that changing this directly will have no effect.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
style Read-only field that contains the font's style.
 Note that changing this directly will have no effect.
 For bold fonts, 
\family typewriter
style == 1
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size Read-only field that contains the font's size.
 Note that changing this directly will have no effect.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDefaultFontSize() Returns the default font size, based on the screen's
 size.
 If not on Android and 
\family typewriter
Settings.
 fingerTouch
\family default
 is 
\family typewriter
true
\family default
, the default font size will be increased by 15%.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFont(boolean
\begin_inset space ~
\end_inset

boldStyle,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size) Gets the instance of the default font, with the given bold style and
 size.
 If 
\family typewriter
boldStyle == true
\family default
, a bold font is used; otherwise, a plain font is used.
 If you want a text bigger than the standard size, use 
\family typewriter
Font.NORMAL_SIZE+x
\family default
; or if you want a text smaller than the standard size, use 
\family typewriter
Font.NORMAL_SIZE-x
\family default
 in the parameter 
\family typewriter
size
\family default
.
 The size is adjusted to be in the range 
\family typewriter
Font.MIN_FONT_SIZE
\family default
 ...
 
\family typewriter
Font.MAX_FONT_SIZE
\family default
.
 That is, passing a value out of the bounds won't throw an exception, will
 only use the minimum default size if the size passed is less than it or
 use the maximum default size if the size passed is greater than it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFont(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

boldStyle,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size) Gets the instance of a font of the given name, style and size.
 BlackBerry supports the use of native system fonts, which are formed by
 the font family name preceded by a 
\family typewriter
$
\family default
 (e.g.: 
\family typewriter
$BBCasual
\family default
).
 You can also specify only 
\family typewriter
$
\family default
 for the font name, which means the default system font.
 
\family typewriter
Font.DEFAULT
\family default
 will be used in place of native fonts for all platforms that do not support
 them.
 This method can be used to check if the created font is in fact installed
 on the device.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
asBold() Returns this font as bold.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
adjustedBy(int
\begin_inset space ~
\end_inset

delta) Returns a font with the size changed with that delta.
 The new size is 
\family typewriter
this.size+delta
\family default
.
 
\family typewriter
delta
\family default
 can be positive or negative.
 The new size won't pass the minimum or the maximum sizes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
adjustedBy(int
\begin_inset space ~
\end_inset

delta,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

bold) Returns a font with the size changed with that delta and the given
 bold style.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isBold() Returns if this font is bold.
 
\end_layout

\begin_layout Standard
Another very useful class is 
\family typewriter
FontMetrics
\family default
.
 
\family typewriter
FontMetrics
\family default
 is used to obtain information about the widths and heights of characters
 and strings when drawing text on a surface.
\end_layout

\begin_layout Standard
Here is an example that uses 
\family typewriter
FontMetrics
\family default
 to get the width of a string: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Font font = Font.getFont("Tiny", true, Font.BIG_SIZE);
\end_layout

\begin_layout Plain Layout

FontMetrics fm = font.fm;
\end_layout

\begin_layout Plain Layout

String s = "This is a line of text.";
\end_layout

\begin_layout Plain Layout

int stringWidth = fm.getTextWidth(s); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class does not have a public constructor and has the following public
 fields and methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ascent Read-only field that indicates the average height of this font from
 the baseline to up.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
descent Read-only field that indicates the average height of this font from
 the baseline to down.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
height Read-only field that has the total height of this font (
\family typewriter
ascent+descent
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
charWidth(char
\begin_inset space ~
\end_inset

c) Returns the width in pixels of the given character.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stringWidth(String
\begin_inset space ~
\end_inset

s) Returns the width in pixels of the given text string.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stringWidth(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Returns the width in pixels of the given char array range.
 
\family typewriter
start
\family default
 is the first position to be used and 
\family typewriter
count
\family default
 is the number of character from 
\family typewriter
start
\family default
 to be used to compute the width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMaxWidth(String[]
\begin_inset space ~
\end_inset

names,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Returns the maximum text width from the given list of names.
 It is useful to compute the best x position to place the controls, in order
 to align them in a container.
 
\family typewriter
start
\family default
 is the index of the first element of the array to be used and 
\family typewriter
count
\family default
 is the number of elements from 
\family typewriter
start
\family default
 to compute the maximum width.
\begin_inset Newline newline
\end_inset

For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] labels = {"Name","Age","Address"};
\end_layout

\begin_layout Plain Layout

int xx = fm.getMaxWidth(labels, 0, labels.length);
\end_layout

\begin_layout Plain Layout

add(new Label(labels[0]), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

add(edName = new Edit(""),xx, SAME); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
sbWidth(StringBuffer
\begin_inset space ~
\end_inset

s) Returns the width in pixels of the given 
\family typewriter
StringBuffer
\family default
.
 This method is used to preserve memory, since it avoids the creation of
 a 
\family typewriter
String
\family default
 object just to get the width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sbWidth(StringBuffer
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Similar to 
\family typewriter
stringWidth(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
, but without creating a 
\family typewriter
String
\family default
 or a 
\family typewriter
char[]
\family default
 object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
charWidth(StringBuffer
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

i) Returns the width in pixels of the character located at the given index
 in the 
\family typewriter
StringBuffer
\family default
.
 
\end_layout

\begin_layout Chapter
The MainWindow class
\end_layout

\begin_layout Standard
Every TotalCross program must have one and only one class that extends 
\family typewriter
totalcross.ui.
 MainWindow
\family default
.
 It is the interface between the VM and the TotalCross program: it receives
 all events and dispatches them.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Foo extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Foo()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Hi handheld world", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		gradientTitleStartColor = Color.getRGB(88, 130, 239);
\end_layout

\begin_layout Plain Layout

		gradientTitleEndColor = Color.getRGB(10, 36, 106);
\end_layout

\begin_layout Plain Layout

		titleColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// add controls here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onExit()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// close stuff here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The VM first calls the 
\family typewriter
MainWindow
\family default
 default constructor (in this case, 
\family typewriter
Foo()
\family default
) and after that it enqueues a timer event, which will then call the 
\family typewriter
initUI()
\family default
 method (inherited from the class 
\family typewriter
Container
\family default
).
 You 
\emph on
must
\emph default
 initialize all the user interface in the 
\family typewriter
initUI()
\family default
 method.
 Initializing the user interface on the constructor might crash the application,
 and some operations can only be performed after the 
\family typewriter
MainWindow
\family default
's 
\family typewriter
initUI()
\family default
 method is reached.
\end_layout

\begin_layout Standard
The 
\family typewriter
onExit()
\family default
 method is called when the VM exits under normal circumstances , i.e., if
 the user closes the application or the programmer ends the application
 by using 
\family typewriter
exit()
\family default
 or 
\family typewriter
exec()
\family default
, or even when the application is halted by an unhandled exception.
 However, under abnormal circumstances where a fatal error occurs, reseting
 the pda, the 
\family typewriter
onExit()
\family default
 method is not called.
 When this is called, all threads are already killed.
 
\end_layout

\begin_layout Standard
To change the font used by all controls created, you must call the method
 
\family typewriter
setDefaultFont()
\family default
 on the 
\emph on
first line
\emph default
 of the 
\family typewriter
MainWindow
\family default
's constructor.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If you're going to set the 
\family typewriter
MainWindow
\family default
's title and/or style, you should use 
\family typewriter
super(title, style)
\family default
 instead of the methods 
\family typewriter
setTitle()
\family default
 and 
\family typewriter
setBorderStyle()
\family default
 to improve performance.
 However, you can't use 
\family typewriter
super()
\family default
 and 
\family typewriter
setDefaultFont()
\family default
 together because both must be the on first line of the constructor.
 That means you'll have to use 
\family typewriter
setTitle()
\family default
 and 
\family typewriter
setBorderStyle()
\family default
 instead of 
\family typewriter
super(title, style)
\family default
 to be able to use 
\family typewriter
setDefaultFont()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The style can be: 
\family typewriter
Window.NO_BORDER
\family default
, 
\family typewriter
Window.RECT_BORDER
\family default
, 
\family typewriter
Window.ROUND_BORDER
\family default
, 
\family typewriter
Window.TAB_BORDER
\family default
, or 
\family typewriter
Window.TAB_ONLY_BORDER
\family default
.
\end_layout

\begin_layout Section
Useful mehtods
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDefaultFont() Returns the default font.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
exit(int
\begin_inset space ~
\end_inset

exitCode)
\family default
 Exits the program, calling 
\family typewriter
onExit()
\family default
 before.
 It will exit after executing any pending events.
 If the underlying system supports it, the 
\family typewriter
exitCode
\family default
 passed is returned to the program that started the application.
 Note: on Palm OS and on AppletViewer/Browser the 
\family typewriter
exitCode
\family default
 is useless.
 On Android, you can exit softly by using 
\family typewriter
SOFT
\family default
_
\family typewriter
EXIT
\family default
 as the exit code.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
addTimer(Control
\begin_inset space ~
\end_inset

target,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

millis)
\family default
 Adds a timer.
 The 
\family typewriter
Timer
\family default
 event will be issued to the 
\family typewriter
target
\family default
 every 
\family typewriter
millis
\family default
 milliseconds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
removeTimer(Timer
\begin_inset space ~
\end_inset

timer)
\family default
 Removes the given 
\family typewriter
timer
\family default
 from the timers queue.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
getCommandLine()
\family default
 If this process was executed by another process (e.g.: using the 
\family typewriter
Vm.exec()
\family default
 method), this method gets the command line passed.
\begin_inset Newline newline
\end_inset

On Android, you can start an application using adb: 
\begin_inset Newline newline
\end_inset


\family typewriter
adb shell am start -a android.intent.action.MAIN -n totalcross.app.
\begin_inset Newline newline
\end_inset

uigadgets/.UIGadgets -e cmdline "Hello world"
\family default

\begin_inset Newline newline
\end_inset

In the sample above, we're starting UIGadgets.
 Your application should be: 
\family typewriter
totalcross.app.
\begin_inset Newline newline
\end_inset

yourMainWindowClass/.yourMainWindowClass
\family default
.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
When you click on the application's icon, there’s no command line.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
getMainWindow()
\family default
 Returns the instance of the current main window.
 You can use it to get access to methods of the 
\family typewriter
MainWindow
\family default
 class from outside the class.
 Is it also possible to cast the returned class to the class that is extending
 
\family typewriter
MainWindow
\family default
 (this is a normal Java behavior).
 So, if UiGadgets is running, it is correct to do:
\family typewriter

\begin_inset Newline newline
\end_inset

UIGadgets instance = (UIGadgets)MainWindow.getMainWindow();
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
getScreenShot()
\family default
 Returns an image with the screenshot of the application.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img = MainWindow.getScreenShot();
\end_layout

\begin_layout Plain Layout

File f = new File(Settings.onJavaSE? "screen.png" : "/sdcard/screen.png", File.CREAT
E_EMPTY);
\end_layout

\begin_layout Plain Layout

img.createPng(f);
\end_layout

\begin_layout Plain Layout

f.close();
\end_layout

\end_inset

Note that the font varies from device to device and even to desktop.
 So, if you want to compare a device's screen shot with one taken on the
 desktop, be sure to set the default font in both to the same, like using
 
\family typewriter
setDefaultFont(Font.getFont(false,20))
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
minimize() Notifies the application that it should be minimized, that is,
 transfered to the background.
 Whenever the application is minimized, the following call back function
 will be called: 
\family typewriter
onMinimize()
\family default
.
 Note: On Android, calling 
\family typewriter
minimize()
\family default
 will pause the application execution and it can only be restored manually
 by the user.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
restore() Notifies the application that it should be restored, that is,
 transfered to the foreground.
 Whenever the application is restored, the following call back function
 will be called: 
\family typewriter
onRestore()
\family default
.
 Note: This method is supported on Android but the user must restore the
 application manually.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onMinimize() Called just after the application is minimized.
 Currently, this is only supported on Java, BlackBerry, Windows CE, Windows
 32, and Android.
 When the 
\family typewriter
onMinimize()
\family default
 is called, the screen will only be able to be updated after it resumes
 (in other words, calling 
\family typewriter
repaint()
\family default
 or 
\family typewriter
repaintNow()
\family default
 from the 
\family typewriter
onMinimize()
\family default
 method has no effect).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onRestore() Called just after the application is restored.
 Currently, this is only supported on Java, BlackBerry, Windows CE, Windows
 32, and Android.
\end_layout

\begin_layout Section
The Android lifecycle
\end_layout

\begin_layout Standard
The Android on TotalCross has a predefined life cycle, handled by methods
 defined in 
\family typewriter
MainWindow
\family default
:
\end_layout

\begin_layout Enumerate

\family typewriter
onStart()
\family default
: called when the application starts.
\end_layout

\begin_layout Enumerate

\family typewriter
onPause()
\family default
: called when the user press the home key, or when a call is received, or
 when the screen turns off.
\end_layout

\begin_layout Enumerate

\family typewriter
onResume()
\family default
: called after the call ends or the screen is turned on again, or the program
 was exit softly.
\end_layout

\begin_layout Enumerate

\family typewriter
onExit()
\family default
: called when the system decides that is time to finish the application.
 If the home key was pressed, this method is called when another application
 is launched.
\end_layout

\begin_layout Standard
If the user press the home key and then forces the application to stop (by
 going to the Settings / Applications), then all Litebase tables may be
 corrupted (actually, no data is lost, but a 
\family typewriter

\begin_inset Newline newline
\end_inset

TableNotClosedException
\family default
 will be issued).
 So, it's a good thing to call 
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.closeAll()
\family default
 in your Litebase instances in the 
\family typewriter
onPause()
\family default
 method and recover them in the 
\family typewriter
onResume()
\family default
 method.
 Just remember that all prepared statements, row iterators and result sets
 will be invalid and cant't be reused.
\end_layout

\begin_layout Chapter
Adding Controls
\end_layout

\begin_layout Standard
The class 
\family typewriter
totalcross.ui.Control
\family default
 is the base class of all user interface controls, like buttons and labels.
\end_layout

\begin_layout Standard
Controls must be added to a 
\family typewriter
Container
\family default
 or one of its subclasses, like 
\family typewriter
MainWindow
\family default
.
 This container is referred as the parent of the control.
 To set the control bounds in the container, you can use the method 
\family typewriter
setRect(x,y,width,height)
\family default
.
\end_layout

\begin_layout Section
Relative positioning
\end_layout

\begin_layout Standard
TotalCross lets you place controls in two ways:
\end_layout

\begin_layout Standard
The hard and 
\emph on
wrong
\emph default
 way, by setting the control bounds with numbers.
 
\begin_inset Newline newline
\end_inset

E.g.: 
\family typewriter
control.setRect(10,10,80,12);
\end_layout

\begin_layout Standard
The smart way, by using constants for relative coordinates.
 The idea of the relative positioning is to let the programmer concentrate
 mainly on the position and let the sizes be computed automatically.
 The constants are:
\end_layout

\begin_layout Subsection*
Coordinate X
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
LEFT
\family default
 places the control at the position 0 horizontal.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the left of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
RIGHT
\family default
 aligns the control at the right.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the right of the window’s client rect (relative
 to the screen).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
RIGHT_OF
\family default
 aligns the control at the right of the last control (relative to a control).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
CENTER
\family default
 centers horizontally the control in the container (relative to the screen).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
CENTER_OF
\family default
 centers horizontally based on the last control's width (relative to a control).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
BEFORE
\family default
 places the control before the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
AFTER
\family default
 places the control after the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
SAME
\family default
 places the control at the same x coordinate of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Coordinate Y
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
TOP
\family default
 places the control at position 0 vertical.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the top of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BOTTOM
\family default
 places the control at the bottom of the container.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the bottom of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
CENTER
\family default
 centers vertically the control in the container.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
CENTER_OF
\family default
 centers vertically based on the last control's height.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BEFORE
\family default
 places the control before the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
AFTER
\family default
 places the control after the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
SAME
\family default
 places the control at the same y coordinate of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BOTTOM_OF
\family default
 aligns the control at the bottom of the last control.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Width
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
PREFERRED
\family default
 lets the control determine its best width.
 This is normally computed using the control’s text width in the selected
 font.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
FILL
\family default
 the control’s width will fill the space left until the end of the container.
 Cannot be used with 
\family typewriter
RIGHT
\family default
/
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
SAME
\family default
 sets the control's width with the same width of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
FIT
\family default
 sets the control's width to fit between the specified x position and the
 last control added x position.
 For example, if you place a label at 
\family typewriter
LEFT
\family default
, a button at 
\family typewriter
RIGHT
\family default
 and want to place an edit between those two controls, use 
\family typewriter
FIT
\family default
 as the control's width using the 
\family typewriter
L
\family default
abel as relative control.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
SCREEN_SIZE
\family default
 computes the width as a percentage of the screen's size (width).
 The percentage is passed as a number with + sign.
 E.G.: 
\family typewriter
SCREEN_SIZE+20
\family default
 will take the width as 20% of the screens size.
 Note that the size will change when the device is rotated.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
WILL_RESIZE
\family default
 sets that the width will be resized later, when all controls were added.
 You cannot use 
\family typewriter
RIGHT
\family default
 or 
\family typewriter
CENTER
\family default
 for placing controls when using 
\family typewriter
WILL_RESIZE
\family default
.
 After all items were added, call the 
\family typewriter
resizeWidth()
\family default
 method.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Height
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
PREFERRED
\family default
 lets the control determine its best height.
 This is normally computed using the control’s text height in the selected
 font.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
FILL
\family default
 the control’s height will fill the space left until the end of the container.
 Cannot be used with 
\family typewriter
BOTTOM
\family default
/
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
SAME
\family default
 sets the control's height with the same height of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
FIT
\family default
 sets the control's height to fit between the specified y position and the
 last control added y position.
 For example, if you place a button at 
\family typewriter
TOP
\family default
, a label at 
\family typewriter
BOTTOM
\family default
, and want to place a list box between both, use 
\family typewriter
FIT
\family default
 as the control's height using the button as relative control.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
SCREEN_SIZE
\family default
 computes the height as a percentage of the screen's size (height).
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
WILL_RESIZE
\family default
 sets that the height will be resized later, when all controls were added.
 You cannot use 
\family typewriter
BOTTOM
\family default
 or 
\family typewriter
CENTER
\family default
 for placing controls when using 
\family typewriter
WILL_RESIZE
\family default
.
 After all items were added, call the 
\family typewriter
resizeHeight()
\family default
 method.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREEN.SIZE00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Before calling 
\family typewriter
setRect()
\family default
, the control must be added to the container and have its characteristics
 (like font, border type, etc) set.
 This is needed because the control position is computed based on its parent
 container and the control's size is computed based on its characteristics.
 And all this is computed at 
\family typewriter
setRect()
\family default
.
\end_layout

\begin_layout Itemize
The control's coordinates are always relative to its parent coordinates.
\end_layout

\begin_layout Itemize
If you use 
\family typewriter
LEFT
\family default
/
\family typewriter
TOP
\family default
/
\family typewriter
RIGHT
\family default
/
\family typewriter
BOTTOM
\family default
 with the first control added to a window, it will use the coordinates of
 the window’s client rect, which are the container's area excluding the
 title and the borders, if any.
\end_layout

\begin_layout Itemize
You cannot use 
\family typewriter
FIT
\family default
 in both width/height.
 It won't work as expected because you can't specify two controls to make
 it relative to.
 The width/height is always related to the last control added.
\end_layout

\begin_layout Itemize
See the sources for the controls 
\family typewriter
ColorChooserBox
\family default
, 
\family typewriter
NumericBox
\family default
 and 
\family typewriter
TimeBox
\family default
 to learn how to use 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The use of relative positioning is 
\emph on
highly
\emph default
 recommended.
 It makes the program portable between different resolutions and fonts.
\end_layout

\begin_layout Section
Making UI adjustments
\end_layout

\begin_layout Standard
The constants described above have one important feature: a variable or
 a number can be used to increment/decrement the result value.
 Examples: 
\family typewriter
CENTER+2
\family default
, 
\family typewriter
BOTTOM-5
\family default
, 
\family typewriter
PREFERRED+4
\family default
, 
\family typewriter
FILL+2
\family default
, 
\family typewriter
BEFORE-5
\family default
.
 This value cannot be higher than 5, otherwise your interface will not be
 properly shown in other resolutions.
 Using something like 
\family typewriter
LEFT+10
\family default
 or 
\family typewriter
BOTTOM-15
\family default
 is as bad as using absolute values.
\end_layout

\begin_layout Standard
However, these values suffer a problem: a pixel's size may vary depending
 on the screen's density (also known as DPI).
 So, 4 may be good at a 240x320 screen, but too small in a 600x1024 tablet.
\end_layout

\begin_layout Standard
To bypass these limitations, we introduced a way to compute that adjustment
 based on the current's font size instead of a fixed pixel value.
 To enable it, you must set the following property at the application's
 static initializer:
\begin_inset Newline newline
\end_inset


\family typewriter
Settings.uiAdjustmentsBasedOnFontHeight = true;
\end_layout

\begin_layout Standard
After doing this, the adjustment you make will be a percentage of the font's
 height.
 So, 
\family typewriter
AFTER+50
\family default
 is 
\family typewriter
AFTER+
\family default
(50% of font's height), 
\family typewriter
PREFERRED+20
\family default
 is 
\family typewriter
PREFERRED+(
\family default
20% of font's height), and so on.
\end_layout

\begin_layout Standard
However, this feature is not supported by all controls.
 To disable this feature for a particular control the property 
\family typewriter
uiAdjustmentsBasedOnFontHeightIsSupported
\family default
 is set to 
\family typewriter
false
\family default
 in the class constructor.
\end_layout

\begin_layout Standard
The controls can be traversed using the 5-way navigation present on most
 PDAs and Smartphones.
 It is automatically activated on penless devices, but can be activated
 on pen devices by setting the property 
\family typewriter
Settings.keyboardFocusTraversable
\family default
 to 
\family typewriter
true
\family default
.
 Controls are traversed according to the order of elements in the field
 
\family typewriter
Container.tabOrder
\family default
.
 The controls are added to the vector in the order as they are added to
 the container.
 This may not be optimal; you may assign a new order by adding the controls
 to the vector:
\end_layout

\begin_layout Standard

\family typewriter
this.tabOrder = new Vector(new Object[]{ed1,btn1,btn2,ed2});
\end_layout

\begin_layout Section
Useful members
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
FontMetrics
\begin_inset space ~
\end_inset

fm
\family default
 The 
\family typewriter
FontMetrics
\family default
 object created from the control’s assigned 
\family typewriter
Font
\family default
.
 Always recreated when the font changes.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
int
\begin_inset space ~
\end_inset

appId
\family default
 A public variable that can be assigned by the application with any value.
 For example, the 
\family typewriter
Keyboard
\family default
 class uses this to store the 
\family typewriter
PushButtonGroup
\family default
 index and discover which one of the five had issued the event.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Object
\begin_inset space ~
\end_inset

appObj
\family default
 Same of 
\family typewriter
appId
\family default
, but it's an 
\family typewriter
Object
\family default
 instead of an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
int
\begin_inset space ~
\end_inset

clearValueInt
\family default
 Value used to clear a control that uses an index as the active value.
 The default is: 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
String
\begin_inset space ~
\end_inset

clearValueStr
\family default
 Value used to clear a control that uses a string as the active value.
 The default is an empty string: “”.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
isHighlighting
\family default
 If 
\family typewriter
true
\family default
, the user is using the arrows to navigate across the controls, that is
 the keyboard arrows will be used to highlight the controls until one is
 selected.
 If 
\family typewriter
false
\family default
, the currently focused control is using the keys for its own purposes.
 If the device is penless and the control is lost, try setting this to 
\family typewriter
true
\family default
.
\begin_inset Newline newline
\end_inset

Setting this to 
\family typewriter
true
\family default
 will cause the 
\family typewriter
KeyEvent
\family default
 to be intercepted and handled by the method 
\family typewriter
changeHighlighted()
\family default
.
 When the user press the ACTION (or ENTER) key to use the control, this
 flag is set to 
\family typewriter
false
\family default
 and the focus will be set to the control, so it be able to use the arrows
 to navigate inside it.
 The control must then set this to 
\family typewriter
true
\family default
 when finish using it or press the ACTION button again (which then sets
 the flag to 
\family typewriter
true
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
changeHighlighted(Container
\family typewriter

\begin_inset space ~
\end_inset


\family default
p,
\family typewriter

\begin_inset space ~
\end_inset


\family default
boolean
\family typewriter

\begin_inset space ~
\end_inset


\family default
forward) Transfers the focus to the next or previous control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableUpdateScreen Set to 
\family typewriter
false
\family default
 to disallow the screen update.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
focusTraversable Defines if this control can receive focus by using the
 arrow keys.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
textShadowColor The shadow color to be applied to this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEventFirst Set to 
\family typewriter
true
\family default
 to call 
\family typewriter
onEvent()
\family default
 before calling the event listeners.
 By default, the event listener is called before the 
\family typewriter
onEvent()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
transparentBackground Set the background to be transparent, by not filling
 the control's area with the background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
focusOnPenDown 
\family typewriter
true
\family default
 means this control expects to get focus on a 
\family typewriter
PEN_DOWN
\family default
 event.
 If 
\family typewriter
focusOnPenDown
\family default
 is 
\family typewriter
false
\family default
, focus will be set on 
\family typewriter
PEN_UP
\family default
 instead.
 This can be used for things like drag-scrollable list controls that contain
 controls as list items, to avoid setting focus to an item (and therefore
 changing the selection) during a drag-scroll.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
callListenersOnAllTargets 
\family typewriter
true
\family default
 means that event listeners will be called without verifying that the event
 target is this.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height)
\family default
 Sets the control bounds with the given parameters.
 If relative coordinates are used, they will be relative to the last added
 control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setRect(Rect
\begin_inset space ~
\end_inset

r)
\family default
 Same as 
\family typewriter
setRect(r.x, r.y, r.width, r.height)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default
 Same as the first one, but coordinates will be relative to the given control
 instead of the last one added.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

screenChanged)
\family default
 Same as above, but with the parameter 
\family typewriter
screenChanged
\family default
, which indicates that a screen change (resize, collapse) occured and the
 
\family typewriter
reposition()
\family default
 method is calling this method.
 Set by the system.
 If you call this method directly, always pass 
\family typewriter
false
\family default
 to it.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, PREFERRED, PREFERRED);
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, PREFERRED, PREFERRED, relative);
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, width, height);
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, width, height, relative);
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The last four methods are useful when you’re adding controls that do not
 need to have any of its characteristics (like font or border) changed.
 Changing the control's characteristics 
\emph on
after
\emph default
 those methods will give you unpredictable results.
 This happens because the control does not reposition/resize itself when
 you change its characteristics (just as an example, suppose that the default
 font has 11 in height, and you add the control; then you change the font
 to one with height 22; the control will not be resized and you'll see only
 half of the text).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
addTimer(int
\begin_inset space ~
\end_inset

millis)
\family default
 Calls 
\family typewriter
MainWindow.addTimer()
\family default
 to add a timer whose target is this control.
 Each time the timer ticks, a TIMER event will be posted to the control.
 The timer does not interrupt the program during its execution at the timer
 interval, it is scheduled along with application events.
 The 
\family typewriter
Timer
\family default
 object returned from this method can be passed to 
\family typewriter
removeTimer()
\family default
 to remove the timer.
 On Windows, the timer has a minimum resolution of 55 ms due to the native
 Windows system clock resolution of 55 ms.
 On Palm OS and other platforms, the minimum timer resolution is 10 ms.
 
\begin_inset Newline newline
\end_inset

If the control that holds the timer is removed from screen, the timer is
 also disabled.
 Consider using the dispatch-listener event model (
\family typewriter
addTimerListener()
\family default
) instead of creating a control just to catch the event (if this is the
 case).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addTimer(TimerEvent
\family typewriter

\begin_inset space ~
\end_inset


\family default
t,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
millis) Adds a timer to a control.
 This method allows you to create an instance 
\family typewriter
TimerEvent
\family default
 (or any descendant) ahead of time and add it to the control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
removeTimer(Timer
\begin_inset space ~
\end_inset

timer)
\family default
 Calls 
\family typewriter
MainWindow.removeTimer()
\family default
 to remove a timer associated with this control.
 Removes a timer from a control.
 
\family typewriter
true
\family default
 is returned if the timer was found and removed and 
\family typewriter
false
\family default
 is returned if the timer could not be found (meaning it was not active).
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
getX(),
\begin_inset space ~
\end_inset

getY(),
\begin_inset space ~
\end_inset

getWidth(),
\begin_inset space ~
\end_inset

getHeight()
\family default
 Returns the control’s bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getX2(),
\family typewriter

\begin_inset space ~
\end_inset

getY2()
\family default
 Returns 
\family typewriter
x+width-1
\family default
 and 
\family typewriter
y+height-1
\family default
, respectively.

\family typewriter
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
getParentWindow()
\family default
 Returns the parent window of this control.
 This is needed because the control’s parent may be a container, whose parent
 may be another container, and so on.
 It returns 
\family typewriter
null
\family default
 if there's no parent (e.
 g.: control still not added to any container).
 If this control is a window, will return itself.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getParent() Returns the control's parent container.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNext() Returns the next child in the parent's list of controls.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPrev() Returns the previous child in the parent's list of controls.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
repaint()
\family default
 Marks the control for repaint.
 When you call 
\family typewriter
repaint()
\family default
, the absolute area of the control regarding its parent window is invalidated
 (marked for repaint); then, the next time an event (a keypress, a timer,
 a pen event) occurs, the screen is updated.
 If you call 
\family typewriter
repaint()
\family default
 and the control isn't effectively repainted, you can use the 
\family typewriter
repaintNow()
\family default
 method.
 
\begin_inset Newline newline
\end_inset

If you want to avoid a method call, you can do 
\family typewriter
Window.needsPaint = true;
\family default
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
repaintNow()
\family default
 Redraws the control immediately.
 If this control is a window, the whole window area is marked for repaint
 (useful if you're removing some controls from a container) .
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setEnabled(boolean
\begin_inset space ~
\end_inset

enabled)
\family default
 Enables/disables the control to receive events.
 The control’s appearance is also changed to reflect the state.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isEnabled() Returns if this control can or not accept events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setFont(Font
\begin_inset space ~
\end_inset

font)
\family default
 Sets the font for the control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFont() Gets the font of this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
isDisplayed()
\family default
 Returns 
\family typewriter
true
\family default
 if the parent of this control is added somewhere.
 Some containers, like tab panel, have many children containers, but only
 one is added at a time.
 With this method, you can discover if your container is the one available.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
requestFocus()
\family default
 Sets the focus to this control.
 Note that in penless devices its also needed to set 
\family typewriter
isHighlighting = false;
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setFocusLess(boolean
\begin_inset space ~
\end_inset

on)
\family default
 Makes the current control a control that will never steal focus from other
 controls.
 It makes it very easy to create keypads with push button groups to enter
 characters into edit controls, for example.
 If this control is a container, sets all its children to be focusless too.
 A focusless control can receive and dispatch events, but cannot receive
 focus.
 Here's an example of how to use it to create a keypad: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// class fields
\end_layout

\begin_layout Plain Layout

private PushButtonGroup numericPad;
\end_layout

\begin_layout Plain Layout

private KeyEvent ke = new KeyEvent();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// in the initUI method:
\end_layout

\begin_layout Plain Layout

String []numerics = {"1","2","3","4","5","6","7","8","9","0",".","-"};
\end_layout

\begin_layout Plain Layout

add(numericPad=new PushButtonGroup(numerics, false, -1, -1, 6, 4, true,
 PushButtonGroup.BUTTON), RIGHT-2, TOP+2);
\end_layout

\begin_layout Plain Layout

numericPad.setFocusLess(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// in the onEvent method
\end_layout

\begin_layout Plain Layout

Control focus;
\end_layout

\begin_layout Plain Layout

if (e.target == numericPad && (focus=getParentWindow().getFocus()) instanceof
 Edit)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String s = numericPad.getSelectedCaption();
\end_layout

\begin_layout Plain Layout

	if (s != null)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ke.key = s.charAt(0);
\end_layout

\begin_layout Plain Layout

		ke.target = focus;
\end_layout

\begin_layout Plain Layout

		focus.onEvent(ke);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setBackColor(int
\begin_inset space ~
\end_inset

back)/getBackColor()
\family default
 Gets or sets the background color for the control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setForeColor(int
\begin_inset space ~
\end_inset

fore)/getForeColor()
\family default
 Gets or sets the foreground color for the control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setBackForeColors(int
\begin_inset space ~
\end_inset

back,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fore)
\family default
 Sets background and foreground colors at once.
 Calling this method is faster than calling 
\family typewriter
setBackColor()
\family default
 and 
\family typewriter
setForeColor()
\family default
 separately.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
getForeColor()
\family default
 and 
\family typewriter
getBackColor()
\family default
 returns the color depending if the control’s state is enabled or disabled.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
clear()
\family default
 The clear method in this class is a placeholder for the other controls.
 It implements an easy way to clear all the controls in the screen.
 When you call the clear method of a container or a window, it recursively
 calls the clear method of all child controls.
 Each control will use 
\family typewriter
clearValueInt()
\family default
 or 
\family typewriter
clearValueStr()
\family default
 (both defined in this class) as the clear value, depending on the characteristi
cs of the control.
 For example, a 
\family typewriter
ListBox
\family default
 will use the 
\family typewriter
clearValueInt()
\family default
 to set it as the selected index, while an 
\family typewriter
Edit
\family default
 will use the 
\family typewriter
clearValueStr()
\family default
 as the text inside.
 If you want to change the clear value, just assign a new value to one of
 these two fields.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setTextShadowColor(int
\begin_inset space ~
\end_inset

color)
\family default
 Sets that the control's text will have a shadow.
 The shadow is made drawing the button in 
\family typewriter
(x-1,y-1)
\family default
, 
\family typewriter
(x+1,y-1)
\family default
, 
\family typewriter
(x-1,y+1)
\family default
, and 
\family typewriter
(x+1,y+1)
\family default
 positions.
 Defaults to -1, which means no shadow.
 You can set pass 
\family typewriter
BRIGHTER_BACKGROUND
\family default
 or 
\family typewriter
DARKER_BACKGROUND
\family default
 as parameter, AFTER calling 
\family typewriter
setBackColor()
\family default
 or 
\family typewriter
setForeColor()
\family default
, to compute the color based on the background.
 
\begin_inset Newline newline
\end_inset

Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

c = new Label(....);
\end_layout

\begin_layout Plain Layout

c.setBackColor(Color.BLUE);
\end_layout

\begin_layout Plain Layout

c.setTextShadowColor(DARKER_BACKGROUND); // you may also set it directly
 to a color:
\end_layout

\begin_layout Plain Layout

c.setTextShadowColor(Color.BLACK); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTextShadowColor() Returns the text shadow color of this control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isInsideOrNear(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
x,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
y) Returns 
\family typewriter
true
\family default
 if the point lies inside this control.
 If it doesn't lie, but the device is a finger touch one, checks if the
 distance is below the touch tolerance.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postPressedEvent() Posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event whith this control as target.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPressedEvent(Control
\family typewriter

\begin_inset space ~
\end_inset


\family default
target) Creates a 
\family typewriter
ControlEvent.PRESSED
\family default
 if not yet created and returns it.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
reposition()
\family default
 Repositions the control after something has been changed.
 This method is called by the VM to reposition all controls on screen when
 a rotation occurs.
 It calls again 
\family typewriter
setRect()
\family default
 with the original parameters.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
setInsets(int
\begin_inset space ~
\end_inset

left,int
\begin_inset space ~
\end_inset

right,int
\begin_inset space ~
\end_inset

top,int
\begin_inset space ~
\end_inset

bottom)
\family default
 Sets a gap between the control's text and its bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
onPaint(Graphics
\begin_inset space ~
\end_inset

g)
\family default
 This is the method called when the control is going to be painted.
 You can use the given 
\family typewriter
Graphics
\family default
 object to draw what you need on screen.
 The default's control font is already set, and the clipping is also set
 to the control's bounds.
 When this method is called, the 
\family typewriter
Graphics
\family default
 object passed has been translated into the coordinate system of the control
 and the area behind the control has already been painted.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
onBoundsChanged
\family default
() Called after the user invoked the 
\family typewriter
setRect()
\family default
 method.
 Good to compute positions that are dependant on the bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
onColorsChanged(boolean
\begin_inset space ~
\end_inset

colorsChanged)
\family default
 Called after 
\family typewriter
setEnabled()
\family default
, 
\family typewriter
setForeColor()
\family default
, and 
\family typewriter
setBackColor()
\family default
 methods were called and when a control has been added to a container.
 If 
\family typewriter
colorsChanged
\family default
 is 
\family typewriter
true
\family default
, it was called from 
\family typewriter
setForeColor()
\family default
/
\family typewriter
setBackColor()
\family default
/
\family typewriter
Container.add()
\family default
; otherwise, it was called from 
\family typewriter
setEnabled()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
onWindowPaintFinished()
\family default
 Every time 
\family typewriter
_doPaint()
\family default
 finishes paintings all controls, this method is called.
 You can then do actions needed after the screen has finished the paint.
 Note that this method is only called on controls that extends window and
 on the focused control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
onFontChanged()
\family default
 Called after the 
\family typewriter
setFont()
\family default
 method is invoked.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width of this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the preferred height of this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resetSetPositions() Resets the original points that are set by the first
 
\family typewriter
setRect()
\family default
, so if you call 
\family typewriter
setRect()
\family default
 again, the old positions are replaced by the new ones.
 The set positions are used when a rotation occurs.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSize() Returns the current size 
\family typewriter
(width,height)
\family default
 of this control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPos() Returns the current position 
\family typewriter
(x,y)
\family default
 of this control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setVisible(boolean
\family typewriter

\begin_inset space ~
\end_inset


\family default
visible) Shows or "hides" this control.
 Note that it remains attached to its container.
 Calls 
\family typewriter
repaint()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isVisible() Returns 
\family typewriter
true
\family default
 if this control is visible; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAbsoluteRect() Returns the absolute coordinates of this control relative
 to the 
\family typewriter
MainWindow
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
contains(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
x,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
y) Returns 
\family typewriter
true
\family default
 if the given 
\family typewriter
x
\family default
 and 
\family typewriter
y
\family default
 coordinate in the parent's coordinate system is contained within this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
translateFromOrigin(Coord
\family typewriter

\begin_inset space ~
\end_inset


\family default
z) Sets the given point to the absolute coordinate relative to the origin
 window.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getGraphics() Returns a 
\family typewriter
Graphics
\family default
 object which can be used to draw in the control.
 This method updates the single 
\family typewriter
Graphics
\family default
 object with the current control font and bounds.
 It sets a clipping rectangle on the graphics, clipping it against all parent
 areas.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postEvent(Event
\family typewriter

\begin_inset space ~
\end_inset


\family default
event) Posts an event.
 The event pass will be posted to this control and all the parent controls
 of this control (all the containers this control is within).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEvent(Event
\family typewriter

\begin_inset space ~
\end_inset


\family default
event) Called to process key, pen, control and other posted events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
_onEvent(Event
\family typewriter

\begin_inset space ~
\end_inset


\family default
e) Calls the event listeners and the 
\family typewriter
onEvent()
\family default
 method for this control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
updateScreen() This method causes the immediate screen update.
 The screen is saved in a buffer and, when this method is called, the buffer
 is transfered to the screen, using the 
\family typewriter
Container.
\begin_inset Newline newline
\end_inset

nextTransitionEffect
\family default
 set.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addPenListener(PenListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for pen events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addMouseListener(PenListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for mouse events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addWindowListener(WindowListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for 
\family typewriter
Window
\family default
 events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addGridListener(GridListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for 
\family typewriter
Grid
\family default
 events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addListContainerListener(ListContainerListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for 
\family typewriter
ListContainer
\family default
 events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addFocusListener(FocusListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for focus events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addPressListener(PressListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for press events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addTimerListener(TimerListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for timer events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addKeyListener(KeyListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for key events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addHighlightListener(HighlightListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Adds a listener for highlight events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removePenListener(PenListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for pen events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeMouseListener(MouseListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for mouse events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeWindowListener(WindowListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for 
\family typewriter
Window
\family default
 events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeGridListener(GridListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for 
\family typewriter
Grid
\family default
 events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeListContainerListener(ListContainerListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for 
\family typewriter
ListContainer
\family default
 events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeFocusListener(FocusListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for focus events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removePressListener(PressListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for press events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeTimerListener(TimerListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for timer events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeKeyListener(KeyListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for key events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeHighlightListener(HighlightListener
\family typewriter

\begin_inset space ~
\end_inset


\family default
listener) Removes a listener for highlight events.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getEventListeners() Returns the event listeners array.
 Note that each element is an instance of 
\family typewriter
Control.Listener
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isVisibleAndInside(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
x0,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
y0,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
xf,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
yf) Returns 
\family typewriter
true
\family default
 if this control is visible and inside these bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
bringToFront() Send this control to the top of the parent's.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sendToBack() Send this control to the last place of the parent's.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isChildOf(Container
\family typewriter

\begin_inset space ~
\end_inset


\family default
p) Returns 
\family typewriter
true
\family default
 if this control is added to the given container at some higher level.
 
\end_layout

\begin_layout Chapter
Events
\end_layout

\begin_layout Standard
Events represent all activity that goes on between the user and the application.
 When the user interacts with a program, the VM creates an event representing
 the action and communicates these actions to the programs using events.
\end_layout

\begin_layout Standard
This chapter is organized into the following sections to provide a quick
 start on event handling in TotalCross:
\end_layout

\begin_layout Description
Control
\begin_inset space ~
\end_inset

Events briefly explains the basic types of events handled by controls.
\end_layout

\begin_layout Description
Handling
\begin_inset space ~
\end_inset

Events explains the event-handling models available in TotalCross.
\end_layout

\begin_layout Description
The
\begin_inset space ~
\end_inset

Event
\begin_inset space ~
\end_inset

class describes this class in more detail.
\end_layout

\begin_layout Standard
If you're new to TotalCross and want to get things started quickly, skip
 the Delegation Event Model in section two – “Handling Events”.
\end_layout

\begin_layout Standard
If you're familiar with TotalCross and wants to know more about events,
 make sure you understand both event-handling models.
\end_layout

\begin_layout Section
Control Events
\end_layout

\begin_layout Standard
There are two basic types of events: pen events and key events.
 These events are handled by the window, which creates a new event of the
 proper type (pen event or key event) and forwards it to the target control.
 These events are handled by the control, which may convert them to other
 events, defined on the class 
\family typewriter
ControlEvent
\family default
.
\end_layout

\begin_layout Standard
Below we can see how each event defined on 
\family typewriter
ControlEvent
\family default
 is handled by each control:
\end_layout

\begin_layout Description

\family typewriter
\series medium
CURSOR_CHANGED
\family default
 
\series default
event sent when user calls 
\family typewriter
Edit.setCursorPos()
\family default
.
\end_layout

\begin_layout Description

\family typewriter
\series medium
PRESSED
\family default
\series default
 this event is posted by controls when they receive a 
\family typewriter
PEN_DOWN
\family default
 (like check, radio, tab panel), and a 
\family typewriter
PEN_UP
\family default
 (button, list box, push button group, scrollBar) or even a 
\family typewriter
WINDOW_CLOSED
\family default
 (comboBox).
\end_layout

\begin_layout Description

\family typewriter
\series medium
FOCUS_IN
\family default
\series default

\begin_inset space ~
\end_inset


\series medium
and
\begin_inset space ~
\end_inset


\family typewriter
FOCUS_OUT
\family default
\series default
 posted by the window when a control different from the current one is clicked.
 The 
\family typewriter
FOCUS_OUT
\family default
 is first posted to the old control, and the event 
\family typewriter
FOCUS_IN
\family default
 is then posted to the new control.
\end_layout

\begin_layout Description

\family typewriter
\series medium
TIMER
\family default
\series default
 this is a special event that is posted to the control that has a timer
 assigned to it; it is called when the timer countdown has reached zero.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
WINDOW_CLOSED
\family default
\series default
 posted by the unpop method to notify all controls that a window has been
 closed.
 Some controls, like combo box, has a pop list assigned to it; when the
 pop list issues a 
\family typewriter
WINDOW_CLOSED
\family default
 event, the combo box receives it and converts to a 
\family typewriter
PRESSED
\family default
 event.
\end_layout

\begin_layout Description

\family typewriter
\series medium
SIP_CLOSED
\family default
 
\series default
The event type fot the SIP being closed by the system.
 Works on Android and iOS.
 The application cannot see this event since it is interpected by the topmost
 window.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
HIGHLIGHT_IN
\family default

\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\family typewriter
HIGHLIGHT_OUT
\family default
\series default
 these events are posted by the window when the user changes the focus to
 another control and the field 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

keyboardFocusTraversable
\family default
 is set to 
\family typewriter
true
\family default
.
 The 
\family typewriter
HIGHLIGHT_OUT
\family default
 event is first posted to the old control, and the event 
\family typewriter
HIGHLIGHT_IN
\family default
 is then posted to the new control.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The field 
\family typewriter
Settings.keyboardFocusTraversable
\family default
 default value is 
\family typewriter
true
\family default
 for penless devices and 
\family typewriter
false
\family default
 for touchscreen devices.
 You may set it to 
\family typewriter
true
\family default
 on touchscreen devices to allow navigation through arrow keys.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard

\family typewriter
ControlEvent
\family default
 has the following public constructors and methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlEvent() Constructs an empty 
\family typewriter
ControlEvent
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlEvent(int
\series medium

\begin_inset space ~
\end_inset


\series default
type,
\series medium

\begin_inset space ~
\end_inset


\series default
Control
\series medium

\begin_inset space ~
\end_inset


\series default
c) Constructs a 
\family typewriter
ControlEvent
\family default
 of the given type and for the given target control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(Control
\series medium

\begin_inset space ~
\end_inset


\series default
c) Updates the 
\family typewriter
ControlEvent
\family default
 setting 
\family typewriter
timestamp
\family default
, 
\family typewriter
consumed
\family default
, and 
\family typewriter
target
\family default
.
 
\end_layout

\begin_layout Standard
Some controls have its own event class.
 They are 
\family typewriter
Animation
\family default
, 
\family typewriter
Grid
\family default
, and 
\family typewriter
ListContainer
\family default
.
 Their classes, along with their specific events, constructors, methods,
 and fields are, respectively: 
\end_layout

\begin_layout Subsection
AnimationEvent
\end_layout

\begin_layout Standard
Events posted by an animation control.
 
\end_layout

\begin_layout Subsubsection
Events
\end_layout

\begin_layout Description

\family typewriter
\series medium
LOOP
\family default
\series default
 Event generated when the animation loops.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
FRAME
\family default
\series default
 Event generated when a new frame is displayed.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
FINISH
\family default
\series default
 Event generated when the animation ends.
\end_layout

\begin_layout Subsubsection
Constructor
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AnimationEvent(int
\series medium

\begin_inset space ~
\end_inset


\series default
type,
\series medium

\begin_inset space ~
\end_inset


\series default
Object
\series medium

\begin_inset space ~
\end_inset


\series default
target) Constructs a new 
\family typewriter
Animation
\family default
 event, setting the type and target to the given parameters.
 
\end_layout

\begin_layout Subsection
GridEvent
\end_layout

\begin_layout Standard
An event generated when the user clicks on a grid or checks it.
 
\end_layout

\begin_layout Subsubsection
Events
\end_layout

\begin_layout Description

\family typewriter
\series medium
SELECTED_EVENT
\family default
\series default
 Event generated when a new row is selected.
\end_layout

\begin_layout Description

\family typewriter
\series medium
CHECK_CHANGED_EVENT
\family default
\series default
 Event generated when the grid has a check column; this event is generated
 when a grid row is checked or unchecked.
\end_layout

\begin_layout Description

\family typewriter
\series medium
TEXT_CHANGED_EVENT
\family default
\series default
 Event generated when a cell of an editable column had its text changed.
\end_layout

\begin_layout Subsubsection
Fields
\end_layout

\begin_layout FieldList
\labelwidthstring 0
row Stores the target row of this grid event.
 If the user checked all checks (by clicking in the header check), it is
 
\family typewriter
Grid.ALL_CHECKED
\family default
; otherwise, if the user unchecked all lines, it is 
\family typewriter
Grid.
\begin_inset Newline newline
\end_inset

ALL_UNCHECKED
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
col Stores the target column of this grid event.
 On a grid that has a check column, the columns text starts from 1, otherwise,
 if there is no check, it starts from 0.
 
\end_layout

\begin_layout Subsection
ListContainerEvent
\end_layout

\begin_layout Standard
An event generated when the user clicks on an 
\family typewriter
ListContainer
\family default
 item.
 
\end_layout

\begin_layout Subsubsection
Events
\end_layout

\begin_layout Description

\family typewriter
\series medium
ITEM_SELECTED_EVENT
\family default
\series default
 Event generated when a new item was selected.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
LEFT_IMAGE_CLICKED_EVENT
\family default
 
\series default
Event generated when the left image was clicked.
 Verify the 
\family typewriter
isImage2
\family default
 member to determine the current image that's displayed.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
RIGHT_IMAGE_CLICKED_EVENT
\family default
 
\series default
Event generated when the right image was clicked.
 Verify the 
\family typewriter
isImage2
\family default
 member to determine the current image that's displayed.
\end_layout

\begin_layout Subsubsection
Fields
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isImage2 
\family typewriter
true
\family default
 if the new image is the second one.
 If there are two images, one as an unselected image and a second one as
 the selected, using this field you can find which one is being displayed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
source The control that originated the event.
 When the user clicks on an 
\family typewriter
Image
\family default
, the target is the 
\family typewriter
Image
\family default
, and the source is the control where the image is.
 
\end_layout

\begin_layout Section
Event Handling
\begin_inset CommandInset label
LatexCommand label
name "sec:Event-Handling"

\end_inset


\end_layout

\begin_layout Standard
TotalCross implements two event-handling models.
\end_layout

\begin_layout Subsection
Inheritance Event Model
\end_layout

\begin_layout Standard
Similar to the Java 1.0 event model, this approach requires you to subclass
 UI components and override the event handling method – 
\family typewriter
onEvent(Event e)
\family default
 – in order to catch and process UI events.
 When a control posts an event (using the 
\family typewriter
postEvent()
\family default
 method) it is propagated sequentially up the UI hierarchy until it is either
 consumed, or the root of the hierarchy is reached.
\end_layout

\begin_layout Standard
If we have a button inside a tab panel in a window, and this button receives
 an event, the event is propagated up the hierarchy:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 20col%
\end_inset


\family typewriter
Window.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 29col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 24col%
\end_inset


\family typewriter
TabPanel.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 33col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 28col%
\end_inset


\family typewriter
Container.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 37col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 34col%
\end_inset


\family typewriter
Button.onEvent()
\family default
 
\begin_inset Formula $\Longleftarrow$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After handling the event, you can break the event propagation by setting
 the 
\family typewriter
Event.consumed
\family default
 field to 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Standard
Here's a simple example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button pushB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(pushB = new Button("Push me
\backslash
nPlease"), CENTER, TOP);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		switch (event.type)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

				if (event.target == pushB)
\end_layout

\begin_layout Plain Layout

					// handle pushB being pressed
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Disabled controls can only post 
\family typewriter
TIMER
\family default
 events.
 The method 
\family typewriter
postEvent()
\family default
 returns immediately if the control is not enabled and the type of the event
 received is not 
\family typewriter
TIMER
\family default
.
 The only exception to this occurs on fingertouch devices, to allow the
 flick stop or start when a 
\family typewriter
PEN_DOWN
\family default
 occurs in a disabled control.
\end_layout

\begin_layout Itemize
The event propagation stops if the control is moved to another container.
 For example, when you pop up the keyboard, the target edit is removed from
 its parent and added to the keyboard window; at this time, the event propagatio
n (of the key event) stops.
\end_layout

\begin_layout Itemize
The 
\family typewriter
MainWindow
\family default
 does not receive an event posted by a control in a popup window.
 The only exception for this is the 
\family typewriter
WINDOW_CLOSED
\family default
, which is posted to the window that popped it.
\end_layout

\begin_layout Itemize
A control that is not added to a container (or any parent of its container
 is not added to a window) will never receive events nor be repainted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Small programs can handle the events by implementing the 
\family typewriter
onEvent()
\family default
 method in the
\family typewriter

\begin_inset Newline newline
\end_inset

MainWindow
\family default
 class, but it can become confusing if the program gets bigger.
 An alternative is to create classes that extend 
\family typewriter
Container
\family default
 and swap them on the 
\family typewriter
MainWindow
\family default
 as the user navigates through the program.
 Each class implementing the 
\family typewriter
onEvent()
\family default
 method will have to handle its own events.
\end_layout

\begin_layout Subsection
Delegation Event Model
\end_layout

\begin_layout Standard
Similar to the event model introduced by Java 1.1, this approach solves some
 limitations of the Inheritance Event Model, which are:
\end_layout

\begin_layout Itemize
To be able to handle events, a class must subclass 
\family typewriter
Control
\family default
 and implement the 
\family typewriter
onEvent()
\family default
 method.
\end_layout

\begin_layout Itemize
Since all event types are filtered through the 
\family typewriter
onEvent()
\family default
 method, the method is executed whenever the control receives an event,
 regardless of its type.
 If a particular event type is ignored by the whole program, it will never
 be handled and consumed.
 Instead, it will keep going up on the hierarchy until it reaches the root,
 wasting resources in the process.
 The only way to avoid it – handling all event types, consuming events that
 are no handled anywhere on the program as soon as they are received – is
 discouraged and can lead to complex and error-prone code.
\end_layout

\begin_layout Itemize
Events are supposed to be handled only by the control that receives the
 event.
 Handling events received by a control in another class is a hard task.
 An example is the tooltip control, which works by handling the pen events
 received by the control it refers to.
\end_layout

\begin_layout Standard
In this model, an event is propagated from a “source” object to a “listener”
 object by invoking a method on the listener.
 and passing in the instance of the event subclass, which defines the event
 type generated.
\end_layout

\begin_layout Standard
A listener is an object that implements a specific 
\family typewriter
EventListener
\family default
 interface.
 An 
\family typewriter

\begin_inset Newline newline
\end_inset

EventListener
\family default
 interface defines one or more methods which are to be invoked by the event
 source in response to each specific event type handled by the interface.
\end_layout

\begin_layout Standard
An event source is an object which originates events.
 The source defines the set of events it emits by providing a set of 
\family typewriter
add<EventType>Listener(<EventType>Listener)
\family default
 methods which are used to register specific listeners for those events.
\end_layout

\begin_layout Standard
Here's the same example, using an 
\family typewriter
EventListener()
\family default
 instead of overriding 
\family typewriter
onEvent()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button pushB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(pushB = new Button("Push me
\backslash
nPlease"), CENTER, TOP);
\end_layout

\begin_layout Plain Layout

		pushB.addPressListener(
\end_layout

\begin_layout Plain Layout

			new PressListener()
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				public void controlPressed(ControlEvent e)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					// handle pushB being pressed
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Creating listeners using the new 
\family typewriter
<EventType>Listener
\family default
, as indicated above, makes your program bigger and should be used with
 care.
 If you will add listeners of the same event type to many controls, implement
 the listener in the class like this:
\family typewriter

\begin_inset Newline newline
\end_inset

public class MyProgram extends MainWindow implements PressListener
\end_layout

\end_inset


\end_layout

\begin_layout Section
The Event class
\end_layout

\begin_layout Standard
Let's now look at the details of each event class.
 TotalCross has ten event classes in the 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

ui
\family default
 package: the already described 
\family typewriter
ControlEvent
\family default
, 
\family typewriter
AnimationEvent
\family default
, 
\family typewriter
GridEvent
\family default
, and
\family typewriter

\begin_inset Newline newline
\end_inset

ListContainerEvent
\family default
; and 
\family typewriter
MediaClipEvent, KeyEvent
\family default
, 
\family typewriter
PenEvent
\family default
, 
\family typewriter
ScanEvent
\family default
,
\family typewriter

\begin_inset Newline newline
\end_inset

TimerEvent
\family default
, and 
\family typewriter
UIRobotEvent
\family default
.
 Their parent class is 
\family typewriter
Event
\family default
, which provides some useful members:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
int
\begin_inset space ~
\end_inset

type This is the event number, used to detect which event was posted.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Object
\begin_inset space ~
\end_inset

target This one informs who is receiving the event (E.g.: the VM posts a 
\family typewriter
PenEvent.PEN_DOWN
\family default
 to a control) or who is posting it (E.g.: the control posts an 
\family typewriter
ControlEvent.PRESSED
\family default
).
 For user-interface events, this is the control the event is associated
 with.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
int
\begin_inset space ~
\end_inset

timeStamp Contains the time stamp at which the event was created.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Be careful with the time stamp.
 There is no way to convert it to the current 
\family typewriter
hh:mm:ss:millis
\family default
.
 It is just useful for comparison purposes; or to compute the time elapsed
 since the last event occurred.
 You can use it to simulate a double-click, by checking the elapsed time
 between two clicks.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
boolean
\begin_inset space ~
\end_inset

consumed When set to true during the event propagation, breaks the propagation
 chain.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To keep memory usage low, some VM routines reuse 
\family typewriter
PenEvent
\family default
s and 
\family typewriter
KeyEvent
\family default
s objects; so, if you just save a reference to the object instead of the
 time stamp itself, you may get unexpected results.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The Event class has two constructors and methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Event(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

target,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeStamp) Constructs a new event based on the given parameters.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Event() Constructs a new event with the current time stamp.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
touch() Updates the time stamp parameter with the current time.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNextAvailableEventId() This static method is used to avoid conflicts
 when your application or library creates a new 
\family typewriter
Event
\family default
 type.
 It is discussed in more details in PART V of this manual.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isAvailable() Returns 
\family typewriter
true
\family default
 if there is an event available in the VM event queue.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the target object and the
 event object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clearQueue(int
\begin_inset space ~
\end_inset

type) Clears the event queue.
 Some types of events can be ignored.
 0 must be passed to ignore all types.
 
\end_layout

\begin_layout Standard
The event classes that have not been described before are:
\end_layout

\begin_layout Subsection
PenEvent
\end_layout

\begin_layout Standard

\family typewriter
PenEvent
\family default
 is a pen down, up, move or drag event.
 A pen drag occurs when the pen moves while the screen is pressed.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
PenEvent
\family default
 class has the following event types, fields, methods, and just a omitted
 public default constructor:
\end_layout

\begin_layout Description

\family typewriter
\series medium
PEN_DOWN
\family default
\series default
 The event type for a pen or mouse down.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
PEN_UP
\family default
\series default
 The event type for a pen or mouse up.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
PEN_DRAG
\family default
\series default
 The event type for a pen or mouse drag.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
PEN_DRAG_START
\family default
\series default
 The event type for a pen or mouse drag start.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
PEN_DRAG_END
\family default
\series default
 The event type for a pen or mouse drag end.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
x,
\begin_inset space ~
\end_inset

y The location of the event.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
absoluteX,
\begin_inset space ~
\end_inset

absoluteY The absolute location of the event.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
modifiers This is not used on the Palm OS platform, only on the other platforms,
 which is the state of the modifier keys when the event occured.
 This is an 
\family typewriter
OR
\family default
'ed combination of the modifiers present in the 
\family typewriter
DeviceKeys
\family default
 interface.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(Control
\begin_inset space ~
\end_inset

c,int
\begin_inset space ~
\end_inset

absoluteX,int
\begin_inset space ~
\end_inset

x,int
\begin_inset space ~
\end_inset

absoluteY,int
\begin_inset space ~
\end_inset

y,int
\begin_inset space ~
\end_inset

type,int
\begin_inset space ~
\end_inset

modifiers) Updates this event setting also 
\family typewriter
timestamp
\family default
, 
\family typewriter
consumed
\family default
 and 
\family typewriter
target
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getEventName(int
\begin_inset space ~
\end_inset

type) Returns the event name.
 Used to debugging.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation with the event name, position,
 and the event object.
\end_layout

\begin_layout Subsection
KeyEvent
\end_layout

\begin_layout Standard
A 
\family typewriter
KeyEvent
\family default
 is a key press event.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
KeyEvent
\family default
 class has the following event types, fields, constructors, and methods:
\end_layout

\begin_layout Description

\family typewriter
\series medium
KEY_PRESS
\family default
 
\series default
The event type for a key press event.
 Device keys are handled in the
\family typewriter
\series medium
 SPECIAL_KEY _PRESS
\family default
\series default
 event.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ACTION_KEY_PRESS
\family default
 The event type for a focus being transfered to this control with the ENTER
 or ACTION keys.

\family typewriter
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
SPECIAL_KEY_PRESS
\family default
 The event type for a device key press event.
 Note that some keys are posted only when they are released.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
key The key pressed or entered by other means (grafitti input).
 This is either a normal character key (if the value is < 70000, values
 from the ASCII table) or one of the special keys defined in the 
\family typewriter
DeviceKeys
\family default
 interface.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
modifiers The state of the modifier keys when the event occured.
 This is a 
\family typewriter
OR
\family default
'ed combination of the modifiers present in the 
\family typewriter
DeviceKeys
\family default
 interface.
 It is used on all platforms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
KeyEvent() Constructs a 
\family typewriter
KeyEvent
\family default
, assigning the type as 
\family typewriter
KEY_PRESS
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
KeyEvent(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

modifiers) Creates a new instance of a 
\family typewriter
KeyEvent
\family default
 with the specified type (which must be either 
\family typewriter
KEY_PRESS
\family default
, 
\family typewriter
ACTION_KEY_PRESS
\family default
, or 
\family typewriter
SPECIAL_KEY_PRESS
\family default
), key and modifiers (state of the modifier keys for this event).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isActionKey() Returns 
\family typewriter
true
\family default
 if the key press is an ACTION or ENTER one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isUpKey() Returns 
\family typewriter
true
\family default
 if the key press is any kind of the possible ones that means UP.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isDownKey() Returns true if the key press is any kind of the possible ones
 that means DOWN.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isNextKey() Returns true if the key press is any kind of the possible ones
 that means forward (TAB, PAGE_DOWN, DOWN, RIGHT, etc).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isPrevKey() Returns 
\family typewriter
true
\family default
 if the key press is any kind of the possible ones that means previous (PAGE_UP,
 UP, LEFT, etc).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation with the event name, the key
 pressed, and the event object.
\end_layout

\begin_layout Standard
Some of the keys defined in 
\family typewriter
totalcross.sys.SpecialKeys
\family default
 need a special code to be manipulated: they are not handled by the application
 unless the application requests it.
 For example, the 
\family typewriter
totalcross.sys.SpecialKeys.UP
\family default
 and 
\family typewriter
totalcross.sys.SpecialKeys.DOWN
\family default
 are automatically sent to the application's event queue, but the 
\family typewriter
SpecialKeys.KEYBOARD_*
\family default
 and 
\family typewriter
SpecialKeys.HARD*
\family default
, not.
 To be able to intercept these keys, you must use the method 
\family typewriter
Vm.
 interceptSpecialKeys(mask)
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The 
\family typewriter
SpecialKeys
\family default
 interface does not have all possible keys mapped.
 If you have a particular device, you can learn the code of a key by creating
 a test application and calling 
\family typewriter
Vm.showKeyCodes(boolean on)
\family default
.
 When this mode is on, each time a key is pressed, the VM shows an alert
 with the code.
 Then use this key code in the 
\family typewriter
Vm.interceptSpecialKeys()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MediaClipEvent 
\end_layout

\begin_layout Standard
This class represents the events posted by a soundclip control.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
MediaClipEvent
\family default
 class has the following event types and, constructors:
\end_layout

\begin_layout Description

\family typewriter
\series medium
STARTED
\family default
\series default
 The event type when the play starts.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
STOPPED
\family default
 
\series default
The event type when the play ends.
\end_layout

\begin_layout Description

\family typewriter
\series medium
CLOSED
\family default
 The event type when the play pauses.

\series default
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
ERROR
\family default
\series default
 The event type when an error occurs.
\end_layout

\begin_layout Description

\family typewriter
\series medium
END_OF_MEDIA
\family default
\series default
 The event type when the end of the media is reached.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MediaClipEvent(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

target) Constructs a 
\family typewriter
MediaClipEvent
\family default
, setting the type and target to the given parameters.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MediaClipEvent() Constructs an empty 
\family typewriter
MediaClipEvent
\family default
.
 
\end_layout

\begin_layout Subsection
ScanEvent
\end_layout

\begin_layout Standard

\family typewriter
ScanEvent
\family default
 is an event thrown by the barcode scanner.
 Used in the 
\family typewriter
Scanner
\family default
 class.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
ScanEvent
\family default
 class has the following event types, one field, one method, and an omitted
 public default constructor:
\end_layout

\begin_layout Description

\family typewriter
\series medium
SCANNED
\family default
 The event type for a scanner scanning event.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BATTERY_ERROR
\family default
 The event type for a scanner low battery event.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
TRIGGERED
\family default
\series default
 The event type for a scanner triggered: A scan attempt was initiated -
 hard or soft trigger.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
data The data resulting from the scan when the event type is 
\family typewriter
SCANNED
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(int
\begin_inset space ~
\end_inset

type) Updates a scan event with the given type.
 The target is always 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection
TimerEvent
\end_layout

\begin_layout Standard

\family typewriter
TimerEvent
\family default
 represents a control's timer.
 Timers are created and destroyed using the 
\family typewriter
addTimer()
\family default
 and 
\family typewriter
removeTimer()
\family default
 methods present in the 
\family typewriter
Control
\family default
 class.
\end_layout

\begin_layout Standard
The 
\family typewriter
TimerEvent
\family default
 class has the following event type, fields, one method, and one public
 default constructor:
\end_layout

\begin_layout Description

\family typewriter
\series medium
TRIGGERED 
\family default
\series default
The event type for a triggered timer.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
millis The timer interval in milliseconds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastTick The timestamp of the last tick.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
next The next timer in the linked list.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
triggered A flag set when the timer event is being posted.
 With it, you can test from various timers to the same target control when
 one of them is dispatched.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TimerEvent() Constructs a new 
\family typewriter
TimerEvent
\family default
, setting the type to 
\family typewriter
TRIGGERED
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation with the 
\family typewriter
millis
\family default
 field and the event object.
\end_layout

\begin_layout Subsection
UIRobotEvent
\end_layout

\begin_layout Standard
Event sent when a robot runs.
 The target is always the 
\family typewriter
MainWindow
\family default
's instance.
\end_layout

\begin_layout Standard
The 
\family typewriter
UIRobotEvent
\family default
 class has the following events types and fields:
\end_layout

\begin_layout Description

\family typewriter
\series medium
ROBOT_FAILED 
\family default
\series default
Event indicating that the robot has failed.
 Check the 
\family typewriter
failureReason
\family default
 field for more information.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
ROBOT_SUCCEED
\family default
 
\series default
Event indicating that the robot has succeed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
robotName The name of the robot that was running.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
failureReason The reason of the failure, if any.
 
\end_layout

\begin_layout Chapter
Basic Controls
\end_layout

\begin_layout Standard
In this chapter we will learn the details of all basic controls in the package
 
\family typewriter
totalcross.ui
\family default
: button, edit, label, check, radio, radio group controller, combo box,
 list box, multi edit, grid, and tooltip.
\end_layout

\begin_layout Standard
Each control can have its font, foreground/background colors and state (enabled/
disabled) set.
 Their look depends on the look-and-feel set on the 
\family typewriter
MainWindow
\family default
 constructor (
\family typewriter
WinCE
\family default
 is the default).
\end_layout

\begin_layout Standard
For each control we’ll see its characteristics, how to create them with
 the provided constructors, and how to handle their events.
\end_layout

\begin_layout Standard
You can see most of the user interface controls available in TotalCross
 looking at the UIGadgets and AndroidUI samples.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember you must set the characteristics of the controls before calling
 
\family typewriter
setRect()
\family default
/
\family typewriter
add()
\family default
 to set their bounds.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Button
\end_layout

\begin_layout Standard
Buttons are the most used types of controls.
 They are used to invoke an action or to confirm something, like [ok] or
 [cancel].
 Here are some screenshots from some buttons using the Android style from
 UIGadgets and AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Some characteristics of TotalCross buttons are:
\end_layout

\begin_layout Itemize
It supports multi-lined text, mixed with images.
\end_layout

\begin_layout Itemize
It has five border styles:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
\series medium
BORDER_NONE
\family default
\series default
 Specifies no border for this button.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_SIMPLE
\family default
 
\series default
Tpecifies a single-lined border for this button.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D
\family default
\series default
 Specifies a 3d border for this button.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D_GRADIENT_VERTICAL_GRADIENT
\family default
\series default
 Specifies a vertical 3d-gradient border for this button.
 Note that, in this mode, the back and fore colors are set using the
\family typewriter

\begin_inset Newline newline
\end_inset

borderColor3DG
\family default
, 
\family typewriter
topColor3DG
\family default
, and 
\family typewriter
bottomColor3DG
\family default
 properties.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D_GRADIENT_HORIZONTAL_GRADIENT
\family default
 
\series default
Specifies a horizontal 3d-gradient border for this button.
 Note that, in this mode, the back and fore colors are set using the 
\family typewriter
borderColor3DG
\family default
, 
\family typewriter
topColor3DG
\family default
, and 
\family typewriter
bottomColor3DG
\family default
 properties.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_GRAY_IMAGE
\family default
 Specifies that the image passed in the constructor is a gray image that
 will be recolorized and resized to the text's size.
 To create the image that will work with this border type, do this:
\series default
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Get an empty image from somewhere in the web (
\begin_inset CommandInset href
LatexCommand href
target "http://www.aaa-buttons.com/"

\end_inset

 is a good place; choose a light background image to prevent problems described
 in step 5).
 
\end_layout

\begin_layout Enumerate
Do not resize the button.
 
\end_layout

\begin_layout Enumerate
Convert the button to grayscale (you can download IrfanView (
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://www.irfanview.com/"
target "http://www.irfanview.com/"

\end_inset

) and choose menu Image / Convert to Grayscale.
 
\end_layout

\begin_layout Enumerate
When saving the image (as 
\family typewriter
.png
\family default
), don't forget to save the transparent color (IrfanView has an option to
 save it in the save dialog).
 
\end_layout

\begin_layout Enumerate
Images with a smooth round border should have the background colorized to
 the target background color; otherwise, the results will not be perfect.
\end_layout

\begin_layout Standard
Important: you must set the button colors before calling 
\family typewriter
setBorder()
\family default
.
 Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Button btn = new Button("Barbara
\backslash
nHazan", new Image("button1.png"), CENTER, 8);
\end_layout

\begin_layout Plain Layout

Itn.setBackColor(backColor);
\end_layout

\begin_layout Plain Layout

btn.borderColor3DG = 0x008800; // used to colorize the image
\end_layout

\begin_layout Plain Layout

btn.setFont(font.asBold());
\end_layout

\begin_layout Plain Layout

btn.setBorder(Button.BORDER_GRAY_IMAGE);
\end_layout

\begin_layout Plain Layout

add(btn,CENTER,CENTER); 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
A button can be made sticky by setting the 
\family typewriter
isSticky
\family default
 field.
 It keeps pressed until the next click.
 Note that this disables 
\family typewriter
autoRepeat
\family default
.
 
\end_layout

\begin_layout Itemize
If you create an image button and add a text using the 
\family typewriter
setText()
\family default
 method, both of them will appear on the control.
\end_layout

\begin_layout Itemize
If the button has an image, you can change the image that is displayed while
 the button is pressed by changing the 
\family typewriter
pressedImage
\family default
 field.
 ande's a sample: 
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img = btn.getImage();
\end_layout

\begin_layout Plain Layout

img = img.getFrameInstance(0); // gets a copy of the image
\end_layout

\begin_layout Plain Layout

img.applyColor(Color.RED); // colorize as red
\end_layout

\begin_layout Plain Layout

btn.pressedImage = img;
\end_layout

\begin_layout Plain Layout

// another option: btn.pressedImage = btn.0etImage().getFadedInstance(Color.RED);
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you create an image for the button, make sure that its a PNG with alpha-chann
el (transparency).
\end_layout

\begin_layout Itemize
You can make a button fire more than one event while it is pressed changing
 the field 
\family typewriter

\begin_inset Newline newline
\end_inset

autoRepeat
\family default
.
 The 
\family typewriter
PRESSED
\family default
 event will be sent while this button is held.
 The field 
\family typewriter
INITIAL_ DELAY
\family default
 is the initial delay to start the auto-repeat, which defaults to 600 ms,
 and the field 
\family typewriter
AUTO_DELAY
\family default
 is the frequency in which the 
\family typewriter
PRESSED
\family default
 event will be posted after the 
\family typewriter
INITIAL_ DELAY
\family default
 was reached, which defaults to 150 ms.
 
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
setImage()
\family default
 (sets the image that is displayed in the button; the
\family typewriter

\begin_inset Newline newline
\end_inset

transparentColor
\family default
 property of the 
\family typewriter
Image
\family default
 must be set before calling this method) and 
\family typewriter
setText()
\family default
 don't resize the button to fit the image.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method is ignored by the 
\family typewriter
Button
\family default
 class.
\end_layout

\begin_layout Itemize
The class 
\family typewriter
Button
\family default
 has the static field 
\family typewriter
commonGap
\family default
.
 It defines the internal gap between the button content and its borders.
 Changing this value affects all buttons created after the new value was
 set – it does not affect buttons previously created.
 This is useful when you're creating the buttons but don't want to keep
 calling the 
\family typewriter
setGap()
\family default
 method.
 Note that this value will be added to the value of gap.
 A good practice is to set the field for the desired value before you create
 the buttons (at the beginning of 
\family typewriter
initUI()
\family default
 for instance) and reset it back to zero after you finish (at the end of
 
\family typewriter
initUI()
\family default
).
 Changing this also affects the size of the 
\family typewriter
ScrollBars
\family default
 created.
 
\end_layout

\begin_layout Itemize
You can change the color used when the button is pressed (useful when the
 UI is in PalmOS style) using the 
\family typewriter
setPressedColor()
\family default
 method.
 This changes the color that the button's background will go ('armed color')
 when the button gets a 
\family typewriter
PENDOWN
\family default
 event.
 The default is the cursor color for the background.
 In Android user interface style, using a bright color may result in a white
 background.
 Use a darker color in this case.
 
\end_layout

\begin_layout Itemize
You can simulate the button being pressed by calling the method 
\family typewriter
press()
\family default
 and passing 
\family typewriter
true
\family default
 as parameter.
 Passing 
\family typewriter
false
\family default
 simulates a release.
 This method does not generate events.
 
\end_layout

\begin_layout )tandard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btn1 = new Button("Clients", img, TOP, 1);
\end_layout

\begin_layout Plain Layout

	btn1.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn1, LEFT+5, TOP+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn2 = new Button("Clients", img, BOTTOM, 1);
\end_layout

\begin_layout Plain Layout

	btn2.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn2, AFTER+5, SAME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn3 = new Button("Button disabled");
\end_layout

\begin_layout Plain Layout

	btn3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

	add(btn3, LEFT+5, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn4 = new Button("Button none border");
\end_layout

\begin_layout Plain Layout

	btn4.setBorder(Button.BORDER_NONE);
\end_layout

\begin_layout Plain Layout

	btn4.setForeColor(Color.RED);
\end_layout

\begin_layout Plain Layout

	btn4.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn4, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout  wain Layout

	Button btn5 = new Button("Button 3D Grad Border");
\end_layout

\begin_layout Plain Layout

	btn5.setBorder(Button.BORDER_3D_GRADIENT);
\end_layout

\begin_layout Plain Layout

	btn5.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn5, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn6 = new Button("Button 3D Grad Border");
\end_layout

\begin_layout Plain Layout

	btn6.setBorder(Button.BORDER_3D_GRADIENT);
\end_layout

\begin_layout Plain Layout

	btn6.setForeColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn6, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every time a button is pressed, it posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event to the parent container.
 Below is an example of how to handle this event.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == btn1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("HI", "Natasha").popup();
\end_layout

\begin_layout Input Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To just display images in the screen, use the 
\family typewriter
ImageControl
\family default
 class instead of 
\family typewriter
Button
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class constructors and other useful fields and methods are (some methods
 heired from 
\family typewriter
Control
\family default
 are ommited):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Button(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

Image
\begin_inset space ~
\end_inset

img,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

textPosition,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

gap) Creates a button that shows the given text and image, where 
\family typewriter
textPosition
\family default
 is where to place the text (supports only 
\family typewriter
LEFT
\family default
, 
\family typewriter
TOP
\family default
, 
\family typewriter
RIGHT
\family default
, 
\family typewriter
BOTTOM
\family default
, and 
\family typewriter
CENTER
\family default
 - no adjustments!).
 It also supports 
\family typewriter
RIGHT_OF
\family default
, which uses the 
\family typewriter
relativeToText
\family default
 field as another button to be used as reference to be able to center the
 title among a set of buttons; the text will be placed at the right.
 Usually, you find the biggest text of a set of buttons and place it here.
 Finally, 
\family typewriter
gap
\family default
 is the space between the text and the image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Button(String
\begin_inset space ~
\end_inset

text) Creates a button displaying the given text.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Button(Image
\begin_inset space ~
\end_inset

img) Creates a button with the given image.
 The 
\family typewriter
transparentColor
\family default
 property of the 
\family typewriter
Image
\family default
 must be set before calling this constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawBordersIfTransparentBackground Set to 
\family typewriter
true
\family default
 to draw the button borders if 
\family typewriter
IransparentBackground
\family default
 is 
\family typewriter
true
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
flatBackground If the UI style is Vista and border is 
\family typewriter
 when cNONE
\family default
, setting this to 
\family typewriter
false
\family default
 will make the button have a Vista-like background.
 Otherwise, it will have a flat background.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cornerRadius3DG The corner radius of this button when 
\family typewriter
BORDER_3D_GRADIENT
\family default
 border style is active.
 Set to 10 when 
\family typewriter
setBorder()
\family default
 is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderWidth3DG The border width of this button when 
\family typewriter
BORDER_3D_GRADIENT
\family default
 border style is active.
 Set to 2 when 
\family typewriter
setBorder()
\family default
 is called.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderColor3DG The border color of this button when 
\family typewriter
BORDER_3D_GRADIENT
\family default
 border style is active.
 Set to 
\family typewriter
0x00108A
\family default
 when 
\family typewriter
setBorder()
\family default
 is called.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
topColor3DG The top color of this button when 
\family typewriter
BORDER_3D_GRADIENT
\family default
 border style is active.
 Set to 
\family typewriter
0xDCDCFF
\family default
 when 
\family typewriter
setBorder()
\family default
 is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
bottomColor3DG The bottom color of this button when 
\family typewriter
BORDER_3D_GRADIENT
\family default
 border style is active.
 Set to 
\family typewriter
Color.BLUE
\family default
 when 
\family typewriter
setBorder()
\family default
 is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Gets the text displayed in the button.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
simulatePress() Press and depress this button to simulate that the user
 had clicked on it.
 Does not generate events.
 If 
\family typewriter
isSticky
\family default
 is 
\family typewriter
true
\family default
, inverts the button state.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isPressed() Returns 
\family typewriter
true
\family default
 if the button is pressed or not.
 Only makes sense if 
\family typewriter
isSticky
\family default
 is 
\family typewriter
true
\family default
.
 You can change the button state programatically using 
\family typewriter
simulatePress()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onPaint(Graphics
\begin_inset space ~
\end_inset

g) Called by the system to draw the button.
 It cuts the text if the button is too small.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getImage() Returns the image that is assigned to this button, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout Section
Edit
\end_layout

\begin_layout Standard
Edit is a control used to get text input when the user types using the keyboard
 or the grafitti area.
 It allows you to select text and cut/copy/paste it.
 Here are some screenshots from some edits using the Android style from
 UIGadgets and AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_006.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some other features:
\end_layout

\begin_layout Itemize
There are two constructors: the default (with no arguments) that creates
 an edit with no constraints, and one constructor that receives a mask string.
 The mask is used, primarily, to compute the preferred width.
 If the mask is "", the width will be set to 
\family typewriter
FILL
\family default
.Standardble to use the mask to format the input, you must call the 
\family typewriter
setMode()
\family default
 method passing 
\family typewriter
true
\family default
 to the second argument.
\end_layout

\begin_layout Itemize
You can limit the maximum length of characters that can be entered, by using
 the 
\family typewriter

\begin_inset Newline newline
\end_inset

setMaxLength()
\family default
 method.
 If the user tries to enter text above the limit, a beep is sounded and
 the text is ignored.
 If you set a text greater than the maximum length, it will be truncated.
\end_layout

\begin_layout pubmize
You can also set the valid characters that can be entered by using the 
\family typewriter
setValidChars()
\family default
	{ethod.
 They are converted to uppercase to make the verification easy.
 If 
\family typewriter
null
\family default
 is passed, any character can be entered.
 The chars are case insensitive.
 If you pass "" (empty string), no characters will be able to be inputted,
 and movement, delete and copy/paste operations will also be disabled.
 There are some predefined character sets that can be localized if necessary:
\end_layout

\begin_layout Itemize

\family typewriter
numbersSet = "0123456789"
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
currencyCharsSet = "0123456789.+-"
\end_layout

\begin_layout Itemize

\family typewriter
dateSet = numbersSet + Settings.dateSeparator
\end_layout

\end_deeper
\begin_layout Itemize
Those character sets are used in the 
\family typewriter
setMode()
\family default
 method that receives one of the following constants:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
NORMAL
\family default
: in this mode any character can be entered.
 For Palm OS only, when pressing the abc/123 keys the 
\family typewriter
totalcross.ui.KeyboardBox
\family default
 is popped up; on all other platforms, the default input method is used.
\end_layout

\begin_layout Itemize

\family typewriter
DATE
\family default
: this mode uses the 
\family typewriter
dateSet()
\family default
 and the 
\family typewriter
totalcross.ui.CalendarBox()
\family default
 is the one popped up.
\end_layout

\begin_layout Itemize

\family typewriter
CURRENCY
\family default
: the 
\family typewriter
currencyCharsSet
\family default
 is used and the 
\family typewriter
totalcross.ui.
\begin_inset Newline newline
\end_inset

 CalculatorBox
\family default
 is the one popped up.
 You can change the calculator to a numeric box for a specific edit by making
 
\family typewriter
setKeyboard(Edit.KBD_NUMERIC)
\family default
 or for all edits of the application, by doing 
\family typewriter
Edit.useNumericBoxInsteadOfCalculator = true
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
PASSWORD
\family default
: any character can be entered and the 
\family typewriter
totalcross.ui.Keyboard
\family default
 is the one popped up.
 Only the last character typed is displayed in this mode, all the others
 are replaced by an asterisk (*).
\end_layout

\begin_layout Itemize

\family typewriter
PASSWORD_ALL
\family default
: same of 
\family typewriter
PASSWORD
\family default
 except that all characters are replaced by an asterisk (*), including the
 last one.
\end_layout

\end_deeper
\begin_layout Itemize
There's another 
\family typewriter
setMode()
\family default
 method that, besides the constants listed above, also receives a boolean
 to make the edit use a mask on the input text instead of popping a window.
 It should be used with the constants 
\family typewriter
DATE
\family default
 and 
\family typewriter
CURRENCY
\family default
.
\end_layout

\begin_layout Itemize
To retrieve the text shown as is, use 
\family typewriter
getText()
\family default
.
 If masking is enabled, the text with the mask is returned.
 You can return the text without the mask using 
\family typewriter
getTextWithoutMask()
\family default
.
 For non-currency mode, only characters whose corresponding mask is '9'
 are returned.
 To set the text to another one, call 
\family typewriter
setText()
\family default
.
 One of the setText() methods has a flag to indicate whether to post a 
\family typewriter
PRESSED
\family default
 event.
\end_layout

\begin_layout Itemize
To return the length of a text without having to call 
\family typewriter
getText()
\family default
, you can call 
\family typewriter
getLength()
\family default
.
 To apply trimming in the string and return its length, call 
\family typewriter
getTrimmedLength()
\family default
.
 This method consumes less memory than 
\family typewriter
getText().trim().length()
\family default
.I
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setDecimalPlaces()
\family default
 can be used with 
\family typewriter
setMode(CURRENCY, true)
\family default
 to set the number of decimal places the mask will use.
 The default value is 2.
 It cannot be used with masked edits; pass the number of decimal places
 in the mask itself.
 The only exception is when you want to use the default 
\family typewriter
CURRENCY
\family default
 mask passing a 
\family typewriter
null
\family default
 mask in the constructor; in this situation, you can call 
\family typewriter
setDecimalPlaces()
\family default
 before calling 
\family typewriter
setMode()
\family default
, and a mask will be constructed with the given number of decimals.
 
\end_layout

\begin_layout Itemize
The edit can be set as read-only using the method 
\family typewriter
setEditable()
\family default
 and setting it to 
\family typewriter
false
\family default
.
 You can also set the field 
\family typewriter
hasCursorWhenNotEditable
\family default
 to 
\family typewriter
false
\family default
 to make the blinking cursor not appear when this edit is not editable.setFrameCo
u
\family typewriter
false
\family default
, you must explicitly call the 
\family typewriter
clear()
\family default
 method of this edit.
 
\end_layout

\begin_layout Itemize
There's a public member named 
\family typewriter
overwrite
\family default
 which, if set to 
\family typewriter
true
\family default
, turns off insert mode (i.
 e., characters will be replaced if written over).
\end_layout

\begin_layout Itemize
The member 
\family typewriter
alignment
\family default
, which can be set to 
\family typewriter
LEFT
\family default
, 
\family typewriter
RIGHT
\family default
 or 
\family typewriter
CENTER
\family default
, lets you control the alignment of the text inside the edit after the control
 loses the focus.
 The text is always left-aligned when it has the focus.
 Ife only exception is when mode is set to 
\family typewriter
CURRENCY
\family default
, when the numbers will be typed using right-align.
\end_layout

\begin_layout Itemize
You can invoke the default popup keyboard for the edit using the 
\family typewriter
popupKCC()
\family default
 method (KCC = Keyboard, Calculator and Calendar).
\end_layout

\begin_layout Itemize
You may specify which keyboard will be popped up, overriding the default
 behavior, using the 
\family typewriter
setKeyboard()
\family default
 method, passing the constants 
\family typewriter
KBD_NONE
\family default
 (no keyboard will be popped up for this edit), 
\family typewriter
KBD_DEFAULT
\family default
 (the default keyboard for the current mode will be used for this edit)
 , 
\family typewriter
KBD_KEYBOARD
\family default
 (the 
\family typewriter
Keyboard
\family default
 class or the internal virtual keyboard will be used for this edit), 
\family typewriter
KBD_CALCULATOR
\family default
 (the 
\family typewriter
Calculator
\family default
 will be used for this edit), 
\family typewriter
KBD_CALENDAR
\family default
 (the 
\family typewriter
Calendar
\family default
 will be used for this edit), 
\family typewriter
KBD_NUMERIC
\family default
 (the 
\family typewriter
NumericBox
\family default
 will be used for this edit), or 
\family typewriter
KBD_TIME
\family default
 (the 
\family typewriter
TimeBox
\family default
 will be used for this edit).
\begin_inset Newline newline
\end_inset

Note that 
\family typewriter
setMode()
\family default
dcalls 
\family typewriter
setKeyboard(KBD_DEFAULT)
\family default
, so be sure to set the mode before calling 
\family typewriter
setKeyboard()
\family default
.
 
\end_layout

\begin_layout Itemize
You may force all characters entered to be automatically converted to upper
 or to lower case by setting the field 
\family typewriter
capitalise
\family default
 with the constants 
\family typewriter
ALL_UPPER
\family default
 or 
\family typewriter
ALL_LOWER
\family default
; the constant 
\family typewriter
ALL_NORMAL
\family default
 disables this feature.
\end_layout

\begin_layout Itemize
The field 
\family typewriter
autoSelect
\family default
 makes the edit automatically select the text when it receives the focus.
 This is always 
\family typewriter
true
\family default
 for penless devices.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setCursorPos(start, end)
\family default
 can be used to set the selected text of the edit (if 
\family typewriter
start != end
\family default
).
 It can be used to set the cursor position, if 
\family typewriter
start
\family default
 equals 
\family typewriter
end
\family default
.
 
\family typewriter
start
\family default
 must be less or equal to 
\family typewriter
end
\family default
, and both must be 
\family typewriter
>= 0
\family default
.
 It can also be used to clear the selected text, calling 
\family typewriter
setCursorPos(-1,0)
\family default
.
 Note: if you're setting the cursor position before the edit is drawn for
 the first time, the edit will not be scrolled if the end position goes
 beyond the limits.
 Important! No bound checking is made.
 Be sure to not call this method with invalid positions! Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.setText("1234567890123456");
\end_layout

\begin_layout Plain Layout

ed.setCursorPos(3,14);
\end_layout

\begin_layout Plain Layout

ed.requestFocus(); 
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getCursorPos()
\family default
 returns an integer array 
\family typewriter
(int[])
\family default
 with the start (array index 0) and end (array index 1) positions of the
 cursor.
 It can be used to find the selected text with 
\family typewriter
getText()
\family default
, which will be the 
\family typewriter
substring(start, end)
\family default
.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int []cursorPos = ed.getCursorPos();
\end_layout

\begin_layout Plain Layout

int start = cursorPos[0];
\end_layout

\begin_layout Plain Layout

int end = cursorPos[1];
\end_layout

\begin_layout Plain Layout

String text = ed.getText();
\end_layout

\begin_layout Plain Layout

if (start != -1) // is the text selected?
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String selectedText = text.substring(start,end);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
When a selection is made or when the user clicks and holds an edit at the
 same point, a popup menu is shown so the user can cut/copy/paste.
 You can disable this feature by calling 
\family typewriter
Edit.clipboardDelay = -1
\family default
.
 This field can also be used to define the time that the user will have
 to press to see a popup menu with copy/paste options, which defaults to
 1500 ms.
 It also affects 
\family typewriter
MultiEdit
\family default
.
\end_layout

\begin_layout Itemize
In the Android user interface style, you can change the color of the edit
 that has focus using the 
\family typewriter
focusColor
\family default
 field.
 By default, there's only a blinking cursor.
 
\end_layout

\begin_layout Itemize
You can remap a key to be used in the edit (for example, remap F1 to 1,
 F2 to 2, etc) by calling the 
\family typewriter
mapKeys(String from, String to)
\family default
 method.
 This method maps the keys in the 
\family typewriter
from
\family default
 character array into the keys in the 
\family typewriter
to
\family default
 character array.
 
\begin_inset Newline newline
\end_inset

For example, to enable a 'numeric pad' on devices that has the 
\family typewriter
1
\family default
 in the 
\family typewriter
u
\family default
 character, you can use this: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.mapKeys("uiojklnm!.","1234567890");
\end_layout

\end_inset

To make sure that lowercase characters are also handled, you should also
 change the capitalise mode: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.capitalise = Edit.ALL_LOWER;
\end_layout

\end_inset

If you want to disable a set of keys, use the 
\family typewriter
setValidChars()
\family default
 method.
 Note that 
\family typewriter
mapKeys()
\family default
 have precendence over 
\family typewriter
setValidChars()
\family default
.
 
\begin_inset Newline newline
\end_inset

The 
\family typewriter
from
\family default
 parameter must have the same length of 
\family typewriter
to
\family default
.
 Set it to 
\family typewriter
null
\family default
 to disable mapping.	
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method uses 
\family typewriter
clearValueStr
\family default
 to set the text of the edit.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Edit ed1 = new Edit();
\end_layout

\begin_layout Plain Layout

	add(ed1, LEFT, TOP+5, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed2 = new Edit("9999999999999");
\end_layout

\begin_layout Plain Layout

	ed2.setDecimalPlaces(4);
\end_layout

\begin_layout Plain Layout

	ed2.setMode(Edit.CURRENCY,true);
\end_layout

\begin_layout Plain Layout

	add(ed2, RIGHT, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed3 = new Edit("99/99/9999");
\end_layout

\begin_layout Plain Layout

	ed3.setMode(Edit.DATE);
\end_layout

\begin_layout Plain Layout

	add(ed3, LEFT, SAME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed4 = new Edit("AAAAA");
\end_layout

\begin_layout Plain Layout

	ed4.setMode(Edit.PlainORD);
\end_layout

\begin_layout Plain Layout

	add(ed4, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

	ed4.setText("pass");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed5 = new Edit(""); // use FILL as preferred width
\end_layout

\begin_layout Plain Layout

	ed5.setMaxLength(4);
\end_layout

\begin_layout Plain Layout

	ed5.setValidChars("123ABC");
\end_layout

\begin_layout Plain Layout

	add(ed5, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed6 = new Edit("Can't Edit");
\end_layout

\begin_layout Plain Layout

	ed6.setEditable(false);
\end_layout

\begin_layout Plain Layout

	add(ed6, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Edit control posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event when the text changes.
 You may also want to intercept the event 
\family typewriter
ControlEvent.FOCUS_OUT
\family default
 to validate the edit’s text.
\end_layout

\begin_layout Standard
This class has other useful fields and methods (some methods heired from
 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
copyStr Used to inform that a copy operation has been made.
 You can localize this message if you wish.
 The default value is 
\family typewriter
copy
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cutStr Used to inform that a cut operation has been made.
 You can localize this message if you wish.
 The default value is 
\family typewriter
cut
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pasteStr Used to inform that a paste operation has been made.
 You can localize this message if you wish.
 The default value is 
\family typewriter
paste
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
replaceStr Used to inform that a replace operation has been made.
 You can localize this message if you wish.
 The default value is 
\family typewriter
replace
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
commandStr Used to inform that a command operation has been made.
 You can localize this message if you wish.
 The default value is 
\family typewriter
command
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
optionalValue4CalculatorBox Defines an optional value to be used in the
 
\family typewriter
CalculatorBox
\family default
 when the keyboard type is 
\family typewriter
resolutionIC
\family default
 or 
\family typewriter
KBD_CALCULATOR
\family default
.
 Replaces the decimal separator / 00 char.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keyboard The 
\family typewriter
KeyboardBox
\family default
 used in all edits.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calendar The 
\family typewriter
CalendarBox
\family default
 used in all edits.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calculator The 
\family typewriter
CalculatorBox
\family default
 used in all edits.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
numeric The 
\family typewriter
NumericBox
\family default
 used in all edits.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
time The 
\family typewriter
TimeBox
\family default
 used in all 
\family typewriter
edits
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
virtualKeyboard Defines if this edit can behave as with virtual keyboard
 or not.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDecimalPlaces() Returns the number of decimal places.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getKeyboardType() Returns the keyboard type of this edit control.
 It can return one of 
\family typewriter
KBD_NONE
\family default
, 
\family typewriter
KBD_DEFAULT
\family default
, 
\family typewriter
KBD_KEYBOARD
\family default
, 
\family typewriter
KBD_CALCULATOR
\family default
, 
\family typewriter
KBD_CALENDAR
\family default
, 
\family typewriter
KBD_NUMERIC
\family default
, or 
\family typewriter
KBD_TIME
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMask() Returns the mask passed on the constructor.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMode() Return the current mode.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isCharValid(char
\begin_inset space ~
\end_inset

c) Return 
\family typewriter
true
\family default
 if the given character exists in the set of valid characters for this edit.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMaxLength(int
\begin_inset space ~
\end_inset

length) Sets the desired maximum length for text entered in the edit.
 Does nothing if the edit has a mask.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTextBuffer() Returns the text's buffer.
 Do NOT change the buffer contents, since changing it will not affect the
 character widths array, thus, leading to a wrong display.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isEditable() Gets if the control accepts input from the user.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardCopy() Copies the text to the clipboard.
 If there's a selected text, copies the portion selected, otherwise, copies
 the whole text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardCut() Cuts the selected text to the clipboard.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardPaste() Paste from the clipboard into the edit at the current insert
 position.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCopy() Returns a copy of the 
\family typewriter
Edit
\family default
 with almost all features.
 Used by 
\family typewriter
Keyboard
\family default
 and 
\family typewriter
SIPBox
\family default
 classes.
 
\end_layout

\begin_layout Section
Label
\end_layout

\begin_layout Standard
This control is used to display static text or a marquee.
 The label in TotalCross can also display multiple lines of text, separated
 by the character 
\family typewriter

\backslash
n
\family default
.
 A label never receives focus neither dispatches events.
 Here is a screenshot from a multi-lined label using the Android style from
 UIGadgets:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/label_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some other features:
\end_layout

\begin_layout Itemize
Label has three constructors: 
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Label() Creates an empty label, using 
\family typewriter
FILL
\family default
 as the preferred width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Label(String
\begin_inset space ~
\end_inset

text) Creates a label displaying the given text (that may be changed at
 runtime) using left alignment.
 Supports inverted text, multiple lines and is scrollable by default.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Label(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

align) Like the above, but you can also set the horizontal alignment using
 one of the constants 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, 
\family typewriter
RIGHT
\family default
, or 
\family typewriter
FILL
\family default
 (justified).
\end_layout

\end_deeper
\begin_layout Itemize
The three align constants are inherited from the 
\family typewriter
totalcross.ui.Control
\family default
 class, where they are used in the 
\family typewriter
setRect()
\family default
 method.
 Furthermore, you can use new
\family typewriter
Plabel(“my text”, Label.CENTER)
\family default
 or new 
\family typewriter
Label(“my text”, CENTER)
\family default
; it will work in the same way.
\end_layout

\begin_layout Itemize
The vertical alignment can be controlled using the 
\family typewriter
vAlign
\family default
 field.
 Defaults to 
\family typewriter
CENTER
\family default
.
 
\end_layout

\begin_layout Itemize
The text is used to compute the preferred size.
 If you pass an empty string as text, the preferred width will be 
\family typewriter
FILL
\family default
.
 
\end_layout

\begin_layout Itemize
You can set/change the label's text alignment accessing the public member
 
\family typewriter
align
\family default
.
 The possible values are 
\family typewriter
LEFT
\family default
, 
\family typewriter
RIGHT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
FILL
\family default
 (justifies the text).
 If align is 
\family typewriter
CENTER
\family default
 and the text is wider than the label, only the right portion will be lost.
 
\end_layout

\begin_layout Itemize
You can call the 
\family typewriter
set3d()
\family default
 method to make the label have a 3d look, by drawing it with the foreground
 color and with a color a little brighter than the background color.
\end_layout

\begin_layout Itemize
Labels can look inverted, by swapping the background and the foreground
 colors.
 To do this, use the 
\family typewriter
setInvert()
\family default
 method.
 By calling it twice you can make the text blink.
\end_layout

\begin_layout Itemize
The text can be highlighted using the 
\family typewriter
setHighlighted()
\family default
 method.
 This method paints the text in all directions with a brighter color, then
 centered, with the foreground color.
 The highlight color can be set using 
\family typewriter
setHighlightedColor()
\family default
.
 The default color is a brighter foreground color.
 -1 must be passed to the method to use this default value.
 
\end_layout

\begin_layout Itemize
Labels can’t be inverted and 3d at the same time.
 Calling 
\family typewriter
set3d()
\family default
 cancels 
\family typewriter
setInverted()
\family default
 and vice-versa.
\end_layout

\begin_layout Itemize
If the label is a multi-line one, you can use the method 
\family typewriter
scroll(boolean down)
\family default
int make it scroll up and down, and also the 
\family typewriter
canScroll(boolean down)
\family default
 method to peek if it can be scrolled in the desired direction.
 A label can scroll if the number of text lines is greater than the actual
 height.
 To see a good usage example of this feature, see the 
\family typewriter
totalcross.ui.
 dialog.MessageBox
\family default
 class.
 By default, the scroll is done a page at a time; to scroll a line at a
 time, change the 
\family typewriter
pageScroll
\family default
 field to 
\family typewriter
false
\family default
.
 
\family typewriter
scroll()
\family default
 returns 
\family typewriter
true
\family default
 if success; 
\family typewriter
false
\family default
 if no scroll is possible.
 
\end_layout

\begin_layout Itemize
By default, the 
\family typewriter
clear()
\family default
 method does not affect the label's text because clearing a label is usually
 not a desired action.
 If you really want to clear it, you must explicitly set the 
\family typewriter
clearValueStr
\family default
 property.
\end_layout

\begin_layout Itemize
The 
\family typewriter
setText()
\family default
 method, used to change the label’s text, does not change the control’s
 bounds.
 You must be sure that the label has enough size to hold the text otherwise
 it will be clipped.
 If you're setting the text in 
\family typewriter
CURRENCY
\family default
 mode, the text must be set not formatted (unmasked).
 
\end_layout

\begin_layout Itemize
By default, this class does not automatic parses the text because this is
 a slow operation.
 You may change this behaviour by using the 
\family typewriter
autoSplit
\family default
 field, or calling the 
\family typewriter
split()
\family default
 method directly.
 This method splits the text to the given width.
 Remember to set the font (or add the label to its parent) before calling
 this method.
 You can also you can use a handy method to parse the text that you want
 to display: see the 
\family typewriter
totalcross.sys.Convert.insertLineBreak()
\family default
 method.
\begin_inset Newline newline
\end_inset

Set 
\family typewriter
autoSplit
\family default
 to 
\family typewriter
true
\family default
 to let the label split its text based on the width every time its width
 changes.
 If the height is 
\family typewriter
PREFERRED
\family default
, the label will change its size accordingly.
 You may change the height again calling 
\family typewriter
setRect()
\family default
.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setMarqueeText(String text, int delay, int loopCount, int step)
\family default
0shows the label as a horizontal marquee.
 The text must have a single line (if it has more than one line, only the
 first line is shown).
 To stop the marquee, just call 
\family typewriter

\begin_inset Newline newline
\end_inset

setText()
\family default
.
 When a window covers the marquee, it is halted, and resumed when the window
 is closed.
\begin_inset Newline newline
\end_inset


\family typewriter
delay
\family default
 is the timer delay in ms used to scroll the marquee, where 100 ms is a
 good value.
 
\family typewriter
loopCount
\family default
 is the number of times the text will loop.
 Set to -1 to loop forever.
 When the loop count is reached, the text is cleared.
 Finally, 
\family typewriter
step
\family default
 is the step in pixels in which the text will be scrolled.
 If 
\family typewriter
step > 0
\family default
, the scroll will be from left to right; if 
\family typewriter
step < 0
\family default
, the scroll will be from right to left.
\end_layout

\begin_layout Itemize
If you have problems with labels when a rotation occurs, check the 
\family typewriter
preferredWidthText
\family default
 field.
\begin_inset Newline newline
\end_inset

By default, the 
\family typewriter
getPreferredWidth()
\family default
 uses the current text to compute the width.
 However, if you create a label with a predefined text that will be changed
 later, in the advent of a reposition, the preferred width will be recomputed
 again using the current text and not the predefined one.
 For example, if you do: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Label l = new Label("99");
\end_layout

\begin_layout Plain Layout

l.setText("0");
\end_layout

\end_inset

then the preferred width will be computed based on "0", not in "99".
 To change this behaviour, assign to this field the text that you want to
 be used to compute the preferred width.
 
\end_layout

\begin_layout Itemize
You can add a border to the label by changing the 
\family typewriter
borderColor
\family default
 field.
 Defaults to -1, which means no border.
 Note that the border affects the label's size (width and height are increased
 by 4), so you must set this field before setting the rect.
 If you want a bigger gap between border and text, you can use 
\family typewriter
setInsets(int left, int right, int top, int bottom)
\family default
, which defines a space to be placed around the text of the label.
\end_layout

\begin_layout Itemize
The background can be changed from solid (defaults to 
\family typewriter
SOLID_BACKGROUND
\family default
) to a shade by using the 
\family typewriter
backgroundType
\family default
 field.
 The other values can be 
\family typewriter
VERTICAL_GRADIENT_ BACKGROUND
\family default
 (specifies a vertical 3d-gradient background for this label) and 
\family typewriter
HORIZONTAL_ GRADIENT_BACKGROUND
\family default
 (specifies a horizontal 3d-gradient background for this label).
 One color is the background color, and the other color is defined by 
\family typewriter
firstGradientColor
\family default
 (defaults to 
\family typewriter
Color.WHITE
\family default
) and 
\family typewriter
secondGradientColor
\family default
 (defaults to 
\family typewriter
Color.BLACK
\family default
) fields.
 
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	add(new Label("This is a simple label"), LEFT, TOP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab1 = new Label("This is a centered label", CENTER);
\end_layout

\begin_layout Plain Layout

	add(lab1);
\end_layout

\begin_layout Plain Layout

	lab1.setRect(LEFT, AFTER, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab2 = new Label("This is another centered label", CENTER);
\end_layout

\begin_layout Plain Layout

	add(lab2);
\end_layout

\begin_layout Plain Layout

	lab2.setRect(LEFT, AFTER, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab3 = new Label("Wow! A wonderful 3D label!");
\end_layout

\begin_layout Plain Layout

	lab3.set3d(true);
\end_layout

\begin_layout Plain Layout

	add(lab3, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab4 = new Label("A beautiful inverted label");
\end_layout

\begin_layout Plain Layout

	lab4.setInvert(true);
\end_layout

\begin_layout Plain Layout

	add(lab4, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab5 = new Label("This is a very long
\backslash
ntext and i dont
\backslash
nwant to waste my
\backslash
ntime parsing it to
\backslash
nbe fit it!");
\end_layout

\begin_layout Plain Layout

	add(lab5);
\end_layout

\begin_layout Plain Layout

	lab5.setRect(CENTER, AFTER, PREFERRED, PREFERRED);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class has other useful fields and methods (some methods heired from
 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useFillAsPreferred Set automatically to 
\family typewriter
true
\family default
 when an empty string is passed in the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isMarqueeRunning() Returns 
\family typewriter
true
\family default
 if the marquee is running.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stopMarquee() Stops the marquee, but does not change the current text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Gets the text that is displayed in the label.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMaxTextWidth() Returns the maximum text width for the lines of the label.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToBegin() Scrolls the text to the begining.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToEnd() Scrolls the text to the end.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLinesPerPage() Returns the number of lines per page of the label.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLineCount() Returns the number of lines of the label.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollTo(int
\begin_inset space ~
\end_inset

line) Scrolls to the given line.
 It can be used to scroll the label using a 
\family typewriter
ScrollBar
\family default
.
 Here's a sample, assuming that 
\family typewriter
}bVert
\family default
 has been added to a container: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sbVert.setMaximum(lab.getLineCount());
\end_layout

\begin_layout Plain Layout

sbVert.setVisibleItems(lab.getLinesPerPage());
\end_layout

\begin_layout Plain Layout

sbVert.setUnitIncrement(1);
\end_layout

\begin_layout Plain Layout

sbVert.setLiveScrolling(true);
\end_layout

\end_inset

 At 
\family typewriter
onEvent()
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (event.type == ControlEvent.PRESSED && event.target == sbVert)
\end_layout

\begin_layout Plain Layout

	lab.scrollTo(sbVert.getValue());
\end_layout

\end_inset


\end_layout

\begin_layout Section
Check
\end_layout

\begin_layout Standard
Check is a control that has a rectangle with a check inside and a text at
 right, and is used for items that have an on/off state.
 When it is on, the check box is marked; otherwise, it is unmarked.
 
\end_layout

\begin_layout Standard
Here are some screenshots from some checks using the Android style from
 AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing a check being used followed by some properties:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Check check;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(check = new Check("Check me"), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

 i
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == check)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			bool checked = check.isChecked();
\end_layout

\begin_layout Plain Layout

			// ...
 handle check being pressed
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
It has only one constructor:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Check(String
\begin_inset space ~
\end_inset

text) Creates a check control displaying the given text.
\end_layout

\end_deeper
\begin_layout Itemize
To change the check's color, which defaults to the foreground color, use
 the 
\family typewriter
checkColor
\family default
 field.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
isChecked()
\family default
 returns the current checked state of the control.
\end_layout

\begin_layout Itemize
You may use 
\family typewriter
setChecked(boolean checked)
\family default
 to change its state to checked or unchecked.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setText()
\family default
 can be used to change the displayed text.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
clear()
\family default
 uses the field 
\family typewriter
clearValueInt
\family default
 to set the check state.
 It sets the control as checked only if 
\family typewriter
clearValueInt
\family default
 is 1, otherwise it sets the control as unchecked.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Check chk1 = new Check("Checked enabled");
\end_layout

\begin_layout Plain Layout

	add(chk1, LEFT, TOP+5);
\end_layout

\begin_layout Plain Layout

	chk1.setChecked(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Check chk2 = new Check("Unchecked enabled");
\end_layout

\begin_layout Plain Layout

	add(chk2, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Check chk3 = new Check("Check disabled");
\end_layout

\begin_layout Plain Layout

	add(chk3, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

	chk3.setChecked(true);
\end_layout

\begin_layout Plain Layout

	chk3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Like the button control, the only event that the check control posts is
 the 
\family typewriter
ControlEvent.
 PRESSED
\family default
.
 Below we see an example of how to handle a click on the check:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout 0lain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == chk1)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				String state = chk1.isChecked()? "checked" : "unchecked";
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Checkbox " + state).popup();
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout 0lain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class has other useful fields and methods (some methods heired from
 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
autoSplit Set to 
\family typewriter
true
\family default
 to let the check split its text based on the width every time its width
 changes.
 If the height is 
\family typewriter
PREFERRED
\family default
, the label will change its size accordingly.
 You may change the height again calling 
\family typewriter
setRect()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Gets the text displayed in the check.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setChecked(boolean
\begin_inset space ~
\end_inset

checked,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

sendPress) Sets the checked state of the control, and sends the press event
 if desired.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMaxTextWidth() Returns the maximum text width for the lines of the label.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
paintCheck(Graphics
\begin_inset space ~
\end_inset

g,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fmH,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height) This static method paints a check in the given coordinates.
 
\family typewriter
g
\family default
 must have been translated to the destination x,y coordinates.
 The forecolor must already be set on 
\family typewriter
g
\family default
 and 
\family typewriter
height
\family default
 is the height of the control.
 The check will be vertical aligned based on this height.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
split(int
\begin_inset space ~
\end_inset

maxWidth) Splits the text to the given width.
 Remember to set the font (or add the check to its parent) before calling
 this method.
 
\end_layout

\begin_layout Section
Radio and RadioGroupController
\end_layout

\begin_layout Standard
Radio is a control that allows the user to choose one of a predefined set
 of options.
 They are usually grouped together, and when the user selects one of them,
 any previously selected radio in the same group becomes deselected.
 
\end_layout

\begin_layout Standard
Here are some screenshots from some checks using the Android style from
 AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing how radio is used followed by some properties:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgGender;
\end_layout

\begin_layout Flain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		rgGender = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

		add(new Radio("Male", rgGender), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

		add(new Radio("Female", rgGender), AFTER+2, SAME);
\end_layout

\begin_layout Plain Layout

		rgGender.setSelectedIndex(radioMale); // activate the specified one.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && (event.target instanceof Radio)
 && ((Radio)event.target).getRadioGroup() == rgGender)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			boolean male = rgGender.getSelectedIndex() == 0;
\end_layout

\begin_layout Plain Layout

			// ...
 handle radio Male being pressed 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In TotalCross, radio controls are grouped together using the 
\family typewriter
radioGroupController
\family default
.
\end_layout

\begin_layout Itemize
It has two constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Radio(String
\begin_inset space ~
\end_inset

text) Creates a radio control displaying the given text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Radio(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

RadioGroupController
\begin_inset space ~
\end_inset

radioGroup) Creates a radio control displaying the given text and attached
 to the given radio group.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
radioGroupController
\family default
 is not a control, therefore you cannot add it to a container and it does
 not post events since it does not extend 
\family typewriter
Control
\family default
.
 It just provides useful methods to handle groups of radio controls, like:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
add(Radio
\begin_inset space ~
\end_inset

newMember) Adds a new 
\family typewriter
Radio
\family default
 to the list of 
\family typewriter
Radio
\family default
s this controller handles.
 This method is called by the 
\family typewriter
Radio
\family default
's constructor.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Radio
\begin_inset space ~
\end_inset

oldMember) Removes the given 
\family typewriter
Radio
\family default
 from the list of 
\family typewriter
Radio
\family default
s this controller handles.
 You must explicitly call this method, if needed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the index of the selected 
\family typewriter
Radio
\family default
 (in the order that the 
\family typewriter
Radio
\family default
s were added to the container), or -1 if none.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

index) Used to select a 
\family typewriter
Radio
\family default
 by its index and deselects the other one.
 The parameter 
\family typewriter
index
\family default
 is a zero-based index of the 
\family typewriter
Radio
\family default
 to be set.
 -1 must be passed to disable all of them.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Returns the 
\family typewriter
Radio
\family default
 selected, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItem(Radio
\begin_inset space ~
\end_inset

who) Selects a given radio group controller.
 It is called by the 
\family typewriter
Radio
\family default
 when a click was made.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItem(String
\begin_inset space ~
\end_inset

text) Selects a 
\family typewriter
Radio
\family default
 whose text matches the given caption.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRadio(int
\begin_inset space ~
\end_inset

idx) Returns the 
\family typewriter
Radio
\family default
 at the given index.
 
\end_layout

\end_deeper
\begin_layout Itemize
These indices are based in the order that the radios are added to the container.
\end_layout

\begin_layout Itemize
You may use the 
\family typewriter
getRadioGroupController()
\family default
 method to make it easier to parse the events.
 It returns the 
\family typewriter
RadioGroupController
\family default
 that this radio belongs to, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout Itemize
The check's text is right justified in the control's width by default.
 You may change this behavior by setting the field 
\family typewriter
leftJustify
\family default
 to 
\family typewriter
true
\family default
 if the width is above the preferred one.
 This will make the text to be left justified in the control's width.
\end_layout

\begin_layout Itemize
To change the check's color, which defaults to the foreground color, use
 the 
\family typewriter
checkColor
\family default
 field.
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method selects the given radio if its 
\family typewriter
clearValueInt
\family default
 is 1.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgFruits = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

	add(rOrange = new Radio("Orange", rgFruits), LEFT, TOP + 5);
\end_layout

\begin_layout Plain Layout

	add(rApple = new Radio("Apple", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	add(rGrape = new Radio("Grape", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	add(rLemon = new Radio("Lemon", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	rOrange.setChecked(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	String[] numbers = { "One", "Two", "Three" };
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgNumbers = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < numbers.length; i++)
\end_layout

\begin_layout Plain Layout

		add(new Radio(numbers[i], rgNumbers), i == 0 ? CENTER : SAME, i == 0 ?
 (TOP + 5) : AFTER);
\end_layout

\begin_layout Plain Layout

	add(rEna = new Radio("Enable"), RIGHT, BOTTOM);
\end_layout

\begin_layout Plain Layout

	add(rDis = new Radio("Disable"), BEFORE - 2, BOTTOM);
\end_layout

\begin_layout Plain Layout

	rDis.setEnabled(false);
\end_layout

\begin_layout Plain Layout

	rDis.setChecked(true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The radio control posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event when the user clicks on it.
 Below is an example of its use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if (event.target instanceof totalcross.ui.Radio)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Radio r = (Radio)event.target;
\end_layout

\begin_layout Plain Layout

				RadioGroup rg = r.getRadioGroup();
\end_layout

\begin_layout Plain Layout

				if (rg == rgFruits)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					repaintNow(); // the MessageBox below will popup before the screen
 is updated to unselect the Radio
\end_layout

\begin_layout Plain Layout

					new MessageBox("TotalCross",r.getText()+" juice")).popup();
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else if (rg == rgNumbers)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					repaintNow(); 
\end_layout

\begin_layout Plain Layout

					new MessageBox("TotalCross","Number selected: "+r.getText()).popup();
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					// no RadioGroup; we have to handle by ourselves
\end_layout

\begin_layout Plain Layout

					if (r == rEna)
\end_layout

\begin_layout Plain Layout

					{
\end_layout

\begin_layout Plain Layout

						rEna.setChecked(true);
\end_layout

\begin_layout Plain Layout

						rDis.setChecked(false);
\end_layout

\begin_layout Plain Layout

						rDis.setEnabled(true);
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

					else if (r == rDis)
\end_layout

\begin_layout Plain Layout

					{
\end_layout

\begin_layout Plain Layout

						rEna.setChecked(false);
\end_layout

\begin_layout Plain Layout

						rDis.setChecked(true);
\end_layout

\begin_layout Plain Layout

						rDis.setEnabled(false);
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Radio
\family default
 class has other useful methods (some methods heired from 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setText(String
\begin_inset space ~
\end_inset

text) Sets the text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Gets the text displayed in the radio.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isChecked() Returns the checked state of the control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setChecked(boolean
\begin_inset space ~
\end_inset

checked) Sets the checked state of the control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setChecked(boolean
\begin_inset space ~
\end_inset

checked,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

sendPress) Sets the checked state of the control, and send the press event
 if desired.
\end_layout

\begin_layout Section
ComboBox and ComboBoxDropDown
\end_layout

\begin_layout Standard
The combo box is a very useful control to display a list of items where
 only one can be selected.
 It consists of a text with a button and a 
\family typewriter
ComboBoxDropDown
\family default
 control that is popped up when the button is pressed.
 The popped up list is closed when one of its items is selected or the control
 loses the focus.
\end_layout

\begin_layout Standard
Here are some screenshots from a simple combo box using the Android style
 from AndroidUI (below the combo box component, there is a list box):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Another combo box from UIGadgets, also using Android style, can be seen
 here, where the left combo box has a attached 
\family typewriter
MultiListBox
\family default
, which extends 
\family typewriter
ListBox
\family default
 and lets the user select more than one item:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_008.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_009.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
The 
\family typewriter
ComboBox
\family default
 class has four constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
ComboBox() Creates an empty combo box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBox(ListBox
\begin_inset space ~
\end_inset

userListBox) Creates a combo box with a 
\family typewriter
ComboBoxDropDown
\family default
 containing the given list box.
 You can extend 
\family typewriter
ListBox
\family default
 to draw the items by yourself and use this constructor so the pop list
 will use your class and not the default 
\family typewriter
ListBox
\family default
 one.
 This constructor forces 
\family typewriter
ListBox.
 simpleBorder
\family default
 to 
\family typewriter
true
\family default
.
 Note: the list box items must be already set.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBox(Object[]
\begin_inset space ~
\end_inset

items) Creates a combo box with the given items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBox(ComboBoxDropDown
\begin_inset space ~
\end_inset

userPopList) Constructs a combo box with the given 
\family typewriter
ComboBoxDropDown
\family default
 already filled.
 
\end_layout

\end_deeper
\begin_layout Itemize
Using the Palm OS UI style, the combo box drop down control covers the combo
 box control, otherwise it is placed above or below the combo box, without
 covering it.
\end_layout

\begin_layout Itemize
The 
\family typewriter
ComboBoxDropDown
\family default
 height depends on the control's position: it will open in the direction
 that has the most space left (above or below).
 If you set the public member 
\family typewriter
fullHeight
\family default
 to 
\family typewriter
true
\family default
, then it will have the same height as the screen, maximizing the number
 of items displayed.
 In the same way, the 
\family typewriter
fullWidth
\family default
 will set the width to the screen's one.
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method selects the index using the 
\family typewriter
clearValueInt
\family default
 value, which is 0 by default.
\end_layout

\begin_layout Itemize
The color used in the 
\family typewriter
setBackground()
\family default
 method will be used in the arrow button only.
 The background color of the combo box text and 
\family typewriter
ComboBoxDropDown
\family default
 will be a lighter version of the given color.
\end_layout

\begin_layout Itemize
You can change the combo box's scroll bar default width.
 To do so, you must use the static field 
\family typewriter
Button.commonGap
\family default
.
 Increasing its value will also increase the width of the arrow button and
 the scrollbar.
 Remember to reset the 
\family typewriter
Button.commonGap
\family default
 value to 0 after the combo box creation, otherwise it will keep affecting
 all combo box and buttons created after.
\end_layout

\begin_layout Itemize
You may append new items to your combo box using the method 
\family typewriter
add()
\family default
, which has three useful implementations:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
add(Object
\begin_inset space ~
\end_inset

item) Adds an object to the combo box.
 This method is very slow if used in loop; use the 
\family typewriter
add(Object[] items)
\family default
 to add a bunch of objects instead.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Object[]
\begin_inset space ~
\end_inset

items) Adds an array of objects to the combo box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startAt,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size) Adds a subarray of objects to the combo box.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Avoid making several calls to 
\family typewriter
add(Object item)
\family default
, always prefer 
\family typewriter
add(Object[] items)
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
You may insert new items at a desired position using 
\family typewriter
insert(Object item, int index)
\family default
.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setItemAt(int i, Object s)
\family default
 replaces the object at the given index starting from zero by the given
 object.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
size()
\family default
 to retrieve the number of items available on the combo box.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getItemAt(int i)
\family default
 returns the object at the selected index; the reverse operation can be
 done with 
\family typewriter
indexOf(Object name)
\family default
, which retrieves the index of a specific object.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
getSelectedIndex()
\family default
 to get the index of the selected item, or 
\family typewriter
getSelectedItem()
\family default
 to retrieve the selected object directly.
\end_layout

\begin_layout Itemize
You may select an item by its index with 
\family typewriter
setSelectedIndex(int i)
\family default
 or by its content with 
\family typewriter
setSelectedItem(Object name)
\family default
.
 In the first, -1 must be used to blank the combo box view box.
 In the last one, if the name is not found, the currently selected item
 is not changed.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
selectLast()
\family default
 method selects the last item added to the combo box, doing a scroll if
 needed.
 It calls 
\family typewriter
repaintNow()
\family default
.
 
\end_layout

\begin_layout Itemize
To remove items from a combo box, you may use one of the following three
 methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
remove(int
\begin_inset space ~
\end_inset

itemIndex) Removes an object from the combo box by its index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Object
\begin_inset space ~
\end_inset

item) Removes the given object from the combo box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAll() Empties the combo box.
\end_layout

\end_deeper
\begin_layout Itemize
The combo box items can be sorted using the methods 
\family typewriter
qsort()
\family default
.
 One of them receives a parameter indicating if the sorting is caseless
 or not in case the elements are strings.
 In both of them, the current selection is cleared.
 
\end_layout

\begin_layout Itemize
It is possible to make a list box scroll horizontally (see 
\family typewriter

\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:ListBox"

\end_inset


\family default
).
 To be able to scroll the list box associated with this combo box, just
 call the method 
\family typewriter
enableHorizontalScroll()
\family default
.
 Two buttons will appear below the vertical scrollbar.
 The add, replace, and remove operations will be a bit slower because the
 string's width will have to be computed in order to correctly set the maximum
 horizontal scroll.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	String []items1 = {"","Orange","Apple","Grape","Lemon"};
\end_layout

\begin_layout Plain Layout

	String []items2 = {"One","Two","Three", ...};
\end_layout

\begin_layout Plain Layout

	String []items3 = {"Disabled","Enabled"};
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ComboBox cb1 = new ComboBox(items1);
\end_layout

\begin_layout Plain Layout

	add(cb1,LEFT,TOP+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ComboBox cb2 = new ComboBox();
\end_layout

\begin_layout Plain Layout

	cb2.add(items2);
\end_layout

\begin_layout Plain Layout

	cb2.add("Twenty one");
\end_layout

\begin_layout Plain Layout

	add(cb2,RIGHT,AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ComboBox cb3 = new ComboBox(items3);
\end_layout

\begin_layout Plain Layout

	add(cb3);
\end_layout

\begin_layout Plain Layout

	cb3.setRect(LEFT,BOTTOM,PREFERRED+4,PREFERRED);
\end_layout

\begin_layout Plain Layout

	cb3.setSelectedIndex(0);
\end_layout

\begin_layout Plain Layout

	cb3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the preceding controls, this one also posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 when the user selects an item.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == cb1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Item selected: " +  cb1.getSelectedItem()).popup
();
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ComboBox
\family default
 class has other useful fields and methods (some methods heired from 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultClearValueInt A static field that defines the default value that
 is set to the 
\family typewriter
clearValueInt
\family default
 of all 
\family typewriter
ComboBox
\family default
es.
 Usually this value is 0, but sometimes you may wish to set it to -1, to
 unselect the 
\family typewriter
ComboBox
\family default
 when 
\family typewriter
clear()
\family default
 is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
checkColor The check color used to fill the 
\family typewriter
ComboBox
\family default
 used in Android.
 Defaults to the fore color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
popupTitle The title of the 
\family typewriter
PopupMenu
\family default
 when in Android user interface style.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
usePopupMenu Set to 
\family typewriter
false
\family default
 to don't use the 
\family typewriter
PopupMenu
\family default
 when the user interface style is Android.
 This affects all 
\family typewriter
ComboBox
\family default
es.
 If you want to change a particular 
\family typewriter
ComboBox
\family default
 to use the standard popup list, but keep others with the 
\family typewriter
PopupMenu
\family default
, you can do something like: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyListBox extends ListBox
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public MyListBox(totalcross.lang.String[] items)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super(items);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
 ComboBox cb = new ComboBox(new MyListBox(items)); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
addWrapping(String
\begin_inset space ~
\end_inset

text) Adds the given text to the 
\family typewriter
ComboBox
\family default
, breaking the text if it goes beyond its limits, and also breaking if it
 contains 
\family typewriter

\backslash
n
\family default
.
 It returns the number of lines.
 Note that each part of the text is considered a new item.
 This method is slower than the other 
\family typewriter
add()
\family default
 methods.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItems() Returns all items in the combo box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

color) Sets the cursor color for the combo box.
 The default is equal to the background slightly darker.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onFontChanged() Passes the font to the pop list.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBackForeItemColors(IntHashtable
\begin_inset space ~
\end_inset

ihtFore,
\begin_inset space ~
\end_inset

IntHashtable
\begin_inset space ~
\end_inset

ihtBack) Sets the fore colors and back colors for the list box used with
 this combo box.
 Note that 
\family typewriter
null
\family default
 is a valid value, used when you always want to use the default color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
popup() Pops up the 
\family typewriter
ComboBoxDropDown
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
unpop() Unpops the 
\family typewriter
ComboBoxDropDown
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onPaint(Graphics
\begin_inset space ~
\end_inset

g) Paints the combo's border and the current selected item.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getListBox() Returns the list box used when the combo box is opened.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItemStartingWith(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

caseInsensitive) Selects the item that starts with the given text.
 If the second parameter is 
\family typewriter
true
\family default
, the text and all searched strings are first converted to lowercase.
 This method returns 
\family typewriter
true
\family default
 if an item was found and selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPop(ComboBoxDropDown
\begin_inset space ~
\end_inset

lb) Replaces the original 
\family typewriter
ComboBoxDropDown
\family default
 by the given one.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
ComboBoxDropDown
\family default
 class is a simple implementation of a popup list box.
 It has the following fields, constructors and methods (some methods heired
 from 
\family typewriter
Control
\family default
 are ommited):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lb The assigned 
\family typewriter
ListBox
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dontHideParent Set it to 
\family typewriter
true
\family default
 if you want to make the control popup below or above always, and not only
 if on Windows CE.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fullHeight Set to 
\family typewriter
true
\family default
 to make this popup have the screen height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fullWidth Set to 
\family typewriter
true
\family default
 to make this popup have the screen width.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxDropDown() Creates a 
\family typewriter
ComboBoxDropDown
\family default
 with coordinates that will be set later via the 
\family typewriter
setRect()
\family default
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxDropDown(ListBox
\begin_inset space ~
\end_inset

lb) Creates a 
\family typewriter
ComboBoxDropDown
\family default
 with the given 
\family typewriter
ListBox
\family default
.
 You can extend the 
\family typewriter
ListBox
\family default
 to draw the items by yourself and use this constructor so the 
\family typewriter
ComboBoxDropDown
\family default
 will use your class and not the default 
\family typewriter
ListBox
\family default
 one.
 Note that this constructor forces the 
\family typewriter
ListBox.simpleBorder
\family default
 to 
\family typewriter
true
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setRect(int
\begin_inset space ~
\end_inset

x,int
\begin_inset space ~
\end_inset

y,int
\begin_inset space ~
\end_inset

width,int
\begin_inset space ~
\end_inset

height,Control
\begin_inset space ~
\end_inset

relative,boolean
\begin_inset space ~
\end_inset

screenChanged) Sets the absolute rect of the parent's control.
 The 
\family typewriter
ComboBoxDropDown
\family default
 rect will be computed based on that rectangle.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onClickedOutside(PenEvent
\begin_inset space ~
\end_inset

event) Closes the popup list with a click outside its bounds.
\end_layout

\begin_layout Section
ListBox
\begin_inset CommandInset label
LatexCommand label
name "sec:ListBox"

\end_inset


\end_layout

\begin_layout Standard
The list box is a control that allows the user to select one item from a
 list contained within multiple line text box.
 It looks like an open combo box (in fact, the combo box uses the list box
 control).
 Consider using the list box instead of the combo box if the screen has
 enough space available to show all items.
\end_layout

\begin_layout Standard
Here are some screenshots from a simple list box using the Android style
 from AndroidUI (above the list box component, there is a combo box):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing how it can be used:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ListBox lb;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		lb = new ListBox();
\end_layout

\begin_layout Plain Layout

		add(lb);
\end_layout

\begin_layout Plain Layout

		lb.add(new String[]{"Daniel","Jenny","Helge","Sandra"});
\end_layout

\begin_layout Plain Layout

		lb.add("Marc"); // you may set the rect by using PREFERRED only after the
 items were added.
\end_layout

\begin_layout Plain Layout

		lb.setRect(LEFT, TOP, PREFERRED, PREFERRED); // use control's preferred
 width based on the size of the elements
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		switch (event.type)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

				if (event.target == lb)
\end_layout

\begin_layout Plain Layout

					Object element = lb.getSelectedItem(); // in most cases, this is just
 a String and may be casted to such
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice that TotalCross' list box does not allow the selection of
 multiple items like one would expect.
 If you need this feature, use the 
\family typewriter
MultiListBox
\family default
 control (refer to the advanced controls section).
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
List box has two constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
ListBox() Creates an empty list box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ListBox(Object[]
\begin_inset space ~
\end_inset

items) Creates a list box with the given items.
 
\end_layout

\end_deeper
\begin_layout Itemize
You can append new items to your list box using one of the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
add(Object
\begin_inset space ~
\end_inset

item) Adds an object to the list box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Object[]
\begin_inset space ~
\end_inset

moreItems) Adds an array of objects to the list box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Object[]
\begin_inset space ~
\end_inset

moreItems,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startAt,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size) Adds a subarray of objects to the list box.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Avoid making several calls to 
\family typewriter
add(Object item)
\family default
, always prefer 
\family typewriter
add(Object[] items)
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
You may insert an object at a desired position with 
\family typewriter
insert(Object item, int index)
\family default
.
 The first item has index 0.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setItemAt(int i, Object s)
\family default
 replaces the object at the given index by the given object.
 
\end_layout

\begin_layout Itemize
Use 
\family typewriter
size()
\family default
 to retrieve the number of items available on the list box.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getItemAt(int i)
\family default
 returns the object at the selected index.
 It returns an empty string if the index is outside the range.
 The reverse operation can be done with 
\family typewriter
indexOf(Object name)
\family default
, which retrieves the index of a specific object.
 It returns -1 if the object is not found.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
getSelectedIndex()
\family default
 to get the index of the selected item, or 
\family typewriter
getSelectedItem()
\family default
 to retrieve the selected object directly.
 The first returns -1 if the list box has no selected index yet and the
 last one returns an empty 
\family typewriter
String
\family default
 object if none is selected.
 
\end_layout

\begin_layout Itemize
You may select an item by its index with 
\family typewriter
setSelectedIndex(int i)
\family default
 or by its content with 
\family typewriter
setSelectedItem(Object name)
\family default
.
 If the object or is not found, the current selected item is not changed.
 However, if the index is not found, the current selected item is cleared
 and no item becomes selected.
\end_layout

\begin_layout Itemize
The 
\family typewriter
selectLast()
\family default
 method selects the last item added to the list box, doing a scroll if needed.
 It calls 
\family typewriter
repaintNow()
\family default
.
 
\end_layout

\begin_layout Itemize
To remove items from a list box, you may use one of the following three
 methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
remove(int
\begin_inset space ~
\end_inset

itemIndex) Removes an object from the list box by its index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Object
\begin_inset space ~
\end_inset

item) Removes the given object from the list box.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAll() Empties the list box, setting all elements of the array to 
\family typewriter
null
\family default
 so they can be garbage collected.
 
\begin_inset Newline newline
\end_inset

Attention! If you used the same object array to initialize two list boxes
 (or combo boxes), this method will 
\family typewriter
null
\family default
 both list boxes (because they use the same array reference), and you might
 get a 
\family typewriter
NullPointerException
\family default
! 
\end_layout

\end_deeper
\begin_layout Itemize
The list box items can be sorted using the method 
\family typewriter
qsort()
\family default
.
 One of them receives a parameter indicating if the sorting is caseless
 or not in case the elements are strings.
 In both of them, the current selection is cleared.
 
\end_layout

\begin_layout Itemize
To add a horizontal scroll to the list box, use the method 
\family typewriter
enableHorizontalScroll()
\family default
.
 Note that enabling this will make the addition of elements slower, because
 the list box will compute each item's width to find the maximum offset.
\end_layout

\begin_layout Itemize
To increase the default height of the horizontal scroll buttons, change
 the 
\family typewriter

\begin_inset Newline newline
\end_inset

extraHorizScrollButtonHeight
\family default
 static member.
 Its default value is 2 in 160x160 or a multiple of it in other resolutions.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
setSimpleBorder(boolean simpleBorder)
\family default
 method is used to change the border style from 3d to simple if the flag
 passed is 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Itemize
If the list box owns the focus and you type a letter, the first item with
 the typed letter is selected.
 Typing again selects the next item, and so on.
\end_layout

\begin_layout Itemize
The up/down keys can be used to scroll the list box.
\end_layout

\begin_layout Itemize
The selection color can be changed with 
\family typewriter
setCursorColor(int color)
\family default
.
 The color used in the 
\family typewriter
setBackColor()
\family default
 method will be used in the scrollbar only.
 The background color of the control will be a lighter version of the given
 color.
 
\end_layout

\begin_layout Itemize
By default, the selection is drawn using the current item's width.
 This behavior can be changed by setting the static field 
\family typewriter
useFullWidthOnSelection
\family default
 to 
\family typewriter
true
\family default
.
 If so, all list boxes will have the selection bar drawn in the full width.
\end_layout

\begin_layout Itemize
You can extend 
\family typewriter
ListBox
\family default
 to implement a customized type, like a color-chooser list box.
 If doing so, the following methods must be overridden:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
protected
\begin_inset space ~
\end_inset

void
\begin_inset space ~
\end_inset

drawItem(Graphics
\begin_inset space ~
\end_inset

g,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

dx,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

dy)
\end_layout

\begin_layout Standard

\family typewriter
protected
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

getItemWidth(int
\begin_inset space ~
\end_inset

index)
\end_layout

\begin_layout Standard

\family typewriter
protected
\begin_inset space ~
\end_inset

void
\begin_inset space ~
\end_inset

drawCursor(Graphics
\begin_inset space ~
\end_inset

g,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sel,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

on)
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method sets the 
\family typewriter
clearValueInt
\family default
 as the selected index.
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
add()
\family default
 and 
\family typewriter
remove()
\family default
 to add and remove a control, respectively, do nothing, because it does
 not make sense to add controls to or remove controls from a list box.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String[] items1 = { "", "Orange", "Apple", "Grape", "Lemon" };
\end_layout

\begin_layout Plain Layout

	String[] items2 = { "One", "Two", "Three" };
\end_layout

\begin_layout Plain Layout

	String[] items3 = { "Disabled", "Enabled" };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb1 = new ListBox(items1);
\end_layout

\begin_layout Plain Layout

	add(lb1, LEFT, TOP + 5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb2 = new ListBox();
\end_layout

\begin_layout Plain Layout

	lb2.add(items2);
\end_layout

\begin_layout Plain Layout

	lb2.add("Twenty one");
\end_layout

\begin_layout Plain Layout

	add(lb2);
\end_layout

\begin_layout Plain Layout

	lb2.setRect(RIGHT, AFTER + 5, PREFERRED, FILL - 5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb3 = new ListBox(items3);
\end_layout

\begin_layout Plain Layout

	add(lb3, RIGHT, TOP + 5);
\end_layout

\begin_layout Plain Layout

	lb3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Be careful when setting the items with an object array.
 The array is assigned as is, no copy is made.
 So, if you use the same array in another control and an item inside the
 array is changed, this change will reflect in both controls.
 However, if you add a new item, a new array is created to store the added
 item and the program works correctly.
 The best practice is to have one array for each list box control.
 To copy the contents of an object array to a new one, you can use 
\family typewriter
totalcross.sys.Vm.arrayCopy()
\family default
.
 If you're dealing specifically with string arrays, you may instead use
 
\family typewriter
totalcross.sys.Convert.cloneStringArray()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The list box also posts the 
\family typewriter
ControlEvent.PRESSED
\family default
 when an item is clicked.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == lb1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Item selected: " + lb1.getSelectedItem()).popup(
);
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ListBox
\family default
 class has other useful fields and methods (some methods heired from 
\family typewriter
Control
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
iconGap The gap between the icon and the text.
 Used in the internal class 
\family typewriter
IconItem
\family default
.
 Defaults to 
\family typewriter
fmH*4/3
\family default
.
 If you plan to change this value, do it after calling 
\family typewriter
setFont()
\family default
 (if you call it).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ihtBackColors,
\begin_inset space ~
\end_inset

ihtForeColors 
\family typewriter
IntHashtable
\family default
 used to specify different background and foreground colors for some items.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

list.ihtBackColor = new IntHashtable(10);
\end_layout

\begin_layout Plain Layout

ihtBackColors.put(10,0xAABBCC); // will make line number 10 with back color
 0xAABBCC.
\end_layout

\end_inset

Specify a 
\family typewriter
null
\family default
 value if you want to use the default color (this also makes drawing faster).
 Note that its up to you to update the hash table if an item is inserted
 or removed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
flick The 
\family typewriter
Flick
\family default
 object that listens and performs flick animations on pen up events when
 appropriate.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
visibleLines Sets the number of visible lines, used to make 
\family typewriter
PREFERRED
\family default
 height return the given number of lines as the list box height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
itemHeightFactor In finger touch devices, sets a factor by which the font
 height will be multiplied to increase the item's height.
 Defaults to 1.5 when 
\family typewriter
Settings.fingerTouch
\family default
 is 
\family typewriter
true
\family default
, and 1 when its 
\family typewriter
false
\family default
.
 You can change this value before the constructor and restore it after the
 constructor to change the height of a single list box.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ListBox.itemHeightFactor = 1;
\end_layout

\begin_layout Plain Layout

// ...
 create listbox
\end_layout

\begin_layout Plain Layout

ListBox.itemHeightFactor = ListBox.DEFAULT_ITEM_HEIGHT_FACTOR; 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
dataCol Used by the 
\family typewriter
DBListBox
\family default
 (Database 
\family typewriter
ListBox
\family default
) to store the data column that is displayed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addWrapping(String
\begin_inset space ~
\end_inset

text) Adds the given text to this list box, breaking the text if it goes
 beyond the list box' limits, and also breaking if it contains 
\family typewriter

\backslash
n
\family default
.
 It returns the number of lines.
 Note that each part of the text is considered a new item.
 This method is slower than the other 
\family typewriter
add()
\family default
 methods.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItems() Returns all items in this list box.
 If the elements are strings, the array can be casted to 
\family typewriter
String[]
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width, i.
 e., the size of the largest item plus the size of the scroll bar.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the number of items multiplied by the font
 metrics height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onBoundsChanged(boolean
\begin_inset space ~
\end_inset

screenChanged) This is needed to recalculate the box size for the selected
 item if the control is resized by the main application.
 The parameter indicates whether the bounds were changed due to a screen
 change (rotation, collapse).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
find(char
\begin_inset space ~
\end_inset

c) Searches the list box for an item with the first letter matching the
 given character.
 The search is made case insensitive.
 
\begin_inset Newline newline
\end_inset

Note: if you override this class you must implement this method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Returns the string of the selected item or "" if none is selected.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItemStartingWith(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

caseInsensitive) Selects the item that starts with the given text.
 If the second parameter is 
\family typewriter
true
\family default
, the text and all searched strings are first converted to lowercase.
 The method returns 
\family typewriter
true
\family default
 if an item was found and selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hideScrollBarIfNotNeeded() This method hides the scrollbar if its not needed,
 i.
 e., if horizontal scroll is disabled and the preferred height is smaller
 than the actual height.
 You may have to call 
\family typewriter
reposition()
\family default
 if this method returns 
\family typewriter
true
\family default
.
 You can call this method after all items were added.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
ListBox
\family default
 class has an internal class called 
\family typewriter
IconItem
\family default
 used to show an icon and a text.
 You can mix 
\family typewriter
IconItem
\family default
 with other item types in the list box.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lb.add("this is a simple text");
\end_layout

\begin_layout Plain Layout

lb.add(new IconItem("this is a text with icon", iconImage)); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The icon should have the same size of the font's height, which can be set
 with: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

iconImage = originalImage.smoothScaledFixedAspectRatio(fmH,true,-1); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class only has a public constructor and a public method:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IconItem(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

Image
\begin_inset space ~
\end_inset

icon) Constructs a new 
\family typewriter
IconItem
\family default
 with the given text and icon.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns the object text.
\end_layout

\begin_layout Section
MultiEdit
\end_layout

\begin_layout Standard

\family typewriter
MultiEdit
\family default
 is basically an edit with support for multiple lines, so their usage is
 pretty similar and, unless noted otherwise, the same methods listed for
 edit are available for 
\family typewriter
MultiEdit
\family default
.
 A static vertical scrollbar is added, but it is disabled/enabled as needed.
\end_layout

\begin_layout Standard
Here are some screenshots from a non-editable 
\family typewriter
MultiEdit
\family default
 using the Android style from UIGadgets being scrolled (below it there is
 a multi-lined label):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
An editable 
\family typewriter
MultiEdit
\family default
 from AndroidUI, also using Android style, can be seen below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing a 
\family typewriter
MultiEdit
\family default
 control being used: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MultiEdit mEdit;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// the constructor method is called with the mask, the number of lines
 and the vertical interval in pixel between two lines
\end_layout

\begin_layout Plain Layout

		mEdit = new MultiEdit("",3,1);
\end_layout

\begin_layout Plain Layout

		add(mEdit,LEFT,TOP); // add/setRect must precede setText()
\end_layout

\begin_layout Plain Layout

		mEdit.setText("What text you want"); // eventually
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
MultiEdit
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
MultiEdit() Creates a 
\family typewriter
MultiEdit
\family default
 with 1 pixel as space between lines and with no lines.
 You must set the bounds using 
\family typewriter
FILL
\family default
 or 
\family typewriter
FIT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MultiEdit(int
\begin_inset space ~
\end_inset

rowCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

spaceBetweenLines) Creates a 
\family typewriter
MultiEdit
\family default
 with a vertical scrollbar, the given number of rows and the default width
 
\family typewriter
FILL
\family default
.
 The gap is 1 by default and the control's bounds must be specified with
 a 
\family typewriter
setRect()
\family default
.
 The space between lines may be 0.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MultiEdit(String
\begin_inset space ~
\end_inset

mask,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

rowCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

spaceBetweenLines) Creates a 
\family typewriter
MultiEdit
\family default
 with a vertical scrollbar, the given number of rows and uses the given
 mask to compute the 
\family typewriter
PREFERRED
\family default
 width.
 If the mask is “”, the width is set to 
\family typewriter
FILL
\family default
.
 The gap is 1 by default and the control's bounds must be given with a 
\family typewriter
setRect()
\family default
.
 The space between lines may be 0.
 Note that the mask does not masks the input.
 If the mask is "", the 
\family typewriter
FILL
\family default
 width is choosen.
 
\end_layout

\end_deeper
\begin_layout Itemize
The method 
\family typewriter
getNumberOfTextLines()
\family default
 returns the number of lines in the text.
\end_layout

\begin_layout Itemize
With 
\family typewriter
setScrollbarsAlwaysVisible(boolean asNeeded)
\family default
 you can change the
\family typewriter

\begin_inset Newline newline
\end_inset

MultiEdit
\family default
's scrollbar behavior.
 Set to 
\family typewriter
true
\family default
 to hide the vertical scrollbar when it isn't needed (instead of disabling
 it).
 This must be done right after the constructor.
 
\end_layout

\begin_layout Itemize
By default, a dotted line is shown under each text row.
 You can change this behavior with the boolean field 
\family typewriter
drawDots
\family default
.
\end_layout

\begin_layout Itemize
Use the field 
\family typewriter
gap
\family default
 to change the gap between the rows.
 The default value is 1.
\end_layout

\begin_layout Itemize
If the 
\family typewriter
MultiEdit
\family default
 object is not editable, the user can scroll the edit a page at a time just
 by clicking in the middle upper or middle lower.
 
\end_layout

\begin_layout Itemize
The following methods allow you to manipulate the 
\family typewriter
MultiEdit
\family default
 scrollbar:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
scrollToBottom() Moves the scroll to the bottom.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToLine(int
\begin_inset space ~
\end_inset

line) Scrolls to the gives text line.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToTop() Moves the scroll to the top.
\end_layout

\end_deeper
\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String s = "James Robert Baker (1946-1997) was an American author of sharply
 satirical, predominantly gay-themed transgressional fiction.
 A native Californian, his work is set almost entirely in Southern California.
 After graduating from UCLA, he began his career as a screenwriter, but
 became disillusioned and started writing novels instead.
 Though he garnered fame for his books Fuel-Injected Dreams and Boy Wonder,
 after the controversy surrounding publication of his novel, Tim And Pete,
 he faced increasing difficulty having his work published.
 According to his life partner, this was a contributing factor in his suicide.
 Baker's work has achieved cult status in the years since his death, and
 two additional novels have been posthumously published.
 First-edition copies of his earlier works have become collector's items.
 One of his novels was filmed (though it was not a financial success) and
 two others have been optioned for the movies, though they have not been
 produced.";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	MultiEdit mEdit;
\end_layout

\begin_layout Plain Layout

	mEdit = new MultiEdit("",6,1);
\end_layout

\begin_layout Plain Layout

	mEdit.drawDots = (false);
\end_layout

\begin_layout Plain Layout

	mEdit.justify = true;
\end_layout

\begin_layout Plain Layout

	mEdit.setEditable(false);
\end_layout

\begin_layout Plain Layout

	mEdit.hasCursorWhenNotEditable = false;
\end_layout

\begin_layout Plain Layout

	add(mEdit,LEFT,AFTER+2);
\end_layout

\begin_layout Plain Layout

	mEdit.setText(s); //eventually
\end_layout

\begin_layout Plain Layout

	mEdit.requestFocus();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
MultiEdit
\family default
 class has other useful fields and methods (some methods heired from 
\family typewriter
Control
\family default
, defined in the 
\family typewriter
Scrollable
\family default
 interface, or the fields and methods whose name and behavior are identical
 to the ones from 
\family typewriter
Edit
\family default
 are ommited), which are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
mask The mask used to infer the preferred width.
 Unlike the 
\family typewriter
Edit
\family default
 class, 
\family typewriter
MultiEdit
\family default
 does not support real masking.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
rowCount Used to set the number of rows of the 
\family typewriter
MultiEdit
\family default
 object; used as parameter to compute the preferred height.
 You must call 
\family typewriter
setRect()
\family default
 after changing this to resize the control in height.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
justify Set to 
\family typewriter
true
\family default
 to justify the text when the 
\family typewriter
MultiEdit
\family default
 is NOT editable.
 Note that this makes the text drawing a bit slower.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMaxLength(int
\begin_inset space ~
\end_inset

length) Sets the desired maximum length for text entered in the 
\family typewriter
MultiEdit
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValidChars(String
\begin_inset space ~
\end_inset

validCharsString) Sets the valid chars that can be entered in the control.
 If 
\family typewriter
null
\family default
 is passed, any character can be entered.
 (case insensitive).
 Unlike the same method in the 
\family typewriter
Edit
\family default
, setting it to an empty string won't forbid you to copy, cut, delete, or
 paste a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Returns the text displayed in the 
\family typewriter
MultiEdit
\family default
 control.
 In this class it is not needed to deal with masking when fetching the component
 text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setRect(int
\begin_inset space ~
\end_inset

x,int
\begin_inset space ~
\end_inset

y,int
\begin_inset space ~
\end_inset

width,int
\begin_inset space ~
\end_inset

height,Control
\begin_inset space ~
\end_inset

relative,boolean
\begin_inset space ~
\end_inset

screenChanged) Sets the rect for 
\family typewriter
MultiEdit
\family default
.
 Note that height is recomputed based in the value for 
\family typewriter
rowCount
\family default
 given in the constructor if the given height is 
\family typewriter
PREFERRED
\family default
.
 
\end_layout

\begin_layout Section
Grid
\end_layout

\begin_layout Standard
The grid control is used to display tabulated data, which is represented
 as a string matrix (each row is a string array).
 Optionally, you may add an extra column of check boxes on the left side
 of the grid.
\end_layout

\begin_layout Standard
Below are some examples of grid taken from GridTest using Android style.
\end_layout

\begin_layout Standard
The first two images are from a simple grid being selected:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next samples show a grid with a check in the first column.
 Note that it is possible to know which ones are checked:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next sample shows a grid with a combo box in the first column and an
 edit in the second one:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_009.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next case shows the columns being sorted one at a time:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_011.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_012.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_013.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_014.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next sample shows a grid with also a check and a combo box, but this
 time, it can be seen that the combo box and check can't be manipulated
 by the user in all rows:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_015.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_016.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_017.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Finally, there is a grid whose first column has an image:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_010.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Although the TotalCross' grid control usage is pretty simple and straightforward
, it is the most customizable control and it uses its own set of events
 defined in 
\family typewriter
GridEvent
\family default
s (unlike the almost all the other controls that use only 
\family typewriter
ControlEvent
\family default
s).
 That means you'll be able to start using grids within a couple of minutes,
 but it will take some time to learn to use all its features:
\end_layout

\begin_layout Itemize
Horizontal scrolling in case the columns widths are greater than the screen
 width.
\end_layout

\begin_layout Itemize
Vertical scrollbar to scroll up and down the information on the grid.
\end_layout

\begin_layout Itemize
An easy to use interface for adding/removing information to the grid.
\end_layout

\begin_layout Itemize
Optional check column which is a column that is clickable, marking an specific
 row as checked/ unchecked; this is usefull if you want the user to be able
 to select multiple rows displayed on the grid.
\end_layout

\begin_layout Itemize
Columns can be resized so that the user can see all the information displayed
 in a given column.
\end_layout

\begin_layout Itemize
Style configuration, which you can set the color of captions boxes all the
 way through the stripes colors and vertical line types.
\end_layout

\begin_layout Itemize
The 
\family typewriter
GridEvent
\family default
 class contains the events generated by the grid.
\end_layout

\begin_layout Itemize
A column may be marked as editable.
 In this case, an edit will be placed in the currently focused cell.
 
\end_layout

\begin_layout Itemize
A column can also have choices (combo box).
\end_layout

\begin_layout Itemize
The columns can be sorted by clicking in the title.
\end_layout

\begin_layout Itemize
If the text is bigger than the size of the column, you can click and hold
 in the cell to display a tooltip with the full text.
\end_layout

\begin_layout Itemize
You can customize cell back and fore colors, enabled state and choices by
 using the 
\family typewriter

\begin_inset Newline newline
\end_inset

CellController
\family default
 class.
\end_layout

\begin_layout Itemize
Clicking in the column's caption will sort in ascending order; clicking
 on it again sorts in descending order.
 
\end_layout

\begin_layout Itemize
It is possible to assign a 
\family typewriter
DataSource
\family default
 to a 
\family typewriter
Grid
\family default
, making the elements be fetched on demand.
 
\end_layout

\begin_layout Itemize
A column with size 0 is not displayed, so you can use it to store in the
 grid important information, for example the 
\family typewriter
rowid
\family default
 of a table.
\end_layout

\begin_layout Itemize
A 
\family typewriter
GridEvent
\family default
 is dispatched in the following situations:
\end_layout

\begin_deeper
\begin_layout Itemize
When the user selects a row:
\begin_inset Newline newline
\end_inset

type = 
\family typewriter
SELECTED_EVENT
\family default
; 
\family typewriter
row
\family default
 and 
\family typewriter
col
\family default
 are set with the cell that was clicked.
\end_layout

\begin_layout Itemize
When the user checks a row:
\begin_inset Newline newline
\end_inset

type = 
\family typewriter
CHECK_CHANGED_EVENT
\family default
; 
\family typewriter
row
\family default
 is set with the row that was checked, 
\family typewriter
col
\family default
 is 0, and 
\family typewriter
checked
\family default
 contains the current state.
\end_layout

\begin_layout Itemize
When the user press the check/uncheck all box:
\begin_inset Newline newline
\end_inset

type = 
\family typewriter
CHECK_CHANGED_EVENT
\family default
; 
\family typewriter
col
\family default
 is 0 and 
\family typewriter
row
\family default
 is set to 
\family typewriter
Grid.ALL_CHECKED
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

Grid.ALL_UNCHECKED
\family default
.
\end_layout

\begin_layout Itemize
When the user changes the text of an editable column or selected a new choice:
\begin_inset Newline newline
\end_inset

type = 
\family typewriter
TEXT_CHANGED_EVENT
\family default
; 
\family typewriter
row
\family default
 and 
\family typewriter
col
\family default
 are set with the cell that changed.
 The new text can be found with 
\family typewriter
getCellText()
\family default
 whereas 
\family typewriter
Grid.oldCellText()
\family default
 contains the old text.
\end_layout

\end_deeper
\begin_layout Itemize
Grid has two constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Grid(String[]
\begin_inset space ~
\end_inset

captions,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

checkEnabled) Creates a grid with the given captions and, optionally, a
 multi-selection check column so that the user can select multiple rows
 of the grid.
 The captions can't be 
\family typewriter
null
\family default
.
 The widths will be computed as the width of the grid captions and the alignment
 will be all 
\family typewriter
LEFT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Grid(String[]
\begin_inset space ~
\end_inset

captions,
\begin_inset space ~
\end_inset

int[]
\begin_inset space ~
\end_inset

widths,
\begin_inset space ~
\end_inset

int[]
\begin_inset space ~
\end_inset

aligns,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

checkEnabled) Creates a grid with the given captions, column width, column
 text alignment and, optionally, a multi-selection check column.
 
\begin_inset Newline newline
\end_inset

If the total width is less than the grid's width, the last column will fill
 until the grid width.
 If 
\family typewriter
null
\family default
, the caption widths will be computed and used as the row width.
 If a negative value is passed, it will be computed as a percentage against
 the grid's width.
\begin_inset Newline newline
\end_inset


\family typewriter
aligns
\family default
 is the alignment of information on the given column.
 If 
\family typewriter
null
\family default
, all aligns will be 
\family typewriter
LEFT
\family default
.
 
\end_layout

\end_deeper
\begin_layout Standard
Here´s an example which will create a grid with the given captions, column
 widths, information alignment, and a check column:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Rect r = getClientRect();
\end_layout

\begin_layout Plain Layout

String []gridCaptions = {" WPT "," HDG "," DST "," ETE "," FUEL "};
\end_layout

\begin_layout Plain Layout

int gridWidths[] = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	-25, // negative numbers are percentage of width
\end_layout

\begin_layout Plain Layout

	fm.stringWidth(" 000 "),
\end_layout

\begin_layout Plain Layout

	-25,
\end_layout

\begin_layout Plain Layout

	-20,
\end_layout

\begin_layout Plain Layout

	-20
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

int gridAligns[] = { LEFT, CENTER, RIGHT, CENTER, RIGHT };
\end_layout

\begin_layout Plain Layout

grid = new Grid(gridCaptions, gridWidths, gridAligns, false);
\end_layout

\begin_layout Plain Layout

add(grid, LEFT+3,TOP+3,r.width/2,r.height/2);
\end_layout

\begin_layout Plain Layout

grid.secondStripeColor = Color.getRGB(235,235,235);
\end_layout

\begin_layout Plain Layout

String[][] data = new totalcross.lang.String[][]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	{"0AAAA","000","000.0","00:00","00.0"},
\end_layout

\begin_layout Plain Layout

	{"1BBBB","111","111.1","11:11","11.1"},
\end_layout

\begin_layout Plain Layout

	{"3DDDD","333","333.3","33:33","33.3"},
\end_layout

\begin_layout Plain Layout

	{"4EEEE","444","444.4","44:44","44.4"},
\end_layout

\begin_layout Plain Layout

	{"5FFFF","555","555.5","55:55","55.5"}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

grid.setItems(data);  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also consider using 
\family typewriter
ListContainer
\family default
 instead of 
\family typewriter
Grid
\family default
 if you're using devices with big screens.
 
\end_layout

\begin_layout Subsection
Useful methods
\end_layout

\begin_layout Standard
Some methods heired from 
\family typewriter
Control
\family default
, 
\family typewriter
Container
\family default
, and 
\family typewriter
Scrollable
\family default
 are ommited.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(String[]
\begin_inset space ~
\end_inset

item) Adds a new item to the grid.
 Its up to the user to call 
\family typewriter
Window.needsPaint = true
\family default
 afterwards.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(String[]
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

row) The same as above but adds a new item to the grid at the given position.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(String[][]
\begin_inset space ~
\end_inset

items) Appends the given rows at the end of the grid.
 It is similar to the first 
\family typewriter
add()
\family default
 method except that it appends more than one row.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Selects the 
\family typewriter
clearValueInt
\family default
 row, which defaults to -1.
 That is, by default, this method deselects all rows.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCellText(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Returns the text of the given cell.
 If the grid has a check column, 
\family typewriter
col
\family default
 must start from 1.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCellText(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

Strint
\begin_inset space ~
\end_inset

text) Sets the text of the given cell.
 If the grid has a check column, 
\family typewriter
col
\family default
 must start from 1.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItem(int
\begin_inset space ~
\end_inset

index) Returns the row from the given index.
 This method works with or without a 
\family typewriter
DataSource
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItemsVector() Returns a vector containing all information inside the
 grid.
 As with 
\family typewriter
getItem()
\family default
, the returned data does not contain information about the selected item's.
 Note that if a 
\family typewriter
DataSource
\family default
 is assigned, this method returns 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCheckedRows() Returns an 
\family typewriter
IntVector
\family default
 containing the indexes of the rows that have been marked with a check.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Gets the number of the currently selected row, or -1
 if none is selected.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Gets the string array for the currently selected row.
 Any changes made into the returned array is applied back to the grid automatica
lly (because it holds the grid's data).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
horizontalScroll(boolean
\begin_inset space ~
\end_inset

toLeft) Scrolls the grid to left or right.
 It returns 
\family typewriter
true
\family default
 if the grid was scrolled; 
\family typewriter
false
\family default
 if it's impossible to scroll in that direction.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isChecked(int
\begin_inset space ~
\end_inset

lineIndex) Returns if the given row is checked.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setChecked(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

check) Checks or unchecks a given row.
 This method only works with a grid that has checks and 
\family typewriter
repaint()
\family default
 must be called.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
replace(String[]
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

row) Replaces the given row by the text.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
move(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

up) Moves the items at given indexes one row up or down depending on the
 given second parameter.
 If it is 
\family typewriter
true
\family default
, the items at index 
\family typewriter
row
\family default
 will be shown in 
\family typewriter
row-1
\family default
 and the items at index 
\family typewriter
row-1
\family default
 will be shown at index 
\family typewriter
row
\family default
.
 If it is 
\family typewriter
false
\family default
, the items at index 
\family typewriter
row
\family default
 will be shown in 
\family typewriter
row+1
\family default
 and the items at index 
\family typewriter
row+1
\family default
 will be shoen at index 
\family typewriter
row
\family default
.
 It does not make sense to use this method if there's a 
\family typewriter
DataSource
\family default
 assigned.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
del(int
\begin_inset space ~
\end_inset

row) Removes the given row from the grid.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedRow(int
\begin_inset space ~
\end_inset

line) Selects the given row number.
 If -1, unselects the grid.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setItems(String[][]
\begin_inset space ~
\end_inset

items) Sets the grid items to be displayed.
 Notice that it needs to conform to the numbers of columns that the grid
 currently have.
 This method removes any assigned 
\family typewriter
DataSource
\family default
.
 The strings inside the matrix cannot be 
\family typewriter
null
\family default
.
 If 
\family typewriter
items == null
\family default
, the grid will remain empty.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of rows in this grid.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setColumnWidth(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newWidth) Sets the column width of the given column.
 Positive values are used as pixels, negative values represent percentage
 of the grid's width, and 0 hides the column.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getColumnWidths() Returns an array with the current column widths, not the
 original ones passed in the constructor.
 Changing these values will NOT change the column's width.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setColumnEditable(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

editable) Enables/disables the edition for all cells of a grid's column.
 Note that setting an editable column as not editable will remove all its
 formats.
 Returns the previous edit or the new one, so you can easily change its
 formats.
 Important: this must be called AFTER the grid has set its bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isColumnEditable(int
\begin_inset space ~
\end_inset

col) Returns 
\family typewriter
true
\family default
 if the given column is editable.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setColumnChoices(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

choices) Enables a combo box with choices for all cells of a grid's column.
 The given choice array is used to create a pop list that is shown when
 the user clicks on the column.
 Note that calling this method removes any edit assigned to this column.
 You can change dynamically the choices by extending the 
\family typewriter
CellController
\family default
 class.
 Passing a 
\family typewriter
null
\family default
 value removes any combo box assigned to the column.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollTo(int
\begin_inset space ~
\end_inset

row) Scrolls the grid to the given row.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() If all widths (passed in constructor) are positive (i.
 e., not a percentage), then it will use their sum as the preferred width.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
markAll(boolean
\begin_inset space ~
\end_inset

check) Checks or unchecks all rows in this grid.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

ascending) Performs a quicksort in the items of the given column in the
 given order.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort(int
\begin_inset space ~
\end_inset

col) Performs an ascending quicksort in the items of the given column.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

row) Sets the selected row index to the given one.
 Note: if this grid has checks, the selected row is used to scroll to mark
 the row that may be checked; if the grid does not have checks, then it
 acts like a normal selected row.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setVisibleLines(int
\begin_inset space ~
\end_inset

visibleLines) Sets the number of visible lines (excluding the caption),
 used to make the 
\family typewriter
PREFERRED
\family default
 height return the given number of rows as the grid height.
 This method must be called before 
\family typewriter
setRect()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCheckCount() Returns the number of items checked.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setImage(String
\begin_inset space ~
\end_inset

tag,
\begin_inset space ~
\end_inset

Image
\begin_inset space ~
\end_inset

image) Sets an image to be used in the grid.
 You must use the same tag in the grid's item.
 The image will be resized to the current font's height, so be sure to call
 this method AFTER the font is set (or after the grid is added to the container).
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String[] gridCaptions = {"Image", "Name", "Details" };
\end_layout

\begin_layout Plain Layout

	int[] gridWidths = {-25, -50, -25};
\end_layout

\begin_layout Plain Layout

	int[] gridAligns = {CENTER,LEFT,LEFT};
\end_layout

\begin_layout Plain Layout

	String[][] items =
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		{"@foto1", "Car number one", "good car"},
\end_layout

\begin_layout Plain Layout

		{"@foto2", "Car number two", "great car"}
\end_layout

\begin_layout Plain Layout

	};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Grid grid = new Grid(gridCaptions, gridWidths, gridAligns, false); 
\end_layout

\begin_layout Plain Layout

	add(grid, LEFT+5, AFTER+2, FILL-10, PREFERRED);
\end_layout

\begin_layout Plain Layout

	grid.setImage("@foto1",new Image("foto1.jpg"));
\end_layout

\begin_layout Plain Layout

	grid.setImage("@foto2",new Image("foto2.jpg"));
\end_layout

\begin_layout Plain Layout

	grid.setItems(items);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception ee)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(ee,true);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
moveFocusToNextControl(Control
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

forward) Traverses throught the edits of the grid.
 It returns the selected control or 
\family typewriter
null
\family default
 if none was found.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAll() This method does nothing.
 To remove all elements, 
\family typewriter
removeAllElements()
\family default
 should be used instead.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAllElements() Remove all elements from the grid, leaving it blank.
 Removes any assigned 
\family typewriter
DataSource
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
refreshDataSource() Causes a refresh to be made in the items of the 
\family typewriter
DataSource
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDataSource(DataSource
\begin_inset space ~
\end_inset

ds,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

nrItems) Passing the class that implements the 
\family typewriter
Grid.DataSource
\family default
 interface and the total number of items allows the grid to request data
 on demand.
 This greatly reduces the memory usage, because only the number of visible
 items may be loaded at each time, but makes the grid navigation slower.
 Note that in this mode the grid scroll will not be realtime: the data will
 be requested only when the user releases the scroll bar.
 The data source has a single method: 
\family typewriter
String[][] getItems(int startingRow, int count)
\family default
, that must return the given number of items or less.
\begin_inset Newline newline
\end_inset

Note that when using 
\family typewriter
DataSource
\family default
s, the 
\family typewriter
add()
\family default
, 
\family typewriter
remove()
\family default
, 
\family typewriter
insert()
\family default
, etc methods CANNOT BE USED.
 A 
\family typewriter
DataSource
\family default
 is mostly used to assign a 
\family typewriter
ResultSet
\family default
 to it, so it's nonsense any data modification.
 Note that the scroll is made not live scrolling to speedup data retrieval.
\begin_inset Newline newline
\end_inset

Here's a sample of a 
\family typewriter
getItems()
\family default
 implementation: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String[][] getItems(int startIndex, int count)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (activeRS != null)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		activeRS.absolute(startIndex);
\end_layout

\begin_layout Plain Layout

		activeRS.getStrings(count);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDataSource() Returns the 
\family typewriter
DataSource
\family default
 assigned for this grid, or 
\family typewriter
null
\family default
 if there is none.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCellController(Grid.CellController
\begin_inset space ~
\end_inset

cc) Passing the class that extends 
\family typewriter
Grid.CellController
\family default
 will allow you to have a fine control of each cell of the grid.
 Note that using a cell controller will make the drawings slower.
 The class has the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getBackColor(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Must return the background color for the given cell, or
\family typewriter
 
\family default
-1 if you want to use the default one.
 Note that if the grid has a check, the back color of the check cell will
 be requested passing 
\family typewriter
col
\family default
 value as -1.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getForeColor(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Must return the foreground color for the given cell, or -1 if you want
 to use the default one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFont(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Must return the font to be used in this cell, or 
\family typewriter
null
\family default
 to use the default control's font.
 
\begin_inset Newline newline
\end_inset

Note: if you plan to use a font bigger than in the rest of the grid, be
 sure to follow the steps below (following this guide, the grid will have
 a height of the biggest font):
\end_layout

\begin_deeper
\begin_layout Enumerate
Construct the grid and set the grid's font to be the one with bigger size.
 
\end_layout

\begin_layout Enumerate
Call 
\family typewriter
add()
\family default
/
\family typewriter
setRect()
\family default
.
 
\end_layout

\begin_layout Enumerate
Restore the grid's default font.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
isEnabled(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Must return if the given cell is enabled, i.
 e., can have input and can be selected.
 Regarding the input, it will only work if the 
\family typewriter
setColumnChoices()
\family default
 or 
\family typewriter
setEditable()
\family default
 was called to the given column.
 Regarding the selection, it may also disable column's check state change.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
String[]
\begin_inset space ~
\end_inset

getChoices(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col) Returns a customized set of choices for the given cell.
 Must return 
\family typewriter
null
\family default
 if you want to use the default set.
 Only works if 
\family typewriter
setColumnChoices()
\family default
 was called to the given column.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that the 
\family typewriter
setColumnEditable()
\family default
 and 
\family typewriter
setColumnChoices()
\family default
 methods are mutually exclusive: calling one cancels the effects of the
 other.
 The 
\family typewriter
setDataSource()
\family default
 and 
\family typewriter
setItems()
\family default
 methods are also mutually exclusive.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Useful attributes
\end_layout

\begin_layout FieldList
\labelwidthstring 0
boldCheck Draws a bold check instead of the tiny one.
 Useful for high resolution devices.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
canClickSelectAll Sets to 
\family typewriter
false
\family default
 to disable the click on the check column of the captions to select and
 unselect all checks.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
disableSort Disables the sort when clicking in the column's caption.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawCheckBox Boolean that defines if the box around the check will or not
 be drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableColumnResize Must be set to 
\family typewriter
false
\family default
 to disable the column resize by dragging the column separator line.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
extraHorizScrollButtonHeight A value that can increase the horizontal scroll
 buttons height.
 Defaults 2 in 160x160 or a multiple of it in other resolutions.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
oldCellText The text that was in the cell before the user had editted it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
checkColor The color used to draw the check.
 Defaults to black.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
captionsBackColor The color used to fill the captions area.
 
\family typewriter
BRIGHT
\family default
 by default.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highlightColorThe Color of the selected (highlighted) row.
 
\family typewriter
DARK
\family default
 by default.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
firstStripeColor Color of the first stripe.
 
\family typewriter
WHITE
\family default
 by default.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
secondStripeColor Color of the second stripe.
 
\family typewriter
drawStripes
\family default
 must also be set to 
\family typewriter
true
\family default
.
 
\family typewriter
BRIGHT
\family default
 by default.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
verticalLineStyle Defines the vertical line style of the grid.
 Possible values are 
\family typewriter
VERT_DOT
\family default
 (default), 
\family typewriter
VERT_LINE
\family default
, and 
\family typewriter
VERT_NONE
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
String[]
\begin_inset space ~
\end_inset

captions These are the column captions.
 Can be directly assigned, but always make sure it has the same number of
 columns of the grid, or the widths array, set with the 
\family typewriter
setWidths()
\family default
 method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
columnResizeMargin A static field that defines how many pixels are used
 to define the place where the column will be resized.
 Defaults to 3 on pen devices and 5 on touch devices (must be ODD!).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawHighlight Set to 
\family typewriter
false
\family default
 to don't let the highlighted (selected) row be drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
selectedLine The current selected row, or -1 if none.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
linesPerPage How many lines fits in a page.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tip The tooltip used to display a column's text when it exceeds the column
 width.
 You can directly customize the tooltip.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastStartingRow Stores the last row that was requested from the current
 data source.
 The last rows retrieved will be cached to prevent requesting the same data.
 If you want to ensure that the data will be fetched again, set this member
 to -1 in 
\family typewriter
getItems()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sortTypes Defines the sort type for each column of the grid.
 Specify -2 to disable sort for that column.
 The array is created in the constructor setting all columns to 
\family typewriter
Convert.SORT_AUTODETECT
\family default
; so you can just change a specific column with the sort type you want.
 
\begin_inset Newline newline
\end_inset

The column index always excludes the check column.
 So a grid with 3 columns and a check, the 
\family typewriter
sortTypes
\family default
 length will be 3, which will be the same length of a grid with 3 columns
 without a check.
 The other sort types are: 
\family typewriter
Convert.SORT_OBJECT
\family default
, 
\family typewriter
Convert.SORT_STRING
\family default
, 
\family typewriter
Convert.SORT_INT
\family default
, 
\family typewriter
Convert.SORT_DOUBLE
\family default
, 
\family typewriter
Convert.SORT_DATE
\family default
, 
\family typewriter
Convert.
\begin_inset Newline newline
\end_inset

SORT_COMPARABLE
\family default
, and 
\family typewriter
Convert.SORT_STRING_NOCASE
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useHorizontalScrollBar Set to 
\family typewriter
true
\family default
 before constructing the grids to use an horizontal scrollbar instead of
 the two left/right buttons.
 Note that this member is static so it will affect all grids created afterwards,
 unless you reset it to 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
liveScrolling Set to 
\family typewriter
true
\family default
 before calling 
\family typewriter
setDataSource()
\family default
 to enable live scrolling when using a
\family typewriter

\begin_inset Newline newline
\end_inset

DataSource
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
currencyDecimalPlaces Used to show a given (set of) column(s) formatted
 as currency.
 You must assign this with an array with the column count, and place the
 wanted number of decimal places, or -1 if you don't want to format it.
 Note that the original value must be already formatted with the wanted
 number of decimal places, and also that only the displayed value is changed;
 the internal value will remain without formatting.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Grid g = new Grid(new String[]{"Name","Age","Salary"},false);
\end_layout

\begin_layout Plain Layout

g.currencyDecimalPlaces = new int[]{-1,-1,2}; // ignore name and age, and
 format salary with 2 decimal places.
 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableSelectDisabledCell Set to 
\family typewriter
false
\family default
 to disallow the selection of a row if the selected cell is disabled (via
\begin_inset Newline newline
\end_inset


\family typewriter
CellController
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lineScroll Set to 
\family typewriter
true
\family default
 to enable navigation per line instead of per page when in non-penless mode.
 By default, in pen mode (devices with touch-screen), when the user press
 up/down, the grid is scrolled one page at a time.
 Setting this flag to 
\family typewriter
true
\family default
 makes it scroll a line at a time.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderGap Defines the border gap when using 
\family typewriter
CellController.getBackColor()
\family default
.
 Setting it to something bigger than 0 will make a space between the cells.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
aligns The aligns that are used in the constructor.
 You may change them after the constructor is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
titleMayBeClipped When the width of a title is greater than the width you
 specified for a the column, the title's width is used instead.
 Set this flag to 
\family typewriter
true
\family default
 to disable this behaviour.
 
\end_layout

\begin_layout Standard
Another sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String []gridCaptions = {"Caption 1", "Caption 2", "Caption 3", "Caption
 4", "Caption 5", "Caption 6", "Caption 7" };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int ww = fm.getTextWidth("xxxxxxxxx"); 
\end_layout

\begin_layout Plain Layout

	int gridWidths[] = {ww, ww, ww, ww, ww, ww, ww};
\end_layout

\begin_layout Plain Layout

	int gridAligns[] = { LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT}; 
\end_layout

\begin_layout Plain Layout

	grid = new Grid( gridCaptions, gridWidths, gridAligns, false );
\end_layout

\begin_layout Plain Layout

	grid.firstStripeColor = Color.GREEN;
\end_layout

\begin_layout Plain Layout

	grid.secondStripeColor = Color.YELLOW;
\end_layout

\begin_layout Plain Layout

	grid.verticalLineStyle = Grid.VERT_NONE;
\end_layout

\begin_layout Plain Layout

	add(grid);
\end_layout

\begin_layout Plain Layout

	grid.setRect(LEFT, AFTER+2, FILL, FIT, btnRemove);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	String items[][] = new String[4][7]; 
\end_layout

\begin_layout Plain Layout

	for(int i = 0; i < 4; i++)
\end_layout

\begin_layout Plain Layout

		for(int j = 0; j < 7; j++)
\end_layout

\begin_layout Plain Layout

			items[i][j] = "BRAZIL " + j;
\end_layout

\begin_layout Plain Layout

	grid.setItems(items); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
ToolTip 
\end_layout

\begin_layout Standard
It allows the display of a tooltip when user keeps the pen in the control.
 On Windows and Linux desktop, the tooltip is also shown when the mouse
 stays over a control.
 The default popup delay (
\family typewriter
millisDelay
\family default
) is 1000 ms and the amount of time it will be displayed (
\family typewriter
millisDisplay
\family default
) is 2000 ms (a pen up also hides the control).
 The tooltip must always be added after the control is added and had its
 bounds set; otherwise, you must call the added method to initialize the
 tip's bounds.
\end_layout

\begin_layout Standard
You can set the border color by changing the 
\family typewriter
borderColor
\family default
 field (no border by default) and also the internal gap (the field 
\family typewriter
insideGap
\family default
).
 By default, it is -1 and no border is shown.
 
\end_layout

\begin_layout Standard
The static members 
\family typewriter
distX
\family default
 and 
\family typewriter
distY
\family default
 lets you set the default distance from the control for all tooltips.
 They must be set before the tooltip is created and are 0 by default.
 
\end_layout

\begin_layout Standard
The constructor receives the control which the tooptip refers to and the
 message that will be displayed.
 You can use the new line character 
\family typewriter

\backslash
n
\family default
 like a label control.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ToolTip t = new ToolTip(control, "Hi!
\backslash
nIt's Me"); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\family typewriter
ControlEvent.PRESSED
\family default
 event will be dispatched to the attached control right before the text
 is shown.
 You can then set the tip to a new value using 
\family typewriter
setText()
\family default
; setting to an empty string will disable the tooltip at that moment.
 Calling 
\family typewriter
setControlRect()
\family default
 also changes the rectangle around which the tooltip will be displayed.
 By default, it's used the absolute rectangle of the control passed in the
 constructor.
 The placement of the tooltip will be defined based on it, in a way that
 the control is not obscured.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
ToolTip
\family default
 implements the 
\family typewriter
PenListener
\family default
 interface.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ToolTip.distX = 10; // 0 by default
\end_layout

\begin_layout Plain Layout

ToolTip.distY = 4; // 0 by default
\end_layout

\begin_layout Plain Layout

ToolTip.insideGap = 8; // 4 by default 
\end_layout

\begin_layout Plain Layout

Button b; 
\end_layout

\begin_layout Plain Layout

add(b = new Button("Hello Tooltip!"),CENTER,BOTTOM); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ToolTip t = new ToolTip(b, "Hi, this is a button");
\end_layout

\begin_layout Plain Layout

t.borderColor = 0x00FF00; // -1 (none) by default 
\end_layout

\begin_layout Plain Layout

t.millisDelay = 500; // 1000 by default t.millisDisplay = 4000; // 2000 by
 default
\end_layout

\begin_layout Plain Layout

t.setBackColor(Color.getRGB(250,0,0)); // same as control's container by default
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private void addToolTip(Control c, String text)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ToolTip t = new ToolTip(c,text);
\end_layout

\begin_layout Plain Layout

	t.millisDelay = 500;
\end_layout

\begin_layout Plain Layout

	t.millisDisplay = 5000;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (Settings.isColor)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		t.borderColor = Color.BLACK;
\end_layout

\begin_layout Plain Layout

		t.setBackColor(Color.getRGB(250,250,0));
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	add(btnChooseColor = new Button("Choose new background color"), LEFT, TOP+2);
\end_layout

\begin_layout Plain Layout

	addToolTip(btnChooseColor, "Click this button to open a
\backslash
nChoiceDialog that contains a
\backslash
nColorList control from where
\backslash
nyou can choose a back new color");
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ToolTip
\family default
 class has one public constructor and other methods (some methods heired
 from 
\family typewriter
Control
\family default
 are ommited):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ToolTip(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

message) Constructs a tooltip.
 
\family typewriter
control
\family default
 is the control which supports the tip.
 If 
\family typewriter
null
\family default
, you must call 
\family typewriter
setControlRect()
\family default
 and show it by your own.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dontShowTipOnMouseEvents() Stop using mouse events to show the tooltip.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
split(String
\begin_inset space ~
\end_inset

msg,
\begin_inset space ~
\end_inset

FontMetrics
\begin_inset space ~
\end_inset

fm) Use this handy method to split the text in order to correctly fit the
 window.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String msg = "a very long text that will be split to fit in the window";
\end_layout

\begin_layout Plain Layout

new ToolTip(control, ToolTip.split(msg, fm));
\end_layout

\end_inset

 Make sure that 
\family typewriter
fm
\family default
 will be the font's 
\family typewriter
FontMetrics
\family default
 (if you plan to change the font after calling the constructor).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
show() Shows the tooltip.
 If you want to show the tooltip programatically, you must do something
 like: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

toolTip.setText(msg);
\end_layout

\begin_layout Plain Layout

toolTip.setControlRect(lbCompany.getAbsoluteRect());
\end_layout

\begin_layout Plain Layout

toolTip.show(); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
hide() Hides the tooltip.
 
\end_layout

\begin_layout Chapter
Some Advanced Controls
\end_layout

\begin_layout Standard
In this chapter, some advanced controls will be described in detail.
 They are organized in alphabetical order.
\end_layout

\begin_layout Section
AlignedLabelsContainer
\end_layout

\begin_layout Standard
This class is a 
\family typewriter
Container
\family default
 used to align all controls to the maximum width of a set of labels.
 You can define the label alignment.
 The controls that you add to this container are placed at the right of
 the labels.
\end_layout

\begin_layout Standard
Here's a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] labels =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Name",
\end_layout

\begin_layout Plain Layout

	"Born date",
\end_layout

\begin_layout Plain Layout

	"Telephone",
\end_layout

\begin_layout Plain Layout

	"Address",
\end_layout

\begin_layout Plain Layout

	"City",
\end_layout

\begin_layout Plain Layout

	"Country", 
\end_layout

\begin_layout Plain Layout

	""
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

AlignedLabelsContainer c = new AlignedLabelsContainer(labels);
\end_layout

\begin_layout Plain Layout

c.setBorderStyle(BORDER_LOWERED);
\end_layout

\begin_layout Plain Layout

c.labelAlign = RIGHT;
\end_layout

\begin_layout Plain Layout

c.foreColors = new int[]{Color.RED,Color.BLACK,Color.BLACK,Color.BLACK,Color.BLACK,Col
or.BLACK,Color.BLACK,};
\end_layout

\begin_layout Plain Layout

c.setInsets(2,2,2,2);
\end_layout

\begin_layout Plain Layout

c.setFont(font.asBold()); // labels are bold
\end_layout

\begin_layout Plain Layout

c.childrenFont = font; // but controls are normal
\end_layout

\begin_layout Plain Layout

add(c,LEFT+2,TOP+2,FILL-2,PREFERRED+4);
\end_layout

\begin_layout Plain Layout

for (int i =0; i < labels.length-2; i++)
\end_layout

\begin_layout Plain Layout

	c.add(new Edit(),LEFT+2,AFTER+(i==0?2:0));
\end_layout

\begin_layout Plain Layout

c.add(new ComboBox(new String[]{"Brazil","France"}),LEFT+2,AFTER);
\end_layout

\begin_layout Plain Layout

c.add(new Button("Insert data"),RIGHT,SAME);
\end_layout

\begin_layout Plain Layout

c.add(new Button("Clear data"),RIGHT,AFTER,SAME,PREFERRED); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code above generates a screen similar to the shown below taken from
 UIGadgets using Android style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/align_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
It is possible to do this alignment by hand.
 However, it is much easier using this control.
\end_layout

\begin_layout Standard
This class has the following public fields, constructors and methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
childrenFont Set this member to the font you want to set to the controls
 that are added to this container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
foreColors Set an array with the same number of labels and the colors you
 want to show for each label.
 If the number of labels differ, you will get an exception.
 It can be used to hide a label: just set its foreground color to the background
 color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
labelAlign The alignment of the labels.
 Defaults to 
\family typewriter
LEFT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AlignedLabelsContainer() Creates a new 
\family typewriter
AlignedLabelsContainer
\family default
 without labels.
 You may call 
\family typewriter
setLabels()
\family default
 to set the labels.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AlignedLabelsContainer(String[]
\begin_inset space ~
\end_inset

labels) Creates a new 
\family typewriter
AlignedLabelsContainer
\family default
 with the given labels.
 You may pass 
\family typewriter
null
\family default
, but be sure to call 
\family typewriter
setLabels()
\family default
 to set the labels.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AlignedLabelsContainer(String[]
\begin_inset space ~
\end_inset

labels,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

vgap) Creates a new 
\family typewriter
AlignedLabelsContainer
\family default
 with the given labels.
 
\family typewriter
vgap
\family default
 is an extra gap between rows, which may be negative.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setLabels(String[]
\begin_inset space ~
\end_inset

labels,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

vgap) Sets the labels and the vertical extra gap, which may be negative.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLineY(int
\begin_inset space ~
\end_inset

line) Given a line (staring from 0), returns the y position.
 Can be used to easily align the controls.
 Note that the line number may be greater than the number of assigned labels.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(chCasado = new Check("Married"),LEFT,getLineY(4)+2); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLineHeight() Returns the height of a line.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLeftInset() Returns the left inset.
 To be able to center a control, you have to do something like: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

control.setRect(CENTER-getLeftInset()/2,...); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
AnimatedButton
\end_layout

\begin_layout Standard
An animated button control.
 It extends 
\family typewriter
Animation
\family default
, the class described in the next section.
\end_layout

\begin_layout Standard
This control displays an animated button which can take 
\family typewriter
S
\family default
 different states and each state is fade in or out in 
\family typewriter
F
\family default
 frames.
 
\family typewriter
S
\family default
 and 
\family typewriter
F
\family default
 represent the two first constructor arguments.
 The frames of this special animation have to be ordered to be supported
 by this class.
 The states are numbered from 0 to 
\family typewriter
S-1
\family default
 and the frames order is the following depending on the layout type value:
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_OUT_LAYOUT
\family default
: 
\family typewriter
S0F0
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S0F2
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F2
\family default
,
\family typewriter
S2F0
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F2
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_IN_LAYOUT
\family default
: 
\family typewriter
S0F2
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S0F0
\family default
,
\family typewriter
S1F2
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S2F2
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F0
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_OUT_IN_LAYOUT
\family default
: 
\family typewriter
S0F0
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F0
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S0F1
\family default
 
\end_layout

\begin_layout Standard
where 
\family typewriter
S
\family default
 stands for state, 
\family typewriter
F
\family default
 for frame and where 
\family typewriter
S0F0
\family default
, 
\family typewriter
S1F0
\family default
, and 
\family typewriter
S2F0
\family default
 are the full states and the others are transition frames.
 
\end_layout

\begin_layout Standard
Here is an example of how to use this class:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.game.AnimatedButton;
\end_layout

\begin_layout Plain Layout

import totalcross.io.IOException;
\end_layout

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.image.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	AnimatedButton btn;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			btn = new AnimatedButton(new Image("Ping_onOff.png"), 2,6,AnimatedButton.FADE_O
UT_LAYOUT,-1,50);
\end_layout

\begin_layout Plain Layout

			add(btn, CENTER, CENTER);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (ImageException e) {}
\end_layout

\begin_layout Plain Layout

		catch (IOException e) {}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

where 
\family typewriter
Ping_onOff.png
\family default
 is the following image:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/Ping_onOff.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

which results in the following screenshots (the button starts an animation
 when it's clicked on):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_009.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_010.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_011.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_012.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public constructor and methods (excluding some
 fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AnimatedButton(Image
\begin_inset space ~
\end_inset

frames,int
\begin_inset space ~
\end_inset

states,int
\begin_inset space ~
\end_inset

framesPerState,int
\begin_inset space ~
\end_inset

layoutType,int
\begin_inset space ~
\end_inset

transColor,int
\begin_inset space ~
\end_inset

framePeriod) Animated button constructor, where 
\family typewriter
frames
\family default
 is the button different states frames in multi-framed PNG format, 
\family typewriter
states
\family default
 is the number of states of the button, 
\family typewriter
framesPerState
\family default
 is the number of frames for each state, 
\family typewriter
layoutType
\family default
 must be 
\family typewriter
FADE_OUT_LAYOUT
\family default
, 
\family typewriter
FADE_IN_LAYOUT
\family default
 or 
\family typewriter
FADE_OUT_IN_LAYOUT
\family default
, 
\family typewriter
transColor
\family default
 is the the transparency color, and 
\family typewriter
framePeriod
\family default
 is the delay in milliseconds between two frames.
\begin_inset Newline newline
\end_inset

In the case of a 
\family typewriter
S
\family default
 states button of 
\family typewriter
F
\family default
 frames per state, 
\family typewriter
FADE_OUT_LAYOUT
\family default
 means that the frames are a 
\family typewriter
S
\family default
 set of 
\family typewriter
F
\family default
 frames that are fading out the state, that means the first frame of of
 each set is the full state image.
 In the 
\family typewriter
FADE_IN_LAYOUT
\family default
 layout, it's the opposite, namely the last frame of each set represents
 the state ending position.
 Finaly the 
\family typewriter
FADE_OUT_IN_LAYOUT
\family default
 is a mix of the two others, because inter-frames represent successively
 fading out from one state to fading in to next state.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setState(int
\begin_inset space ~
\end_inset

state) Sets the animated button state, where 
\family typewriter
state
\family default
 range from 0 to the number of states - 1.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getState() Gets the animated button state.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEvent(Event
\begin_inset space ~
\end_inset

event) Animated button event handler.
\end_layout

\begin_layout Section
Animation
\end_layout

\begin_layout Standard
This control displays an animation that can be loaded from indexed PNG files
 (one frame per image), a multi-framed PNG (this kind of PNG file contains
 a list of images having all the same size and that lay side by side), or
 a GIF.
 Some examples taken from the game Scape and GifAnimatedTest are shown below,
 where the first one uses multi-framed PNGs and the second one uses GIFs
 (the PNG images are below the sample windows which use them):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/hockey.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ball.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pauseIfNotVisible Set to 
\family typewriter
true
\family default
 to stop the animation if its parent window is not the topmost.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawOp Drawing operation used when the animation images are copied to the
 screen buffer.
 It receives the same values of 
\family typewriter
Graphics.drawOp
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
framePeriod Delay between two frames.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isPlaying Reflects the animation play state.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isPaused Reflects the animation pause state.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
transColor Transparency color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
framesBuffer Frames buffer.
 It's the image passed to this class to execute the animation.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Animation(Image
\begin_inset space ~
\end_inset

frames,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

framePeriod) Constructs an 
\family typewriter
Animation
\family default
 where 
\family typewriter
frames 
\family default
is a single image containing all frames.
 The number of frames and the transparent colors are gotten from the image
 and 
\family typewriter
framePeriod
\family default
 is the delay in milliseconds between two frames.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Animation(Image
\begin_inset space ~
\end_inset

frames,int
\begin_inset space ~
\end_inset

frameCount,int
\begin_inset space ~
\end_inset

transColor,int
\begin_inset space ~
\end_inset

framePeriod) Similar to the above one.
 However, this one receives a frame count instead of using the number of
 frames of the image and a transparent color instead of using the image
 transparent color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setImage(Image
\begin_inset space ~
\end_inset

frames,int
\begin_inset space ~
\end_inset

frameCount,int
\begin_inset space ~
\end_inset

transColor,int
\begin_inset space ~
\end_inset

framePeriod) Changes the image and its animation attributes passed originally
 in the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of frames of the animation image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableEvents(int
\begin_inset space ~
\end_inset

mask) Enable the posting of events.
 By default the posting of events are disabled.
 The values of mask can be one out of: 
\family typewriter
eventNone 
\family default
(no notify at all), 
\family typewriter
eventFinish
\family default
 (notifies animation endings), 
\family typewriter
eventLoop
\family default
 (notifies animation loops), and 
\family typewriter
eventFrame
\family default
 (notifies animation frames).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pause() Pauses a running animation.
 If the animation is not playing, this call has no effect.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resume() Resumes a paused animation.
 If the animation is not playing, this call has no effect.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stop() Stops the animation.
 If the animation is not playing, this call has no effect.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
start(int
\begin_inset space ~
\end_inset

sFrame,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

eFrame,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

step,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

loops) Starts the animation with a frame range.
 This function starts an animation by specifying the frame range and a loop
 flag.
 If the animation is playing, this call has no effect.
 
\family typewriter
sFrame
\family default
 is the start frame index, 
\family typewriter
eFrame
\family default
 is the final frame index, 
\family typewriter
step
\family default
 is the frame increment, and 
\family typewriter
loops
\family default
 is number of animation iterations, where 
\family typewriter
LOOPS_UNLIMITED
\family default
 must be used for an endless repetition.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
start(int
\begin_inset space ~
\end_inset

loops) Starts the animation.
 This function starts the animation and loops the specified amount of time.
 If the application is playing, this call has no effect.
 This is a simpler version of the one above.
 
\end_layout

\begin_layout Section
ArrowButton
\end_layout

\begin_layout Standard
A class used to display a 
\family typewriter
Button
\family default
 with an arrow inside.
 The following code shows the window below it:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.gfx.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ArrowButton b1 = new ArrowButton(Graphics.ARROW_UP, 10, Color.BLACK);
\end_layout

\begin_layout Plain Layout

		add(b1, LEFT, TOP);
\end_layout

\begin_layout Plain Layout

		ArrowButton b2 = new ArrowButton(Graphics.ARROW_DOWN, 20, Color.BLUE);
\end_layout

\begin_layout Plain Layout

		add(b2, AFTER, SAME);
\end_layout

\begin_layout Plain Layout

		ArrowButton b3 = new ArrowButton(Graphics.ARROW_LEFT, 30, Color.CYAN);
\end_layout

\begin_layout Plain Layout

		add(b3, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

		ArrowButton b4 = new ArrowButton(Graphics.ARROW_RIGHT, 40, Color.GREEN);
\end_layout

\begin_layout Plain Layout

		add(b4, AFTER, SAME);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just one public attribute, constructor, and the following
 methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
arrowColor The arrow's color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ArrowButton(byte
\begin_inset space ~
\end_inset

direction,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

prefWH,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

arrowColor) Constructs an 
\family typewriter
ArrowButton
\family default
, where 
\family typewriter
direction
\family default
 must be one out of 
\family typewriter
Graphics.ARROW_UP
\family default
, 
\family typewriter
Graphics.ARROW_DOWN
\family default
, 
\family typewriter
Graphics.ARROW_LEFT
\family default
, or 
\family typewriter
Graphics.ARROW_RIGHT
\family default
; 
\family typewriter
prefWH
\family default
 is the desired arrow width/height (the effective arrow's size will be computed
 based in the current width/height), and 
\family typewriter
arrowColor
\family default
 is the arrow color, which can be changed by setting the 
\family typewriter
arrowColor
\family default
 field.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setArrowSize(int
\begin_inset space ~
\end_inset

kk) Changes the arrow size of the button.
 Note that the button size won't be changed.
 Some examples using 
\family typewriter
b4
\family default
 of the above picture:
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
b4.setArrowSize(20);
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
b4.setArrowSize(80);
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Shows a string representation of the object and its direction.
 For example, the code below
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.debug(b1.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b2.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b3.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b4.toString());
\end_layout

\end_inset

prints the following on the console:
\begin_inset Newline newline
\end_inset

totalcross.ui.ArrowButton@131f71a, dir: 1 
\begin_inset Newline newline
\end_inset

totalcross.ui.ArrowButton@15601ea, dir: 2 
\begin_inset Newline newline
\end_inset

totalcross.ui.ArrowButton@197d257, dir: 3 
\begin_inset Newline newline
\end_inset

totalcross.ui.ArrowButton@7259da, dir: 4
\end_layout

\begin_layout Section
Bar
\end_layout

\begin_layout Standard

\family typewriter
Bar
\family default
 is a class that provides a title area and a button area (at right).
 The title and the button are optional, although it doesn't make sense to
 have a bar without title and buttons.
 You can add or remove buttons, and change the title text; the title text
 can have an icon at left.
 
\end_layout

\begin_layout Standard
When a button is pressed, a 
\family typewriter
ControlEvent.PRESSED
\family default
 is sent to the caller, and the button index can be retrieved using the
 
\family typewriter
getSelectedIndex()
\family default
 method.
 By default, the background is shaded (
\family typewriter
BACKGROUND_SHADED
\family default
).
 You can change it to plain using 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

backgroundStyle = BACKGROUND_SOLID;
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Here's an example of how to use it: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Font f = Font.getFont(true,Font.NORMAL_SIZE+2);
\end_layout

\begin_layout Plain Layout

Bar h1 = new Bar("fakeboot");
\end_layout

\begin_layout Plain Layout

h1.canSelectTitle = true;
\end_layout

\begin_layout Plain Layout

h1.setFont(f);
\end_layout

\begin_layout Plain Layout

h1.setBackForeColors(0x0A246A,Color.WHITE);
\end_layout

\begin_layout Plain Layout

h1.addButton(new Image("ic_dialog_alert.png"));
\end_layout

\begin_layout Plain Layout

h1.addButton(new Image("ic_dialog_info.png"));
\end_layout

\begin_layout Plain Layout

add(h1, LEFT,0,FILL,PREFERRED); // use 0 instead of TOP to overwrite the
 default menu area 
\end_layout

\end_inset

which results in the following images using Android style, where the bottom
 images show the title and one of the buttons being pressed:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Note that the top and bottom components of the sample AndroidUI are bars.
\end_layout

\begin_layout Standard
This class has just two public attributes, two constructors, and the following
 methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
canSelectTitle Set to 
\family typewriter
true
\family default
 to allow the title to be selected and send events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
titleAlign The title horizontal alignment (
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
).
 Defaults to 
\family typewriter
LEFT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Bar() Constructs a 
\family typewriter
Bar
\family default
 object without a title.
 Note that if you call the 
\family typewriter
setTitle()
\family default
 method, a
\begin_inset Newline newline
\end_inset


\family typewriter
RuntimeException
\family default
 will be thrown.
 If you want to change the title later, use the other constructor and pass
 an empty 
\family typewriter
String
\family default
 (
\family typewriter
""
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Bar(String
\begin_inset space ~
\end_inset

title) Constructs a 
\family typewriter
Bar
\family default
 object with the given title.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setIcon(Image
\begin_inset space ~
\end_inset

icon) An image icon that can be placed at the left of the title (before
 it).
 It is only shown if there's a title set.
 Pass 
\family typewriter
null
\family default
 to remove the icon if it was previously set.
 This can be used before or after adding the bar to a container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTitle(String
\begin_inset space ~
\end_inset

newTitle) Changes the title to the given one.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTitle() Retrieves the current title.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addButton(Image
\begin_inset space ~
\end_inset

icon) Adds an image button.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setButtonRepeatRate(int
\begin_inset space ~
\end_inset

idx,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

ms) Sets the button with the given index with an auto-repeat interval of
 the given ms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addControl(Control
\begin_inset space ~
\end_inset

c) Adds a 
\family typewriter
Control
\family default
.
 Not all types of controls are supported.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeButton(int
\begin_inset space ~
\end_inset

index) Removes a button at the given index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected button, or -1 if none was selected.
 The title is always index 0 (even if there's no title), and the buttons
 start at index 1.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
assignBackKeyToButton(int
\begin_inset space ~
\end_inset

idx) Assigns the BACK key on Android (mapped to 
\family typewriter
SpecialKeys.ESCAPE
\family default
) to the given button.
 This can only be called after the bar has been added to a container.
 For example, if button 1 is to be assigned with 
\family typewriter
totalcross.res.Resources.back
\family default
, call 
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

assignBackKeyToButton(1);
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
createSpinner(int
\begin_inset space ~
\end_inset

color) Creates a spinner with the given color.
 The spinner will be placed at the right of the title (only works if there's
 a title).
 It must be created before the bar is added to a container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
startSpinner() Shows and starts the spinner (if one has been assigned to
 the spinner field).
 If there is no spinner, a 
\family typewriter
NullPointerException
\family default
 will be thrown.
 
\begin_inset Newline newline
\end_inset

Changing the code of the example given above after line 7 results in:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

h1.createSpinner(Color.WHITE);
\end_layout

\begin_layout Plain Layout

add(h1, LEFT,0,FILL,PREFERRED); // use 0 instead of TOP to overwrite the
 default menu area
\end_layout

\begin_layout Plain Layout

h1.startSpinner();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
stopSpinner() Stops and hides the spinner (if one has been assigned to the
 spinner field).
 If there is no spinner, a 
\family typewriter
NullPointerException
\family default
 will be thrown.
\end_layout

\begin_layout Section
ButtonMenu
\end_layout

\begin_layout Standard
This class adds a multi-button menu that can be scrolled horizontally (single-ro
w) or vertically (multiple-rows), using a scroll bar or flicking.
 The buttons can have almost all properties present in the 
\family typewriter
Button
\family default
 class, like (the 
\family typewriter
ButtonMenu
\family default
 fields listed below similar to the ones in the class 
\family typewriter
Button
\family default
 are ommited from the fields description at the end of this section):
\end_layout

\begin_layout Itemize

\family typewriter
borderType
\family default
 (
\family typewriter
Button.setBorder()
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
cornerRadius3DG
\family default
 (
\family typewriter
Button.cornerRadius3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
borderWidth3DG
\family default
 (
\family typewriter
Button.borderWidth3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
borderColor3DG
\family default
 (
\family typewriter
Button.borderColor3DG
\family default
) 
\end_layout

\begin_layout Itemize

\family typewriter
topColor3DG
\family default
 (
\family typewriter
topColor3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
bottomColor3DG
\family default
 (
\family typewriter
bottomColor3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
pressedColor
\family default
 (
\family typewriter
Button.setPressedColor()
\family default
)
\end_layout

\begin_layout Standard
There are also other properties that can be set, like:
\end_layout

\begin_layout Itemize

\family typewriter
textGap 
\end_layout

\begin_layout Itemize

\family typewriter
buttonVertGap 
\end_layout

\begin_layout Itemize

\family typewriter
buttonHorizGap 
\end_layout

\begin_layout Itemize

\family typewriter
imageSize 
\end_layout

\begin_layout Itemize

\family typewriter
borderGap
\end_layout

\begin_layout Standard
The sizes above are not in pixels, but in percentage of the font's height.
 So, a value of 25 means 25% of the font's height, or 1/4; 150 means 150%
 of the font's height, or 1.5x; and so on.
 This enabled the gaps be constant in physical inches no matter the screen
 DPI or resolution.
 
\end_layout

\begin_layout Standard
The AndroidUI program has good samples on how to use this class.
 Some images are shown below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses): 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
textGap The gap between the image and the text, in percentage of the font's
 height.
 Defaults to 25 (%).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buttonVertGap The gap between two vertical buttons, in percentage of the
 font's height.
 Also used as gap between the button and the 
\family typewriter
ButtonMenu
\family default
's border.
 Defaults to 100 (%).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buttonHorizGap The gap between two horizontal buttons, in percentage of
 the font's height.
 Also used as gap between the button and the 
\family typewriter
ButtonMenu
\family default
's border.
 Defaults to 100 (%).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
imageSize The size of the image, in percentage of the font's height.
 Defaults to 200 (%).
 Set to -1 to keep the original size.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderGap The gap between the text or image and the button borders, in percentag
e of the font's height.
 Defaults to 10 (%).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pagePositionDisposition If 
\family typewriter
disposition
\family default
 in the constructor equals 
\family typewriter
MULTIPLE_HORIZONTAL
\family default
, it sets how the
\family typewriter

\begin_inset Newline newline
\end_inset

PagePosition
\family default
 control will replace the 
\family typewriter
ScrollPosition
\family default
 control.
 Its value can be
\begin_inset Newline newline
\end_inset


\family typewriter
PAGEPOSITION_AT_BOTTOM
\family default
 (place at bottom), 
\family typewriter
PAGEPOSITION_AT_TOP
\family default
 (place at top), or 
\family typewriter
NO_PAGEPOSITION
\family default
 (don't use a 
\family typewriter
PagePosition
\family default
, use the 
\family typewriter
ScrollPosition
\family default
 instead).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
textPosition Where to place the text (supports only 
\family typewriter
LEFT
\family default
, 
\family typewriter
TOP
\family default
, 
\family typewriter
RIGHT
\family default
, 
\family typewriter
BOTTOM
\family default
, or 
\family typewriter
CENTER
\family default
, without adjustments).
 It also supports 
\family typewriter
RIGHT_OF
\family default
 (
\family typewriter
relativeToText
\family default
 is computed automatically).
 Defaults to 
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ButtonMenu(Image[]
\begin_inset space ~
\end_inset

images,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

disposition) Constructs a 
\family typewriter
ButtonMenu
\family default
 with the giving images and no names.
 The 
\family typewriter
dispositon
\family default
 values can be: 
\family typewriter
SINGLE_COLUMN
\family default
 (the menu will have a single column, multiple rows, and will scroll vertically)
, 
\family typewriter
SINGLE_ROW
\family default
 (the menu will have a single row, multiple columns, and will scroll horizontall
y), 
\family typewriter
MULTIPLE_HORIZONTAL
\family default
 (the menu will have multiple columns, rows, and will scroll horizontally),
 or 
\family typewriter
MULTIPLE_VERTICAL
\family default
 (the menu will have multiple columns, rows, and will scroll vertically).
 The 
\family typewriter
images
\family default
 array can't be 
\family typewriter
null
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ButtonMenu(String[]
\begin_inset space ~
\end_inset

names,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

disposition) Constructs a 
\family typewriter
ButtonMenu
\family default
 with the giving names and no images.
 The 
\family typewriter
disposition
\family default
 parameter is used in the same was as the above method.
 The 
\family typewriter
names
\family default
 array can't be 
\family typewriter
null
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ButtonMenu(Image[]
\begin_inset space ~
\end_inset

images,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

names,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

disposition) Constructs a 
\family typewriter
ButtonMenu
\family default
 with the giving images and names.
 The 
\family typewriter
disposition
\family default
 parameter is used in the same was as the above method.
 One of the arrays can be 
\family typewriter
null
\family default
, but not both of them.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onFontChanged() Creates and resizes all buttons and images.
 For better performance, call 
\family typewriter
setFont()
\family default
 for this control BEFORE calling 
\family typewriter
add()
\family default
 or 
\family typewriter
setRect()
\family default
 (this is a general rule for all other controls as well).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width as if all images were in
 a single row.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth(int
\begin_inset space ~
\end_inset

cols) Returns the preferred width for the given number of columns.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the preferred height as if all images were
 in a single row.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight(int
\begin_inset space ~
\end_inset

rows) Returns the preferred height for the given number of rows.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(ib2,LEFT+10,CENTER,FILL-10,ib2.getPreferredHeight(4)); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the index of the selected button.
\end_layout

\begin_layout Section
ComboBoxEditable
\end_layout

\begin_layout Standard
This control is a 
\family typewriter
ComboBox
\family default
 and is usually used as an edit that holds old typed values.
 When the user types a word, it is automatically selected in the combo box.
 Here's a sample of how to use it similar to the one found in UIGadgets:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] items = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Ana",
\end_layout

\begin_layout Plain Layout

	"Barbara",
\end_layout

\begin_layout Plain Layout

	"Raul",
\end_layout

\begin_layout Plain Layout

	"Marcelo",
\end_layout

\begin_layout Plain Layout

	"Eduardo",
\end_layout

\begin_layout Plain Layout

	"Denise",
\end_layout

\begin_layout Plain Layout

	"Michelle",
\end_layout

\begin_layout Plain Layout

	"Guilherme",
\end_layout

\begin_layout Plain Layout

	"Vera",
\end_layout

\begin_layout Plain Layout

	"Dulce",
\end_layout

\begin_layout Plain Layout

	"Leonardo",
\end_layout

\begin_layout Plain Layout

	"Andre",
\end_layout

\begin_layout Plain Layout

	"Gustavo",
\end_layout

\begin_layout Plain Layout

	"Anne",
\end_layout

\begin_layout Plain Layout

	"Renato",
\end_layout

\begin_layout Plain Layout

	"Zelia",
\end_layout

\begin_layout Plain Layout

	"Helio"
\end_layout

\begin_layout Plain Layout

};    
\end_layout

\begin_layout Plain Layout

ComboBoxEditable cbe = new ComboBoxEditable(items);
\end_layout

\begin_layout Plain Layout

cbe.qsort();
\end_layout

\begin_layout Plain Layout

add(cbe, LEFT,BOTTOM-100);  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next images show the result of this sample and some screenshots from
 UIGadgets:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has one attribute, constructors, and one method (excluding some
 fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
edit The edit used in this combo box.
 You can customize it if you need.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxEditable() Similar to 
\family typewriter
ComboBox()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxEditable(Object[]
\begin_inset space ~
\end_inset

items) Similar to 
\family typewriter
ComboBox(ListBox userListBox)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxEditable(ListBox
\begin_inset space ~
\end_inset

userListBox) Similar to 
\family typewriter
ComboBox(Object[] items)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ComboBoxEditable(ComboBoxDropDown
\begin_inset space ~
\end_inset

userPopList) Similar to 
\family typewriter
ComboBox(ComboBoxDropDown userPopList)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setAutoAdd(boolean
\begin_inset space ~
\end_inset

on,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

keepSorted) Set to 
\family typewriter
true
\family default
 to add automatically new names that were typed in the edit, where 
\family typewriter
on
\family default
 is a flag indicating if auto add must be set and 
\family typewriter
keepSorted
\family default
 indicates if the list must be sorted after a new item is added by the auto
 add.
\end_layout

\begin_layout Section
ColorList
\end_layout

\begin_layout Standard
Implements a 
\family typewriter
ListBox
\family default
 where colors can be choosen from.
 The only functional methods are 
\family typewriter
setColors()
\family default
, 
\family typewriter
getSelectedItem()
\family default
 and 
\family typewriter
getSelectedColor()
\family default
.
 Next an example of how to use this class as a combo box color chooser:
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(foreCombo = new ComboBox(new ColorList()), CENTER, BOTTOM); 
\end_layout

\end_inset

which results in the following windows:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This special 
\family typewriter
ListBox
\family default
 by default contains the 256 colors of an 8 bpp screen.
 Each item has a color with its hexadecimal number representation.
 
\end_layout

\begin_layout Standard
Consider using 
\family typewriter
ColorChooserBox
\family default
 instead.
\end_layout

\begin_layout Standard
This class has just one ommited public default constructor, and the following
 methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setColors(int[]
\begin_inset space ~
\end_inset

newColors) Sets the colors that will be displayed.
 That is, it changes the default set of colors used by the default constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Returns the selected 
\family typewriter
ColorList.Item
\family default
 object, or a black 
\family typewriter
ColorList.Item
\family default
 representing the black color if none was selected.
 From the 
\family typewriter
ColorList.Item
\family default
 you can retrieve the color as 
\family typewriter
int
\family default
.
 Use the 
\family typewriter
getSelectedColor()
\family default
 method to retrieve the color directly.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedColor() Returns the selected color or black if no one is selected.
\end_layout

\begin_layout Standard
This class has a nested class called 
\family typewriter
Item
\family default
.
 This is the item added to the 
\family typewriter
ColorList
\family default
, containing the color as 
\family typewriter
String
\family default
 (hexadecimal representation) and as 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
ColorList.Item
\family default
 class has just one attribute, one constructor, and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The integer color code.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ColorList.Item(int
\begin_inset space ~
\end_inset

value) Constructs a new 
\family typewriter
Item
\family default
 with the given color integer value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
set(int
\begin_inset space ~
\end_inset

value) Sets an 
\family typewriter
Item
\family default
 with the given color integer value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

other) Checks if two 
\family typewriter
Item
\family default
s have the same integer color value or if the parameter is a 
\family typewriter
String
\family default
, checks if its value is equal to the string hexadecimal representation
 of the 
\family typewriter
Item
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns the hexadecimal string representation of the 
\family typewriter
Item
\family default
 color.
\end_layout

\begin_layout Section
Document
\end_layout

\begin_layout Standard
Represents an HTML Document.
 To change the font size, you must change 
\family typewriter
Style.
\begin_inset Newline newline
\end_inset

defaultFontSize
\family default
.
 To change the default colors, change 
\family typewriter
UIColors.htmlXXX
\family default
 fields, and don't forget to call 
\family typewriter
htmlContainer.setBackForeColors()
\family default
 with these colors.
 
\end_layout

\begin_layout Standard
To see it being used, see the sample HtmlBrowser.
 Some screen shots of it are in the section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:HtmlContainer"

\end_inset

.
\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
baseURI Base URL for the document.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
title The title associated with this document.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vForms All forms in this document.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
passwordMode The password mode for the edits.
 Defaults to 
\family typewriter
Edit.PASSWORD_ALL
\family default
.
 It can also be 
\family typewriter
Edit.
 PASSWORD
\family default
, where the last character is shown.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Document(XmlReadable
\begin_inset space ~
\end_inset

doc) A constructor which receives a XML readable document.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Document() Default constructor.
 The document must be rendered using 
\family typewriter
renderDoc()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
loadImage(String
\begin_inset space ~
\end_inset

src,
\begin_inset space ~
\end_inset

URI
\begin_inset space ~
\end_inset

baseURI) It can be overridden by the caller in order to load an image from
 a different place.
 Must return 
\family typewriter
null
\family default
 if not handled/not found.
 By default, searches for the given file at the loaded libraries (TCZ files).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
renderDoc(XmlReadable
\begin_inset space ~
\end_inset

doc) Renders the XML readable document.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scroll(int
\begin_inset space ~
\end_inset

dir) Scrolls the document in the given direction.
 The direction values can be 
\family typewriter
RIGHT
\family default
, 
\family typewriter
LEFT
\family default
, 
\family typewriter
BOTTOM
\family default
, or 
\family typewriter
TOP
\family default
.
\end_layout

\begin_layout Section
FlowContainer
\end_layout

\begin_layout Standard
This class is a container that will place controls one after another and,
 once the width has been reached, it wraps to the next line.
 All controls must be added before calling 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
.
 When calling 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
 for this control, the height must be 
\family typewriter
PREFERRED
\family default
 (with adjustments, if needed).
 Also, if 
\family typewriter
initUI()
\family default
 is overriden, be sure to call 
\family typewriter
super.initUI()
\family default
.
\end_layout

\begin_layout Standard
Code example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Settings.uiAdjustmentsBasedOnFontHeight = true;
\end_layout

\begin_layout Plain Layout

Label l = new Label("Do you agree that TotalCross is a great development
 platform?");
\end_layout

\begin_layout Plain Layout

l.autoSplit = true;
\end_layout

\begin_layout Plain Layout

add(l, LEFT,AFTER,FILL,PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

FlowContainer fc = new FlowContainer(50,25);
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Probably Yes"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Probably No"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Maybe"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("I don't know"));
\end_layout

\begin_layout Plain Layout

add(fc, LEFT,AFTER,FILL,PREFERRED); 
\end_layout

\end_inset

which results in:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/flow_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just one public constructor, and the following methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
FlowContainer(int
\begin_inset space ~
\end_inset

hgap,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

vgap) Constructs a 
\family typewriter
FlowContainer
\family default
 with the given horizontal and vertical gaps.
 You must add all children controls before calling 
\family typewriter
setRect()
\family default
 for this container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
initUI() Places the controls on screen.
 
\end_layout

\begin_layout Section
HtmlContainer
\begin_inset CommandInset label
LatexCommand label
name "sec:HtmlContainer"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HtmlContainer
\family default
 renders an HTML Page.
\end_layout

\begin_layout Standard
Note that the form controls back and fore colors are defined by 
\family typewriter
UIColors.
\begin_inset Newline newline
\end_inset

htmlContainerControlsFore
\family default
 and 
\family typewriter
UIColors.htmlContainerControlsBack
\family default
.
 
\end_layout

\begin_layout Standard
When a link is clicked, a 
\family typewriter
PRESSED
\family default
 event is thrown, with this 
\family typewriter
HtmlContainer
\family default
 as target.
 The link can then be retrieved with the 
\family typewriter
pressedLink
\family default
 property.
\end_layout

\begin_layout Standard
Some images taken from the sample HtmlBrowser, which uses this control,
 are shown here, where the application interface style was changed to Android:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just one public attribute, an ommited public default constructor,
 and the following methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pressedLink The last link that was pressed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDocument() Returns the HTML document of this control, which is a 
\family typewriter
Document
\family default
 object.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDocument(Document
\begin_inset space ~
\end_inset

doc) Sets the document to be displayed in the 
\family typewriter
HtmlContainer
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resetWith(String
\begin_inset space ~
\end_inset

url) Resets the given form of the current document with the given parameters.
 
\end_layout

\begin_layout Section
ImageControl
\end_layout

\begin_layout Standard
A control that can show an image bigger than its area and that can be dragged
 using a pen to show the hidden parts.
 Note that, by default, events (and dragging) are disabled.
 You must call 
\family typewriter
setEventsEnabled()
\family default
 to allow dragging.
 
\end_layout

\begin_layout Standard
This is used in the Litebase sample PhotoDB, where it is possible to drag
 the picture to show other parts of it.
\end_layout

\begin_layout Standard
This class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollValue The amount to scroll when in penless mode.
 It defaults to 10.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawOp Defines the drawing operation used to draw the image that is being
 panned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
centerImage Set to 
\family typewriter
true
\family default
 to center the image in the control when it is loaded.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastX,lastY The last position used for X and Y.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderColor Change this member to set the border color.
 You may also set it to 
\family typewriter
null
\family default
 if you don't want a border color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
allowBeyondLimits Set to 
\family typewriter
true
\family default
 to let the image be dragged beyond container limits.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ImageControl(Image
\begin_inset space ~
\end_inset

img) Constructs an 
\family typewriter
ImageControl
\family default
 using the given image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ImageControl() Constructs an 
\family typewriter
ImageControl
\family default
 with no initial image.
 You must set the image with the 
\family typewriter
setImage()
\family default
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setEventsEnabled(boolean
\begin_inset space ~
\end_inset

enabled) Changes this to 
\family typewriter
true
\family default
 to enable dragging and events on the image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setImage(Image
\begin_inset space ~
\end_inset

img) Sets the image to the given one.
 If the image size is different, you must explicitly call 
\family typewriter
setRect()
\family default
 again if you want to resize the control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
moveTo(int
\begin_inset space ~
\end_inset

newX,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newY) Moves to the given coordinates, respecting the current moving policy
 regarding
\family typewriter

\begin_inset Newline newline
\end_inset

allowBeyondLimits
\family default
.
 It returns 
\family typewriter
true
\family default
 if the image's position was changed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getImage() Returns the current image assigned to this 
\family typewriter
ImageControl
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBackground(Image
\begin_inset space ~
\end_inset

img) Sets the given image as a freezed background of this image control.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getVisibleImage(boolean
\begin_inset space ~
\end_inset

includeBackground) Gets an image representing the portion being shown.
 If all image is being shown, returns the currently assigned image.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
ImageList
\end_layout

\begin_layout Standard
Implements a 
\family typewriter
ListBox
\family default
 where the items are images.
 If you don't add at least one image before calling 
\family typewriter
add()
\family default
/
\family typewriter
setRect()
\family default
, you must compute the preferred size yourself.
 
\end_layout

\begin_layout Standard
Next an example of how to use this class as a combo box color chooser: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.io.IOException;
\end_layout

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.image.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ImageList list = new ImageList();
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			list.add(new Image("black.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("blue.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("green.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("red.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("white.png"));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (ImageException e) {}
\end_layout

\begin_layout Plain Layout

		catch (IOException e) {}
\end_layout

\begin_layout Plain Layout

		add(new ComboBox(list), CENTER, BOTTOM);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using 32x32 images, the result of the above code is the following:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/imagelist_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/imagelist_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just two public constructors (excluding some fields from
 its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ImageList() Construcs an empty 
\family typewriter
ImageList
\family default
 with no images.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ImageList(Object[]
\begin_inset space ~
\end_inset

items) Construct the 
\family typewriter
ImageList
\family default
 with the given images).
 Each 
\family typewriter
Object
\family default
 must be an 
\family typewriter
Image
\family default
 and it can't be 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Section
Keypad
\end_layout

\begin_layout Standard
This class is used to handle letters and numbers input on devices with only
 a keypad (
\family typewriter
Settings .keypadOnly = true
\family default
).
 This is used only on old BlackBerry devices.
\end_layout

\begin_layout Standard
This class has no public constructors and has the following public attributes
 and methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
numberKeyset Only numbers: 0 ...
 9.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultKeyset The default character set.
 All letters must be in lowercase.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultSymbolKeyset The default symbol character set.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
mode The current mode.
 Use the 
\family typewriter
MODE_xxx
\family default
 constants, which are 
\family typewriter
MODE_LOWER
\family default
 (lowercase mode), 
\family typewriter
MODE_UPPER
\family default
 (uppercase mode), and 
\family typewriter
MODE_NUMBER
\family default
 (number mode).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
firstChar The ASCII code of the first character represented in the keyset.
 Defaults to 
\family typewriter
0
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastChar The ASCII code of the last character represented in the keyset.
 Defaults to 
\family typewriter
9
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
backspaceChar The ASCII code of the character corresponding to a backspace.
 Defaults to 
\family typewriter
*
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
symbolsTriggerChar The ASCII code of the character that triggers the symbols
 character mode.
 Defaults to 
\family typewriter
#
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getInstance() Returns the single instance of this class.
 Instead of calling this method many times, it is better to hold the instance
 of the keypad in a hook variable to reduce the number of methods called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setKeys(String[]
\begin_inset space ~
\end_inset

newKeyset) Call this passing a new set to change the keys associated with
 each pad number.
 Or pass 
\family typewriter
null
\family default
 to restore the default key set.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSymbolKeys(String
\begin_inset space ~
\end_inset

nk) Call this to change the default 
\family typewriter
#
\family default
 to a set of characters to be selected.
 Remember to set it to 
\family typewriter
null
\family default
 afterward to restore the original behaviour!
\end_layout

\begin_layout FieldList
\labelwidthstring 0
handleKey(int
\begin_inset space ~
\end_inset

key) Called by the system to handle the pressed key.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEvent(Event
\begin_inset space ~
\end_inset

e) On a timeout of the close timer, closes this control.
\end_layout

\begin_layout Section
ListContainer
\end_layout

\begin_layout Standard

\family typewriter
ListContainer
\family default
 is a 
\family typewriter
ListBox
\family default
 where each item is a 
\family typewriter
Container
\family default
.
 
\end_layout

\begin_layout Standard
The correct way to create a 
\family typewriter
ListContainer
\family default
 item is by subclassing a 
\family typewriter
Container
\family default
 and adding the controls in the 
\family typewriter
initUI()
\family default
 method.
 Adding directly using 
\family typewriter
getContainer().add()
\family default
 will not work.
\end_layout

\begin_layout Standard
Below is an example of how to use it, taken from the UIGadgets sample using
 the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class LCItem extends ScrollContainer
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Label lDate,lPrice,lDesc;
\end_layout

\begin_layout Plain Layout

	Check chPaid;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public LCItem()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super(false); // VERY IMPORTANT (a RuntimeException will be thrown if
 this is not used because it can't have a scroll bar).
       
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(chPaid = new Check("Paid"),LEFT,TOP);
\end_layout

\begin_layout Plain Layout

		add(lDate = new Label("99/99/9999"),RIGHT,TOP);
\end_layout

\begin_layout Plain Layout

		add(new Label("US$"),LEFT,AFTER);
\end_layout

\begin_layout Plain Layout

		add(lPrice = new Label("999.999.99"),AFTER,SAME);
\end_layout

\begin_layout Plain Layout

		add(lDesc = new Label("",RIGHT),AFTER+10,SAME);
\end_layout

\begin_layout Plain Layout

		lDesc.setText("description");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private void testListContainer()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ListContainer lc;
\end_layout

\begin_layout Plain Layout

	add(lc = new ListContainer(),LEFT,TOP,FILL,FILL);
\end_layout

\begin_layout Plain Layout

	for (int i =0; i < 10; i++)
\end_layout

\begin_layout Plain Layout

		lc.addContainer(new LCItem());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

The resulting window from it looks like the screenshots below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
From AndroidUI, the following screenshots were taken:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
When an item is selected, a 
\family typewriter
PRESSED
\family default
 event is dispatched.
 The list container supports navigation using the keys up/down, page-up/down,
 and enter.
 The left and right keys acts like clicking on the left or right buttons
 (if any).
 
\end_layout

\begin_layout Standard
The class 
\family typewriter
ListContainer
\family default
 has the following public attributes, one omitted default constructor, and
 methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highlightColor Color used to highlight a container.
 Based on the background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawHLine If 
\family typewriter
true
\family default
 (default), draws a horizontal line between each container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLayout(int
\begin_inset space ~
\end_inset

itemCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

itemsPerLine) Creates a 
\family typewriter
ListContainer.Layout
\family default
 object with the given parameters.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of items of this list.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addContainer(Container
\begin_inset space ~
\end_inset

c) Adds a new 
\family typewriter
Container
\family default
 to the list.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addContainers(Container[]
\begin_inset space ~
\end_inset

all) Adds an array of 
\family typewriter
Container
\family default
s to this list.
 Adding hundreds of containers is hundred times faster using this method
 instead of adding one at a time.
 Consider also increasing the value of 
\family typewriter
Flick.defaultLongestFlick
\family default
 BEFORE creating the 
\family typewriter
ListContainer
\family default
, otherwise the user may take forever to flick.
 You can set it to 
\family typewriter
3 * all.length
\family default
, if 
\family typewriter
all.length
\family default
 is above 1000.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAllContainers() Removes all containers of this 
\family typewriter
ListContainer
\family default
.
 Note that 
\family typewriter
onRemove()
\family default
 is not called in the containers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Returns the selected container, or 
\family typewriter
null
\family default
 if none is selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected index, or -1 if none is selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

idx) Sets the selected container based on its index.
 Pass -1 to unselect all containers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItem(Container
\begin_inset space ~
\end_inset

c) Sets the selected container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getContainer(int
\begin_inset space ~
\end_inset

idx) Returns the container of the given index or 
\family typewriter
null
\family default
 if its invalid.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBackColor(Container
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

back) Changes the color of all controls inside the given container that
 matches the background color of this 
\family typewriter
ListContainer
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToControl(Control
\begin_inset space ~
\end_inset

c) Positions the given 
\family typewriter
Container
\family default
 (that should be a control added to this 
\family typewriter
ListContainer
\family default
) at the top of the list.
\end_layout

\begin_layout Standard
The 
\family typewriter
ListContainer
\family default
 class has two nested classes.
 The first one to be described is 
\family typewriter

\begin_inset Newline newline
\end_inset

ListContainer.Item
\family default
, which is an item of a 
\family typewriter
ListContainer
\family default
 and extends 
\family typewriter
Container
\family default
:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
leftControl,
\begin_inset space ~
\end_inset

rightControl The left and/or right controls that will be displayed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
items The 
\family typewriter
String
\family default
s that will be displayed in the container.
 Individual items cannot be 
\family typewriter
null
\family default
; pass 
\family typewriter
""
\family default
 instead to not display it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
leftControlVisible,
\begin_inset space ~
\end_inset

rightControlVisible When 
\family typewriter
leftControl
\family default
 or 
\family typewriter
rightControl
\family default
 is an 
\family typewriter
Image
\family default
, set this to 
\family typewriter
false
\family default
 to don't show it (and also disable the controls).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ListContainer.Item(ListContainer.Layout
\begin_inset space ~
\end_inset

layout) Constructs an 
\family typewriter
Item
\family default
 based in the given layout.
 You must set the items array with the strings that will be displayed.
 You may also set 
\family typewriter
leftControl
\family default
/
\family typewriter
rightControl,
\family default
 individual colors, and bold items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getColors() Returns the colors used on the 
\family typewriter
Item
\family default
.
 You can then set the individual colors if you wish.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setImage(boolean
\begin_inset space ~
\end_inset

isLeft,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

toImage1) Sets the 
\family typewriter
Item
\family default
 image.
 
\family typewriter
isLeft
\family default
 indicates if the image to be set is the left or the right one, and 
\family typewriter
toImage1
\family default
 indicates which default image is to be set.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postListContainerEvent(Object
\begin_inset space ~
\end_inset

target,Object
\begin_inset space ~
\end_inset

source,int
\begin_inset space ~
\end_inset

type,boolean
\begin_inset space ~
\end_inset

is2) Posts a 
\family typewriter
ListContainerEvent
\family default
, where 
\family typewriter
target
\family default
 is the target of the event, 
\family typewriter
source
\family default
 is the source of the event, 
\family typewriter
type
\family default
 is the event type, and 
\family typewriter
is2
\family default
 indicates if the new image is the second one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLeftControlX(),
\begin_inset space ~
\end_inset

getRightControlX() Returns the horizontal position of the left or right
 control.
\end_layout

\begin_layout Standard
The other nested class is 
\family typewriter
ListContainer.Layout
\family default
, which is a set of fields and default fields that will be used to define
 the layout of a 
\family typewriter
ListContainer
\family default
's 
\family typewriter
Item
\family default
 and is described in detail below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
leftImageEnlargeIfSmaller,
\begin_inset space ~
\end_inset

rightImageEnlargeIfSmaller Specify what to do if the left or right controls
 are images.
 There are two situations that occurs when the image has a different height
 of the 
\family typewriter
ListContainer
\family default
's 
\family typewriter
Item
\family default
: 
\end_layout

\begin_deeper
\begin_layout Enumerate
The image is smaller than the 
\family typewriter
ListContainer
\family default
's 
\family typewriter
Item
\family default
 height.
 It can be enlarged or vertically centered.
 If the flag is 
\family typewriter
false
\family default
 (default), the image will be centered.
 Otherwise, a "smooth upscaled" image will be created, however the image
 will mostly have a bad appearance.
 This is the worst choice.
 The best choice is always to have a big image (for the biggest possible
 resolution of the device) that will always be scaled down.
 
\end_layout

\begin_layout Enumerate
The image is bigger than the 
\family typewriter
ListContainer
\family default
's 
\family typewriter
Item
\family default
 height.
 It will always be scaled down, using a "smooth scale" algorithm.
 This is the best choice.
 In general way, the image never defines the height of the 
\family typewriter
Item
\family default
; it's the opposite: the number of 
\family typewriter
Item
\family default
 lines is that defines the image height and size.
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
defaultLeftImage,
\begin_inset space ~
\end_inset

defaultRightImage If the left and/or right control is a fixed image, set
 it here and it will be replicated on all lines.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultLeftImage2,
\begin_inset space ~
\end_inset

defaultRightImage2 If the left and/or right control is a fixed image, set
 it here and it will be replicated on all lines.
 These images can be set only if the default image was set.
 The image size must be the same of the default one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultItemColors The default colors of all items.
 Defaults to 
\family typewriter
Color.BLACK
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
boldItems The items that will have a bold font.
 Defaults to 
\family typewriter
false
\family default
 (plain font).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
relativeFontSizes The default relative font sizes.
 You can specify a delta compared to the font size of the
\begin_inset Newline newline
\end_inset


\family typewriter
ListContainer
\family default
.
 For example, specifying -1 will make the item have a font 1 size less than
 the standard one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
positions The x position of the label, relative to the column's width.
 It can be 
\family typewriter
AFTER
\family default
 (default for all items), 
\family typewriter
CENTER
\family default
 (relative to container's width), 
\family typewriter
CENTER_OF
\family default
 (relative to the space available after the last string added), 
\family typewriter
RIGHT
\family default
 (adjustments are NOT allowed!), or 
\family typewriter
BEFORE
\family default
.
 The number of lines of the 
\family typewriter
Item
\family default
 is computed based on the column count.
 Note that this field cannot be changed after the first Item is created,
 since the internal computation of number of lines is done only once.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
controlGap The gap between the left/right controls and the text.
 This gap is a percentage based in the control font's height.
 So, if you pass 100 (default), it will be 100% of the font's height, 50
 will be 50% of the height, 150 will be 1.5x the font height, and so on.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
imageGap The gap between the image and the item's top/bottom.
 This is useful if your item has 3 lines but you want to decrase the image's
 height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insets The gap between the 
\family typewriter
Item
\family default
 and the borders can be set using this field.
 The values stored are not absolute pixels, but a percentage.
 Defaults to 0 (%) for all items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lineGap The line spacing between two consecutive lines.
 Again, a percentage of the font's height is used.
 Defaults to 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
centerVertically Set to 
\family typewriter
true
\family default
 to center the labels vertically if there are empty lines ("") before or
 after the items array.
 Only works if the items form a single column.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ListContainer.Layout(int
\begin_inset space ~
\end_inset

temCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

itemsPerLine) Constructs a 
\family typewriter
Layout
\family default
 component with the given columns and item count.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setup() After you set the properties, you must call this method to setup
 the internal coordinates.
 If you create an 
\family typewriter
Item
\family default
 before calling this method, a 
\family typewriter
RuntimeException
\family default
 will be thrown.
 
\end_layout

\begin_layout Section
MenuBar
\end_layout

\begin_layout Standard
Constructs a menu with the given items.
 A menu can be opened by the user in a couple of ways: 
\end_layout

\begin_layout Itemize
By clicking on the menu button on the devices.
\end_layout

\begin_layout Itemize
By clicking on the title of a window.
 
\end_layout

\begin_layout Itemize
By holding during 1 second the middle button of the 5-way navigation buttons.
\end_layout

\begin_layout Standard
The menu supports disabled and checked items.
 The menu can be closed by a click on a valid item or clicking outside of
 its bounds.
 A 
\family typewriter
PRESSED
\family default
 event will be thrown when the menu is closed and a menu item was selected.
 To discover which item was selected, see the method 
\family typewriter
getSelectedIndex()
\family default
, which returns -1 if none, or the matrix index otherwise.
 
\end_layout

\begin_layout Standard
Note that the separator dotted line doesn't generate events and can't be
 selected.
 
\end_layout

\begin_layout Standard
After changing the 
\family typewriter
isChecked
\family default
 and 
\family typewriter
isEnabled
\family default
 states, there's no need to call 
\family typewriter
repaint()
\family default
, bacause they will show up only the next time the menu bar opens.
\end_layout

\begin_layout Standard
Here is an example of a menu bar taken from UIGadgets:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MenuItem col0[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("File"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Minimize"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Exit"),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miShowKeys = new MenuItem("Show key codes", false)
\end_layout

\begin_layout Plain Layout

};       
\end_layout

\begin_layout Plain Layout

String p = Settings.platform;
\end_layout

\begin_layout Plain Layout

col0[1].isEnabled = p.equals(Settings.JAVA) || p.equals(Settings.ANDROID) ||
 p.equals(Settings.BLACKBERRY) || Settings.isWindowsDevice() || p.equals(Settings.WIN
32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col1[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("UIStyle"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("WinCE"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("PalmOS"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Flat"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Vista"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Android"),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miPenless = new MenuItem("Penless device",false),
\end_layout

\begin_layout Plain Layout

	miGeoFocus= new MenuItem("Geographical focus",false),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miUnmovableSIP = new MenuItem("Unmovable SIP",false)
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col2[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("Tests1"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Standard controls"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("TabbedContainer with images"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Masked Edit"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Image and text buttons"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Scaled Image button"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Justified MultiEdit and Label")
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col3[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("Tests2"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Scroll Container"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("File Chooser with Tree"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("SpinList ToolTip ProgressBar"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Drag scroll"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("AlignedLabelsContainer"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("ListContainer"),
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setMenuBar(mbar = new MenuBar(new MenuItem[][]{col0,col1,col2,col3}));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result of this sample is shown in the images below taken from UIGadgets
 using Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attribute, constructor, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gap If you want to change the spacement between the menu items (maybe to
 make more items fit in the row), change this gap value.
 Default is 3 (3 pixels at left and 3 at right).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MenuBar(MenuItem[][]
\begin_inset space ~
\end_inset

items) Creates a 
\family typewriter
MenuBar
\family default
 with the given menu items.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
strings2items(String[][]
\begin_inset space ~
\end_inset

items) This static method converts a string matrix into a 
\family typewriter
MenuItem
\family default
 matrix.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMenuItems() Returns the matrix of 
\family typewriter
MenuItem
\family default
s passed in the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMenuItems() Returns the matrix of 
\family typewriter
MenuItem
\family default
s passed in the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMenuItem(int
\begin_inset space ~
\end_inset

index) Returns the 
\family typewriter
MenuItem
\family default
 at the given index.
 E.
 g.: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MenuItem file = mbar.getMenuItem(102); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPopColors(int
\begin_inset space ~
\end_inset

back,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fore,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

cursor) Sets the colors for the popup windows.
 You can pass -1 to any parameter to keep the current settings.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

c) Sets the cursor color.
 By default, it is based in the background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setVisible(boolean
\begin_inset space ~
\end_inset

b) Called by the 
\family typewriter
Window
\family default
 class to popup this 
\family typewriter
MenuBar
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the current menu item selected.
 It returns -1 if no item was selected, or a number with format 
\family typewriter
xyy
\family default
, where 
\family typewriter
x
\family default
 is the index of the item selected at the 
\family typewriter
MenuBar
\family default
 and 
\family typewriter
yy
\family default
 is the 
\family typewriter
index+1
\family default
 ( = the index of the string array that defines the items) of the item selected
 in the 
\family typewriter
MenuBarDropDown
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onPopup() Setups some important variables.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onClickedOutside(PenEvent
\begin_inset space ~
\end_inset

event) Closes the popup list with a click outside its bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
moveBy(int
\begin_inset space ~
\end_inset

i) Moves to the 
\family typewriter
MenuItem
\family default
 array at left or right depending on the passed value (-1 or +1).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setAlternativeStyle(int
\begin_inset space ~
\end_inset

back,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fore) Sets the style of the 
\family typewriter
MenuBar
\family default
 to an alternative style (no borders, rectangular appearance).
 Here's a sample, taken from the UIGadgets sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mbar.setAlternativeStyle(Color.BLUE,Color.WHITE);
\end_layout

\end_inset

The colors are set using a combination of the given back and fore colors.
 You can have a more flexible color selection by using the code below, instead
 of calling this method.
 Under most situations, though, this method is enough.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mbar.setBackForeColors(Color.BLUE, Color.WHITE);
\end_layout

\begin_layout Plain Layout

mbar.setCursorColor(0x6464FF);
\end_layout

\begin_layout Plain Layout

mbar.setBorderStyle(NO_BORDER);
\end_layout

\begin_layout Plain Layout

mbar.setPopColors(0x0078FF, Color.CYAN, -1); // use the default cursor color
 for the popup
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
MenuItem
\family default
 is an auxiliar class used in 
\family typewriter
MenuBar
\family default
 and in 
\family typewriter
MenuBarDropDown
\family default
 (described in the next section), whose description is given below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
caption The menu item's caption.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isChecked 
\family typewriter
true
\family default
 if this item is checked.
 Note that you must use the constructor that specifies the starting state
 of the check (if set or unset), otherwise changing this will not work.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isEnabled 
\family typewriter
true
\family default
 if the item is enabled; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MenuItem() Constructs a separator menu item.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MenuItem(String
\begin_inset space ~
\end_inset

caption) Constructs a menu item with the given caption.
 This item CANNOT be checked (to allow that, use the other constructor with
 2 parameters), but can be enabled/disabled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MenuItem(String
\begin_inset space ~
\end_inset

caption,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

isChecked) Constructs a menu item with the given caption and the given default
 state for the check.
 This item CAN be checked and can be enabled/disabled as well.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isCheckable() Returns 
\family typewriter
true
\family default
 if this menu item is checkable.
 
\end_layout

\begin_layout Section
MenuBarDropDown
\end_layout

\begin_layout Standard
Constructs a 
\family typewriter
MenuBarDropDown
\family default
 with the given items.
 This class is used in conjunction with the 
\family typewriter
MenuBar
\family default
.
 However, you can also use it to create a stand alone "right click" menu.
 The menu items must fit on the screen.
 No clipping is applied.
 Also, the font and colors can be changed if desired.
 
\end_layout

\begin_layout Standard
Here is an example of how to build a stand alone 
\family typewriter
MenuBarDropDown
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MenuItem col1[] = // note that the first string is always skipped (it
 would be the MenuItem title in the MenuBar)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			new MenuItem("Record"),
\end_layout

\begin_layout Plain Layout

			new MenuItem("NewEvent"),
\end_layout

\begin_layout Plain Layout

			new MenuItem("Delete Note..."),
\end_layout

\begin_layout Plain Layout

			new MenuItem("Purge..."),
\end_layout

\begin_layout Plain Layout

			new MenuItem(), // create a dotted line
\end_layout

\begin_layout Plain Layout

			new MenuItem("Beam Event")
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

		MenuBarDropDown pop = new MenuBarDropDown(10,10,col1);
\end_layout

\begin_layout Plain Layout

		pop.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following window:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubardropdown_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public constructor and methods (excluding some
 fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MenuBarDropDown(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

MenuItem[]
\begin_inset space ~
\end_inset

items) Constructs a 
\family typewriter
MenuBarDropDown
\family default
 that will show at the given 
\family typewriter
x
\family default
,
\family typewriter
 y
\family default
 position the given items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
strings2items(String[]
\begin_inset space ~
\end_inset

strings) This static method converts an string matrix into a 
\family typewriter
MenuItem
\family default
 matrix.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

index) Selects the given index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getYPos(int
\begin_inset space ~
\end_inset

index) Returns the 
\family typewriter
y
\family default
 position on the window of the given index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected index when the window was closed
 or -1 if none was selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

c) Sets the cursor color.
 By default, it is based in the background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNextSelectionIndex(KeyEvent
\begin_inset space ~
\end_inset

ke) Returns the index of the next menu item that is to be selected based
 on the direction of the given 
\family typewriter
KeyEvent
\family default
.
 
\end_layout

\begin_layout Section
MultiListBox
\end_layout

\begin_layout Standard

\family typewriter
MultiListBox
\family default
 is a 
\family typewriter
ListBox
\family default
 that allows more than one item to be selected.
 The maximum number of selections can be defined using 
\family typewriter
setMaxSelections()
\family default
.
 Be sure to save a reference to the 
\family typewriter
MultiListBox
\family default
 so you can call the specific methods of this class.
 
\end_layout

\begin_layout Standard
To create a 
\family typewriter
ComboBox
\family default
 with a 
\family typewriter
MultiListBox
\family default
, use: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MultiListBox mlb;
\end_layout

\begin_layout Plain Layout

new ComboBox(mlb = new MultiListBox()) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
getSelectedIndex()
\family default
 returns just the last selected index; to retrieve all indexes, use
\begin_inset Newline newline
\end_inset


\family typewriter
getSelectedIndexes()
\family default
.
 
\end_layout

\begin_layout Standard
In penless devices, there will be a cursor which will be used to highlight
 an item; to select or unselect it, you must press the left key.
 
\family typewriter
MultiListBox
\family default
 requires the 
\family typewriter
useFullWidthOnSelection
\family default
 on penless devices.
\end_layout

\begin_layout Standard
The following screenshots from UIGadgets using Android user interface style
 shows the MultiListBox behavior:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clearValues Fill this 
\family typewriter
IntVector
\family default
 with the values that will be selected when the 
\family typewriter
clear()
\family default
 method is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showOrderInTip Set to 
\family typewriter
false
\family default
 to don't show the number of selected elements as they are clicked.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
unselectFirstWhenMaxIsReached Set to 
\family typewriter
true
\family default
 if you want to unselect the first element once the maximum number of selected
 items is reached.
 Note that this implies that 
\family typewriter
setOrderIsImportant(true)
\family default
 and also
\family typewriter

\begin_inset Newline newline
\end_inset

setMaxSelections()
\family default
 were both called; otherwise, it has no effects.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
itemsText Suffix used to display the number of items in a combo box.
 Defaults to 
\family typewriter
" items"
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MultiListBox() Constructs an empty 
\family typewriter
MultiListBox
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MultiListBox(Object[]
\begin_inset space ~
\end_inset

items) Constructs a 
\family typewriter
MultiListBox
\family default
 with the given items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setOrderIsImportant(boolean
\begin_inset space ~
\end_inset

set) Call this method if you want to keep track of the order in which the
 items were selected.
 Note that this makes the list box slower.
 Calling this method clears all the selected items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isOrderImportant() Returns 
\family typewriter
true
\family default
 if you requested that the order is important.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected index.
 If more than one item is selected, it returns the last one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLastSelectedItem() Returns the last selected item if you had set order
 is important; otherwise, it returns 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMaxSelections(int
\begin_inset space ~
\end_inset

max) Defines the maximum number of items that can be selected.
 If currently there are more items selected than the allowed, all selections
 are cleared.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndexes() Returns a vector with the indexes which have been selected.
 The elements of the vector are the indexes in the vector of the items.
 So if this vector is holding 
\family typewriter
[3, 12, 5]
\family default
 it means that the items 3, 5, and 12 have been selected.
 If the order is important, then an ordered vector is returned (caution:
 do not change the returned array!).
 Note that the indexes are not in order; to order them, call 
\family typewriter
qsort()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isSelected(int
\begin_inset space ~
\end_inset

index) Returns if given index is selected.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

index) In the 
\family typewriter
MultiListBox
\family default
, inverts the status of the given index, or clears all if -1 is passed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

set) Sets or clears an index.
 It can also be used to set or clear all indexes, passing -1 as the index.
 Both operations are limited by the defined maximum selections.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getText() Returns the string with the selected item (if single) or a string
 with the number of selected items.
 You can change the suffix 
\family typewriter
itemsText
\family default
 to another one.
 If the order is important, it returns the last selected item.
\end_layout

\begin_layout Section
PagePosition
\end_layout

\begin_layout Standard

\family typewriter
PagePosition
\family default
 implements the empty and filled balls that indicates the current page in
 a set of pages, very common on Android and iPhone.
 
\family typewriter
PagePosition
\family default
 and 
\family typewriter
Flick
\family default
 use it.
 It has three properties: 
\end_layout

\begin_layout Itemize

\family typewriter
visibleCount
\family default
: the number of visible balls.
 
\end_layout

\begin_layout Itemize

\family typewriter
count
\family default
: the number of balls that will be displayed.
 Can be less, equal or greater than the visible count.
 
\end_layout

\begin_layout Itemize

\family typewriter
position
\family default
: the current position of the filled ball.
 
\end_layout

\begin_layout Standard

\family typewriter
PagePosition
\family default
 is shown in the image below from AndroidUI above the mouse cursor, where
 it is inside a 
\family typewriter
ButtonMenu
\family default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pageposition_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has one public constructor and the following methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PagePosition(int
\begin_inset space ~
\end_inset

visibleCount) Constructs a new 
\family typewriter
PagePosition
\family default
 with the given number of visible balls.
 This number cannot be changed later.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCount(int
\begin_inset space ~
\end_inset

c) Sets the balls count.
 Invalid values are forced to a valid range.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPosition(int
\begin_inset space ~
\end_inset

p) Sets the current position (starting at 1).
 Invalid values are forced to a valid range.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getVisibleCount() Returns the 
\family typewriter
visibleCount
\family default
 parameter passed in the constructor.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCount() Returns the ball count.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPosition() Returns the current position.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inc(boolean
\begin_inset space ~
\end_inset

wrap) Increments the current position.
 If 
\family typewriter
wrap
\family default
 is 
\family typewriter
true
\family default
, when position gets above 
\family typewriter
count
\family default
, it wraps to 1.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dec(boolean
\begin_inset space ~
\end_inset

wrap) Decrements the current position.
 If 
\family typewriter
wrap
\family default
 is 
\family typewriter
true
\family default
, when position gets below 1, it wraps to 
\family typewriter
count
\family default
.
\end_layout

\begin_layout Section
Ruler
\begin_inset CommandInset label
LatexCommand label
name "sec:Ruler"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Ruler
\family default
 is a horizontal or vertical ruler.
 Here's an example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Ruler r = new Ruler();
\end_layout

\begin_layout Plain Layout

r.invert = true;
\end_layout

\begin_layout Plain Layout

add(r, LEFT,AFTER+2);  
\end_layout

\end_inset

which results in the following using Android style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ruler_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

UIGadgets also uses a default ruler shown near the mouse arrow:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ruler_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just one public attribute, two constructors, and the following
 methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
invert Set to 
\family typewriter
true
\family default
 to invert the color of the first and second lines.
 Only makes sense if 3d is 
\family typewriter
true
\family default
 in the most sofisticated constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Ruler() Constructs a 3d horizonal ruler.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Ruler(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

is3d) Constructs a ruler of the given type, which can be horizontal (
\family typewriter
Ruler.HORIZONTAL
\family default
) or vertical (
\family typewriter
Ruler.VERTICAL
\family default
).
 The second parameter indicates if the ruler is to be 3d or not.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() For horizontal rulers, it returns 
\family typewriter
FILL
\family default
.
 Otherwise, it returns 2 if it's 3d or 1 if it's not 3d.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() For vertical rulers, it returns 
\family typewriter
FILL
\family default
.
 Otherwise, it returns 2 if's 3d or 1 if it's not 3d.
\end_layout

\begin_layout Section
PopupMenu
\end_layout

\begin_layout Standard
Creates a popup menu with a single line list and some radio buttons at right,
 like the Android combo box styles.
 The 
\family typewriter
PRESSED
\family default
 event is sent when an item is selected.
 The colors must be set before the control's bounds are defined using 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
.
\end_layout

\begin_layout Standard
This is a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] items =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Always",
\end_layout

\begin_layout Plain Layout

	"Never",
\end_layout

\begin_layout Plain Layout

	"Only in Silent mode",
\end_layout

\begin_layout Plain Layout

	"Only when not in Silent mode",
\end_layout

\begin_layout Plain Layout

	"None of the answers above"
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\begin_layout Plain Layout

PopupMenu pm = new PopupMenu("Vibrate",items);
\end_layout

\begin_layout Plain Layout

pm.popup(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which results in a window similar to the one below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/popmenu_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/popmenu_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cancelString The string of the button; defaults to 
\family typewriter
Cancel
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dataCol If the 
\family typewriter
items
\family default
 used in the constructor is a 
\family typewriter
String
\family default
 matrix (
\family typewriter
String[][]
\family default
), this field sets the column that will be shown.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
itemCount Sets the number of elements that should be used from the 
\family typewriter
items
\family default
 array passed in the constructor.
 Defaults to 
\family typewriter
items.length
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
checkColor The check color used to fill the radio button used on Android.
 Defaults to the fore color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableSearch Set to 
\family typewriter
true
\family default
 BEFORE popping up the window to enable search on the items of the 
\family typewriter
PopupMenu
\family default
.
 Note that it only works if the items are ORDERED.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PopupMenu(String
\begin_inset space ~
\end_inset

caption,
\begin_inset space ~
\end_inset

Object[]
\begin_inset space ~
\end_inset

items) Constructs a 
\family typewriter
PopupMenu
\family default
 with the given parameters and without multiple selection support.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PopupMenu(String
\begin_inset space ~
\end_inset

caption,
\begin_inset space ~
\end_inset

Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

multipleSelection) Constructs a 
\family typewriter
PopupMenu
\family default
 with the given parameters, where multiple selection can be allowed or not.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

index) Selects the given index.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected index when this window was closed
 or -1 if none was selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

c) Sets the cursor color.
 By default, it is based in the background color.
 
\end_layout

\begin_layout Section
ProgressBar
\end_layout

\begin_layout Standard
A basic progress bar, with the bar and a text.
 The text is comprised of a prefix and a suffix.
 
\end_layout

\begin_layout Standard
You can create a horizontal endless progress bar, always going from left
 to right, by setting the given parameters: 
\end_layout

\begin_layout Itemize
Call 
\family typewriter
setEndless()
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
max-min
\family default
: used to compute the width of the bar.
 
\end_layout

\begin_layout Itemize

\family typewriter
prefix
\family default
 and 
\family typewriter
suffix
\family default
: displayed, but the current value is not displayed.
 
\end_layout

\begin_layout Itemize

\family typewriter
setValue(n)
\family default
: 
\family typewriter
n
\family default
 used to increment the current value, not to set the value to 
\family typewriter
n
\family default
.
 
\end_layout

\begin_layout Standard
Then set a timer to update the value.
\end_layout

\begin_layout Standard
Here is some progress bar samples taken from AndroidUI and UIGadgets (using
 Android user interface style):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbar_006.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
min The minimum value of the progress bar.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
max The maximum value of the progress bar.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
prefix The string prefix.
 The displayed label will be 
\family typewriter
prefix+value+sufix
\family default
.
 The default value is an empty string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
suffix The string suffix.
 The displayed label will be 
\family typewriter
prefix+value+sufix
\family default
.
 The default value is the percentage symbol.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawText Set to 
\family typewriter
false
\family default
 to don't let the text be drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawValue Set to 
\family typewriter
false
\family default
 to don't let the value be drawn.
 Note that 
\family typewriter
prefix
\family default
 and 
\family typewriter
suffix
\family default
 will still be drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
textColor The text color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawBorder If 
\family typewriter
false
\family default
, no border is drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highlight If 
\family typewriter
true
\family default
, the text is highlighted.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highlightColor The highlight color, or -1 to use one based on 
\family typewriter
textColor
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vertical If 
\family typewriter
false
\family default
, use the horizontal mode (default).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBar() Creates a progress bar, with minimum and maximum set as 0
 and 100, respectively.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBar(int
\begin_inset space ~
\end_inset

min,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

max) Creates a progress bar with a given minimum and maximum values.
 It uses the specified minimum value for the initial value of the progress
 bar.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setEndless() Call this method to make the progress bar a horizontal endless
 progress bar; just keep calling 
\family typewriter
setValue(step)
\family default
 to increase the value of the progress bar.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Gets the preferred width, which is the parent's 
\family typewriter
width-6
\family default
, or the screen's width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the preferred height, which is 
\family typewriter
fmH+2
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValue(int
\begin_inset space ~
\end_inset

n) Sets the current value.
 Due to performance reasons, the minimum and maximum values are not verified.
 If the value was not changed, nothing happens.
 The progress bar is repainted immediately.
 If this is an endless progress bar, the given number is used as an increment
 to the current value.
 Note that 
\family typewriter
n
\family default
 must be greater than 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValue(int
\begin_inset space ~
\end_inset

value,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

prefix,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

suffix) Sets the current value, the prefix, and the suffix.
 Note that, due to performance reasons, the minimum and maximum values are
 not verified.
 This does not check if the value had changed; it always repaints the progress
 bar immediately.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValue() Returns the current value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onPaint(Graphics
\begin_inset space ~
\end_inset

g) Paints the Progress Bar.
 The filled part of the bar is painted with the foreground color, the empty
 part of the bar is painted with the background color, the text is painted
 with the defined 
\family typewriter
textColor
\family default
 color, and no border is drawn.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears this control, setting the value to 
\family typewriter
clearValueInt
\family default
, which defauts to 0.
 
\end_layout

\begin_layout Section
PushButtonGroup
\end_layout

\begin_layout Standard
Group or matrix of push buttons in a single control.
 It is one of the most versatiles controls of TotalCross.
 The width of each button is calculated based on its caption size plus 
\family typewriter
insideGap
\family default
, if you use 
\family typewriter
PREFERRED
\family default
 as the width; otherwise, it uses the size you specified (e.
 g.: 
\family typewriter
FILL
\family default
, 
\family typewriter
FIT
\family default
, etc).
 The height is calculated based on the font's size or on the height you
 specified.
 
\end_layout

\begin_layout Standard
Here is an example of constructor: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

new PushButtonGroup(new String[]{"Button1", "Button2", "Button3"},  false,
 -1, -1, 4, 0, false, PushButtonGroup.NORMAL); 
\end_layout

\end_inset

which results in this window when the control is added to its center using
 Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Also using Android user interface style, the screenshots below from UIGadgets
 also show this control being used:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
checkAppearsRaised Set to 
\family typewriter
true
\family default
 to make the 
\family typewriter
CHECK
\family default
 mode appear as raised by default (the default is button lowered when not
 selected).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
names The buttons captions passed in the contructor or changed after by
 calling 
\family typewriter
setNames()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insideGap Space between the text and the button border.
 The ideal is 4.
 If the parameter 
\family typewriter
allSameWidth
\family default
 passed in the constructor is 
\family typewriter
true
\family default
, it is only used to compute the preferred width and may be overriden; otherwise
, it is used as the internal gap.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
rects The bounds of each of the buttons.
 Never change this directly.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
autoRepeat Set to 
\family typewriter
true
\family default
 to enable the auto-repeat feature for this button.
 The 
\family typewriter
PRESSED
\family default
 event will be sent while this button is held.
 Works only when the type is 
\family typewriter
BUTTON
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
INITIAL_DELAY The initial delay to start the auto-repeat.
 Defaults to 600 ms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AUTO_DELAY The frequency in which the 
\family typewriter
PRESSED
\family default
 event will be posted after the 
\family typewriter
INITIAL_DELAY
\family default
 was reached.
 Defaults to 150 ms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hidden The boolean array that defines which buttons are hidden.
 If you want to hide a button, just access this and set an array index to
 
\family typewriter
true
\family default
.
 Note that you must also explicitly call the 
\family typewriter
repaint()
\family default
 method to update the control.
 Sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pbg.hidden[5] = true; // hides button 5
\end_layout

\begin_layout Plain Layout

repaint(); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
colspan Spans across multiple columns and rows.
 These cells that will be overriden must be 
\family typewriter
null
\family default
 and the parameter 
\family typewriter
allSameWidth
\family default
 passed in the constructor must be 
\family typewriter
true
\family default
.
 This sample:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String []numerics = {"1", "2", "3", "4", "5", "6", "7", "clear", null, "0",
 null, null};
\end_layout

\begin_layout Plain Layout

PushButtonGroup pbg = new PushButtonGroup(numerics, false, -1, 4, 0, 4,
 true, PushButtonGroup.BUTTON);
\end_layout

\begin_layout Plain Layout

pbg.colspan[7] = 2;
\end_layout

\begin_layout Plain Layout

pbg.rowspan[7] = 2;
\end_layout

\begin_layout Plain Layout

add(pbg, LEFT+50,AFTER+50,FILL-50,FILL-50); 
\end_layout

\end_inset

will show this:
\begin_inset Newline newline
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
rowspan Spans across multiple columns and rows.
 These cells that will be overriden must be 
\family typewriter
null
\family default
 and the parameter 
\family typewriter
allSameWidth
\family default
 passed in the constructor must be 
\family typewriter
true
\family default
.
 See the sample above.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PushButtonGroup(String[]
\begin_inset space ~
\end_inset

names,boolean
\begin_inset space ~
\end_inset

atLeastOne,int
\begin_inset space ~
\end_inset

selected,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap,int
\begin_inset space ~
\end_inset

rows,boolean
\begin_inset space ~
\end_inset

allSameWidth,byte
\begin_inset space ~
\end_inset

type) Creates the button matrix where 
\family typewriter
names
\family default
 is the captions of the buttons (you can specify some names as 
\family typewriter
null
\family default
 so the button is not displayed; this is good if you're creating a button
 matrix and want to hide some buttons definetively; you can hide some buttons
 temporarily setting the 
\family typewriter
hiden
\family default
 array; you can also use the 
\family typewriter
hidden
\family default
 property to dynamically show/hide buttons), 
\family typewriter
atLeastOne
\family default
 indicates if at least one button must be selected, 
\family typewriter
selected
\family default
 is the default index to appear selected (-1 if none), 
\family typewriter
gap
\family default
 is the space between the buttons (-1 glue them), 
\family typewriter
insideGap
\family default
 is the space between the text and the button border (the ideal is 4; if
 
\family typewriter
allSameWidth
\family default
 is 
\family typewriter
true
\family default
, it is only used to compute the preferred width and may be overriden; otherwise
, it is used as the internal gap), 
\family typewriter
rows
\family default
 creates a button matrix if > 1, 
\family typewriter
allSameWidth
\family default
 indicates that all the buttons will have the width of the largest one if
 
\family typewriter
true
\family default
, and 
\family typewriter
type
\family default
 can be 
\family typewriter
NORMAL
\family default
 (only one selected at a time), 
\family typewriter
BUTTON
\family default
 (the button will be selected and unselected immediately, acting like a
 real button), or 
\family typewriter
CHECK
\family default
 (one click on the button will select it and another click will unselect
 it; however, only one button can be selected at a time).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PushButtonGroup(String[]
\begin_inset space ~
\end_inset

names,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

gap,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

insideGap,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

rows) This is a simpler version of the above method with with 
\family typewriter
selected = -1
\family default
, 
\family typewriter
atLeastOne = false
\family default
, 
\family typewriter
allSameWidth = false
\family default
, 
\family typewriter
and type = BUTTON
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PushButtonGroup(String[]
\begin_inset space ~
\end_inset

names,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

gap,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

rows) This is a simpler version of the first constructor shown with 
\family typewriter
insideGap = 4
\family default
, 
\family typewriter
selected = -1
\family default
, 
\family typewriter
atLeastOne = false
\family default
, 
\family typewriter
allSameWidth = true
\family default
, and 
\family typewriter
type = BUTTON
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setNames(String[]
\begin_inset space ~
\end_inset

newNames) Sets the captions of the buttons.
 Note that it must have the same number of elements passed in the constructor,
 and the bounds are NOT recomputed.
 
\family typewriter
repaint()
\family default
 is called.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setColor(int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

foreColor,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor) Sets a button's index color.
 The other buttons will remain with the default color.
 Pass -1 to restore the default color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSimpleBorder(boolean
\begin_inset space ~
\end_inset

simple) Uses a border with a single line (not 3d and not Android's).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the index of the selected button, or -1 if none
 is selected.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Returns the caption of the selected button, or 
\family typewriter
null
\family default
 if no button is selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

color) Sets the cursor color for the 
\family typewriter
PushButtonGroup
\family default
.
 The default value is equal to the background slightly darker.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

ind) Sets the selected button index.
 Note that if there are any 
\family typewriter
null
\family default
 or hidden buttons, you must consider them too to compute the correct index.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears this control, selecting index 
\family typewriter
clearValueInt
\family default
, which defaults to 0.
 Note that if the parameter 
\family typewriter
atLeastOne
\family default
 passed to the constructor is 
\family typewriter
true
\family default
, setting 
\family typewriter
clearValueInt
\family default
 to -1 will have no effect.
 
\end_layout

\begin_layout Section
ScrollBar
\end_layout

\begin_layout Standard
The scroll bar orientation can be horizontal or vertical.
 It implements auto scroll when pressing and holding a button or the gap
 area of the scroll bar.
 Here is an example of how to use it.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.event.*;
\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ScrollBar sb1, sb2, sb3, sb4;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(sb1 = new ScrollBar(ScrollBar.VERTICAL), RIGHT, CENTER, PREFERRED,
 Settings.screenHeight/2);
\end_layout

\begin_layout Plain Layout

		add(sb2 = new ScrollBar(ScrollBar.VERTICAL), BEFORE, SAME, PREFERRED, SAME);
\end_layout

\begin_layout Plain Layout

		sb2.setLiveScrolling(true);
\end_layout

\begin_layout Plain Layout

		add(sb3 = new ScrollBar(ScrollBar.HORIZONTAL), LEFT,CENTER, Settings.screenWidth
/2, PREFERRED);
\end_layout

\begin_layout Plain Layout

		add(sb4 = new ScrollBar(ScrollBar.HORIZONTAL), SAME, AFTER, SAME, PREFERRED);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == sb2)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			int value = sb2.getValue();
\end_layout

\begin_layout Plain Layout

			sb1.setValue(value);
\end_layout

\begin_layout Plain Layout

			sb3.setValue(value);
\end_layout

\begin_layout Plain Layout

			sb4.setValue(value);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following images:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
disableBlockIncrement Set to 
\family typewriter
true
\family default
 to disable block increments, which occurs when the user clicks outside
 the bar and buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
minDragBarSize The minimum drag bar size in pixels.
 By default, it is 5.
 This has no effect if the user interface style is Palm OS.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
INITIAL_DELAY The initial delay to start the automatic scroll.
 Since this is a static member, it affects all scroll bars.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AUTO_DELAY The frequency in which the scroll will be done.
 Since this is a static member, it affects all scroll bars.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
extraSize The extra size (width for vertical scroll bars or height for horizonta
l ones) used in all scroll bars.
 Note that this member is static, so it will affect all scroll bars created
 afterwards, unless you reset it to 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollBar() Creates a 
\family typewriter
ScrollBar
\family default
 object with the default values, where the maximum is 100, the minimum is
 0, the orientation is 
\family typewriter
VERTICAL
\family default
, the block increment is 50, the unit increment is 1, the initial value
 is 0, and the number visible items being equal to the block increment.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollBar(byte
\begin_inset space ~
\end_inset

orientation) Similar to the above method except that the orientation can
 be chosen (
\family typewriter
VERTICAL
\family default
 or
\family typewriter

\begin_inset Newline newline
\end_inset

HORIZONTAL
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValues(int
\begin_inset space ~
\end_inset

newValue,int
\begin_inset space ~
\end_inset

newVisibleItems,int
\begin_inset space ~
\end_inset

newMinimum,int
\begin_inset space ~
\end_inset

newMaximum) Sets the value, number of visible items, and minimum and maximum
 values.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMaximum(int
\begin_inset space ~
\end_inset

i) Sets the maximum value.
 Note that you must explicitly call 
\family typewriter
repaint()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMaximum() Gets the maximum value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMinimum(int
\begin_inset space ~
\end_inset

i) Sets the minimum value.
 Note that you must explicitly call 
\family typewriter
repaint()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMinimum() Gets the minimum value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBlockIncrement(int
\begin_inset space ~
\end_inset

i) Sets the amount to increment the value when clicking above the bar.
 This value is set as default to be equal to number of visible items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBlockIncrement() Gets the amount to increment the value when clicking
 above the bar.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setUnitIncrement(int
\begin_inset space ~
\end_inset

i) Sets the amount to increment the value when clicking the up or down buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getUnitIncrement() Gets the amount to increment the value when clicking
 the up or down buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValue(int
\begin_inset space ~
\end_inset

i) Sets the value.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValue() Gets the value.
 This is the value minus the visible items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setVisibleItems(int
\begin_inset space ~
\end_inset

i) Sets the count of visible items for the scroll bar.
 This value cannot be zero.
 It also sets the block increment to be equal to the given value.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getVisibleItems() Gets the count of visible items for the scroll bar.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setLiveScrolling(boolean
\begin_inset space ~
\end_inset

liveScrolling) Sets the live scrolling.
 If 
\family typewriter
true
\family default
 an event is thrown during dragging or when the button is held.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
blockScroll(boolean
\begin_inset space ~
\end_inset

inc) Scrolls a block, and posts the 
\family typewriter
PRESSED
\family default
 event if the value changes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() If this is a vertical scroll bar, I strongly suggest
 you use 
\family typewriter
PREFERRED
\family default
 in your control's width (with small adjustments).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() If this is a horizontal scroll bar, I strongly suggest
 you use 
\family typewriter
PREFERRED
\family default
 in your control's height (with small adjustments).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears this control, setting the value to 
\family typewriter
clearValueInt
\family default
, which defaults to 0.
 
\end_layout

\begin_layout Section
ScrollContainer
\end_layout

\begin_layout Standard
This is a container with a horizontal only, vertical only, both, or no scroll
 bars, depending on the control positions.
 The default unit scroll is an edit's height (for the vertical scrollbar),
 and the width of an 
\family typewriter
@
\family default
 (for the horizontal scrollbar).
 
\end_layout

\begin_layout Standard
Caution: you must not use 
\family typewriter
RIGHT
\family default
, 
\family typewriter
BOTTOM
\family default
, 
\family typewriter
CENTER
\family default
, and 
\family typewriter
FILL
\family default
 when setting the control bounds, unless you disable the corresponding scroll
 bar! The only exception to this is to use 
\family typewriter
FILL
\family default
 on the control's height, which is allowed.
\end_layout

\begin_layout Standard
Here is an example showing how it can be used: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings; 
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ScrollContainer sc;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ScrollContainer sc;
\end_layout

\begin_layout Plain Layout

		add(sc = new ScrollContainer());
\end_layout

\begin_layout Plain Layout

		sc.setBorderStyle(BORDER_SIMPLE);
\end_layout

\begin_layout Plain Layout

		sc.setRect(LEFT+10,TOP+10,FILL-20,FILL-20);
\end_layout

\begin_layout Plain Layout

		int xx = new Label("Name99").getPreferredWidth()+2; // edit's alignment
\end_layout

\begin_layout Plain Layout

		for (int i =0; i < 100; i++)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			sc.add(new Label("Name"+i),LEFT,AFTER);
\end_layout

\begin_layout Plain Layout

			sc.add(new Edit("@@@@@@@@@@@@@@@@@@@@"),xx,SAME);
\end_layout

\begin_layout Plain Layout

			if (i % 3 == 0)
\end_layout

\begin_layout Plain Layout

				sc.add(new Button("Go"), AFTER+2,SAME,PREFERRED,SAME);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following screenshots:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
AndroidUI uses this control in almost all windows so that its components
 can be scrolled.
 UIGadgets also uses it in one of its tests.
 Using Android user interface style, the following screenshot can be seen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sbH,
\begin_inset space ~
\end_inset

sbV Contains the horizontal and vertical scroll bars for 
\family typewriter
ScrollContainer
\family default
.
 With it, you can directly set its parameters, like the block increment,
 the unit increment or if it has live scrolling.
 But be careful, don't mess with the minimum, maximum and number of visible
 items.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
shrink2size Set to 
\family typewriter
true
\family default
, to make the surrounding container shrink to its size.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollContainer() Standard constructor for a new 
\family typewriter
ScrollContainer
\family default
, with both scroll bars enabled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollContainer(boolean
\begin_inset space ~
\end_inset

allowScrollBars) Constructor used to specify when both scroll bars are enabled
 or not.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollContainer(boolean
\begin_inset space ~
\end_inset

allowHScrollBar,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

allowVScrollBar) Constructor used to specify when each scroll bar is enabled
 or not.
 By disabling the horizontal scroll bar, you can use 
\family typewriter
RIGHT
\family default
 and 
\family typewriter
CENTER
\family default
 on the 
\family typewriter
x
\family default
 parameter of a control that is added.
 By disabling the vertical scroll bar, you can use 
\family typewriter
BOTTOM
\family default
 and 
\family typewriter
CENTER
\family default
 on the 
\family typewriter
y
\family default
 parameter of a control that is added.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Control
\begin_inset space ~
\end_inset

control) Adds a child control to the bag container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Control
\begin_inset space ~
\end_inset

control) Removes a child control from the bag container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resize() This method resizes the control to the needed bounds, based on
 the added childs.
 It must be called if you're controlling reposition by your own, after you
 repositioned the controls inside of it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resize(int
\begin_inset space ~
\end_inset

maxX,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

maxY) This method resizes the control to the needed bounds, based on the
 given maximum width and heights.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getScrollDistance() Override this method to return the correct scroll distance.
 Defaults to the container's width.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width AFTER the 
\family typewriter
resize()
\family default
 method was called.
 If the scroll bars are disabled, it returns the maximum size of the container
 to hold all controls.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the preferred height AFTER the 
\family typewriter
resize()
\family default
 method was called.
 If the scroll bars are disabled, it returns the maximum size of the container
 to hold all controls.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToPage(int
\begin_inset space ~
\end_inset

p) Scrolls to the given page, which is the flick's scroll distance (if set),
 or the control's height.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scrollToControl(Control
\begin_inset space ~
\end_inset

c) Scrolls to the given control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAll() Removes all controls from the 
\family typewriter
ScrollContainer
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBagChildren() Returns the children of the bag.
 If you call 
\family typewriter
ScrollContainer.getChildren()
\family default
, it will not return the controls added to the 
\family typewriter
ScrollContainer
\family default
, since they are actually added to the bag.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\end_layout

\begin_layout Section
ScrollPosition
\end_layout

\begin_layout Standard

\family typewriter
ScrollPosition
\family default
 implements the auto-hide scroll bar that exists in finger-touched devices.
 This special scroll bar is just a small position indicator that appears
 when the area is dragged.
 
\family typewriter

\begin_inset Newline newline
\end_inset

ScrollPosition
\family default
 does not take an area of the control, since it appears and disappears automatic
ally.
 All 
\family typewriter
Scrollable
\family default
 controls change their 
\family typewriter
ScrollBar
\family default
 by 
\family typewriter
ScrollPosition
\family default
 when 
\family typewriter
Settings.fingerTouch = true
\family default
.
 If the back color and the bar color are the same, the bar is not drawn;
 this is how the 
\family typewriter
ButtonMenu
\family default
 class hides this control.
\end_layout

\begin_layout Standard
Some images of it can be found in the AndroidUI sample when scrolling its
 main window:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollposition_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollposition_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AUTO_HIDE Set to 
\family typewriter
false
\family default
 this static attribute to make the position bar be always shown for all
 
\family typewriter

\begin_inset Newline newline
\end_inset

ScrollPosition
\family default
s (instead of the default auto-hide behaviour).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
barColor The bar color.
 Defaults to 
\family typewriter
UIColors.positionbarColor
\family default
 but can be changed to something else.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
heightMultiplierToShowHandle Defines the height multiplier that must be
 reached to show the handle while scrolling.
 The handle speeds up scrolling since the user can drag it (like the bar
 in a 
\family typewriter
ProgressBar
\family default
).
 It is very useful for long lists.
 Setting this to 10 will make the handle appear when the height of the item's
 list exceeds 10 times the height of the 
\family typewriter
ScrollContainer
\family default
.
 Set it to 0 will always show the handle, set to something very big (like
 
\family typewriter
Convert.MAX_INT
\family default
) to never show the handle.
 Defaults to 7.
 Since it is a static attribute, the value set will hold for all components
 of this class.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollPosition() Constructs a vertical 
\family typewriter
ScrollPosition
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ScrollPosition(byte
\begin_inset space ~
\end_inset

orientation) Constructs a 
\family typewriter
ScrollPosition
\family default
 with the given orientation.
 It can be 
\family typewriter
ScrollBar.VERTICAL
\family default
, or 
\family typewriter
ScrollBar.HORIZONTAL.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setVisible(boolean
\begin_inset space ~
\end_inset

b) Don't allow change in the visibility.
 This is done automatically.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Resets position to 0 and posts a pressed event.
 
\end_layout

\begin_layout Section
Slider
\end_layout

\begin_layout Standard

\family typewriter
Slider
\family default
 is a simple slider.
 You can set some properties of the slider, like 
\family typewriter
drawTicks
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

invertDirection
\family default
 and 
\family typewriter
drawFilledArea
\family default
.
 You can change the thumb size by setting the 
\family typewriter
minDragBarSize
\family default
 public field and then call 
\family typewriter
setValues()
\family default
, 
\family typewriter
setMaximum()
\family default
, or 
\family typewriter
setMinimum()
\family default
 method (the value must always be ODD!).
 The slider is the component pointed by the mouse arrow in the UIGadgets
 sample using Android style below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/slider_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
invertDirection Inverts the direction of the marker.
 You must set this property before calling 
\family typewriter
setValues()
\family default
 (or 
\family typewriter
setMinimum()
\family default
/
\family typewriter
setMaximum()
\family default
/
\family typewriter
setValue()
\family default
/
\family typewriter
setVisibleItems()
\family default
 methods) for the first time.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawTicks Set to 
\family typewriter
true
\family default
 to draw the ticks.
 Should be set only when maximum-minimum is much smaller than the width.
 You must set this property before calling 
\family typewriter
setValues()
\family default
 (or 
\family typewriter
setMinimum()
\family default
/
\family typewriter
 setMaximum()
\family default
/
\family typewriter
setValue()
\family default
/
\family typewriter
setVisibleItems()
\family default
 methods) for the first time.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawFilledArea Set to 
\family typewriter
false
\family default
 to don't draw the filled area.
 You must set this property before calling 
\family typewriter
setValues()
\family default
 (or 
\family typewriter
setMinimum()
\family default
/
\family typewriter
setMaximum()
\family default
/
\family typewriter
setValue()
\family default
/
\family typewriter
setVisibleItems()
\family default
 methods) for the first time.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Slider() Constructs a horizontal slider.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Slider(byte
\begin_inset space ~
\end_inset

orientation) Constructs a slider with the given orientation, which can be
 horizontal (
\family typewriter
ScrollBar.
\begin_inset Newline newline
\end_inset

HORIZONTAL
\family default
) or vertical (
\family typewriter
ScrollBar.VERTICAL
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDragBarPos(int
\begin_inset space ~
\end_inset

value) Returns the drag bar position.
 
\end_layout

\begin_layout Section
Spacer
\end_layout

\begin_layout Standard
Control used to add a space between controls.
 It shows nothing on screen.
 
\end_layout

\begin_layout Standard
Here's a sample of how to use it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Spacer s = new Spacer("  ");
\end_layout

\begin_layout Plain Layout

Button btnClear = new Button("Clear");
\end_layout

\begin_layout Plain Layout

Button btnOK = new Button("OK");
\end_layout

\begin_layout Plain Layout

add(s, CENTER,AFTER+2);
\end_layout

\begin_layout Plain Layout

add(btnClear, AFTER,SAME, s);
\end_layout

\begin_layout Plain Layout

add(btnOK, BEFORE, SAME, SAME, SAME, s); 
\end_layout

\end_inset

which results in the following using Android style, which places two buttons
 centered on screen, like this:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The spacer is also used to separate the spinners in the Spiner Samples of
 AndroidUI and the back and next buttons from the Litebase sample PhotoDB
 (which uses the old Windows CE style):
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has just three constructors (the other fields from its superclasses
 are excluded):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Spacer() Constructs a new spacer, using a single space 
\family typewriter
" "
\family default
 to compute the width and height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Spacer(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y) Constructs a new spacer using the given 
\family typewriter
x
\family default
 and 
\family typewriter
y
\family default
 values.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Spacer(String
\begin_inset space ~
\end_inset

s) Constructs a new spacer using the given string, whose width will be the
 horizontal spacement.
 The vertical spacement will be the font's height.
 
\end_layout

\begin_layout Section
SpinList
\end_layout

\begin_layout Standard
Creates a control with two arrows, so that you can scroll values and show
 the current one.
 It supports auto-scroll (by clicking and holding) and can also dynamically
 compute the items based on ranges.
 The spin list can be horizontal or vertical.
 You can use something like: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SpinList sl = new SpinList(..., !Settings.fingerTouch); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This way, in finger-touch devices, it will use the horizontal appearance,
 which is easier to deal with on such devices.
\end_layout

\begin_layout Standard
The screenshots below from UIGadgets using Android user interface style
 shows the days being increased and decreased when pressing the increase
 or decrease arrow, respectively:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timerInterval Timer interval in which the scroll will be done.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timerInitialDelay Number of ticks of the timer interval that will be waited
 until the scroll starts.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hAlign The horizontal text alignment of the 
\family typewriter
SpinList
\family default
: 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useNumericBox Set to 
\family typewriter
true
\family default
 if there are only numbers in the 
\family typewriter
SpinList
\family default
 and you want to open a 
\family typewriter
NumericBox
\family default
 to let the user enter a value.
 The 
\family typewriter
SpinList
\family default
 is divided into 3 areas: left (decrease), right (increase), and middle
 (opens the 
\family typewriter
NumericBox
\family default
).
 Works only when
\family typewriter
 
\family default
it is horizontal.
 The area that pops up the 
\family typewriter
NumericBox
\family default
 is drawn in a darker background.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useCalculatorBox Set to 
\family typewriter
true
\family default
 if there are only numbers in the 
\family typewriter
SpinList
\family default
 and you want to open a 
\family typewriter
CalculatorBox
\family default
 to let the user enter a value.
 This field behaves similar to the above one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SpinList(String[]
\begin_inset space ~
\end_inset

choices) Constructs a vertical 
\family typewriter
SpinList
\family default
 with the given choices, selecting index 0 by default.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SpinList(String[]
\begin_inset space ~
\end_inset

choices,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

isVertical) Similar to the one above except that the orientation can be
 vertical or horizontal.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setChoices(String[]
\begin_inset space ~
\end_inset

choices) Sets the choices to the given ones.
 Searches for 
\family typewriter
[i0,if]
\family default
 and then expands the items.
 For example, passing some string as 
\family typewriter
Day [1,31]
\family default
 will expand that to an array of 
\family typewriter
Day 1
\family default
, 
\family typewriter
Day 2
\family default
, ..., 
\family typewriter
Day 31
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
expand(Vector
\begin_inset space ~
\end_inset

v,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

str) Static method that expands the items in the format 
\family typewriter
prefix [start,end] suffix
\family default
, where 
\family typewriter
prefix
\family default
 and 
\family typewriter
suffix
\family default
 are optional.
 For example, passing some string as 
\family typewriter
Day [1,31]
\family default
 will expand that to an array of 
\family typewriter
Day 1
\family default
, 
\family typewriter
Day 2
\family default
, ..., 
\family typewriter
Day 31
\family default
.
 The result will be stored in the 
\family typewriter
v
\family default
 parameter.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getChoices() Returns the choices array, after the expansion (if any).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Returns the selected item.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Returns the selected index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

i) Sets the selected item; -1 is NOT accepted.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItem(String
\begin_inset space ~
\end_inset

item) Selects the given item.
 If the item is not found, the selected index remains unchanged.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAt(int
\begin_inset space ~
\end_inset

index) Removes the item at the given index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeCurrent() Removes the current item.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
indexOf(String
\begin_inset space ~
\end_inset

elem) Returns the index of the given item.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insertInOrder(String
\begin_inset space ~
\end_inset

elem) Inserts the given element in order (based in the assumption that the
 original choices was ordered).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears this control, selecting the element 
\family typewriter
clearValueInt
\family default
.
 
\end_layout

\begin_layout Section
Spinner
\end_layout

\begin_layout Standard

\family typewriter
Spinner
\family default
 is a control that shows an image indicating that something is running in
 the background.
 It has two styles: 
\family typewriter
IPHONE
\family default
 and 
\family typewriter
ANDROID
\family default
.
 It's used in the 
\family typewriter
ProgressBox
\family default
 and can be used in the 
\family typewriter
Bar
\family default
.
 To start the spin call the 
\family typewriter
start()
\family default
 method, and to stop it call the 
\family typewriter
stop()
\family default
 method.
 An image of it has already been shown in section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Ruler"

\end_inset

.
\end_layout

\begin_layout Standard
This class has just one public attribute, an omitted default constructor,
 and the following methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
spinnerType Defines the type of spinner for all instances.
 Defaults for 
\family typewriter
Spinner.IPHONE
\family default
 when running on iPhone and 
\family typewriter
Spinner.ANDROID
\family default
 for all other platforms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
start() Starts the spinning thread.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stop() Stops the spinning thread.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isRunning() Returns if the spinner is running.
 
\end_layout

\begin_layout Section
TabbedContainer
\end_layout

\begin_layout Standard

\family typewriter
TabbedContainer
\family default
 is a bar of text or image tabs.
 It is assumed that all images will have the same height, but they may have
 different widths.
 A scroll is automatically added when the total width of the titles is bigger
 than the control's width.
 The containers are created automatically and switched when the user presses
 the corresponding tab.
 
\end_layout

\begin_layout Standard
When the user interface has Android style, the tabs do not look good if
 the background is the same of the parent's.
 In this case, we force the background to be slighly darker.
 There are a few fields that you can use to change the color, like 
\family typewriter
activeTabBackColor
\family default
,
\family typewriter

\begin_inset Newline newline
\end_inset

useOnTabTheContainerColor
\family default
, and 
\family typewriter
pressedColor
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Important: with 
\family typewriter
Settings.fingerTouch = true
\family default
, you CANNOT call 
\family typewriter
setRect()
\family default
 in your container.
 Otherwise, the flick and drag will not work and your container will be
 positioned incorrectly.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below are some screenshots taken from UIGadgets (using Android user interface
 style) and AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
beepOn Set to 
\family typewriter
true
\family default
 to enable the beep when a tab is clicked.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
arrowsColor Sets the arrows color right after the constructor and after
 calling 
\family typewriter
setCaptionColor()
\family default
, which also changes this property.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
activeTabBackColor This color is the one used to paint the background of
 the active tab.
 This is specially useful for image tabs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tabsBackColor Stores the colors used on each tab.
 You must create and set the array with the colors.
 Use -1 to keep the original color.
 This array has precedence over the other ways that changes colors, except
 
\family typewriter
activeTabBackColor
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useOnTabTheContainerColor Sets the tabs with the same colors of the container.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastActiveTab Stores the last active tab index, or -1 if none was previously
 selected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
flickIntoDisabledTabs On finger touch devices, the user still can flick
 into a disabled tab.
 To disable this behaviour, set this flag to 
\family typewriter
false
\family default
; so when a disabled tab is reached, the user will not be able to flick
 into it, and will have to click on an enabled tab to continue flicking.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pressedColor Stores the color when the user clicks on the tab.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
allSameWidth Set to 
\family typewriter
true
\family default
 to make all tabs have the same width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
extraTabHeight Defines an extra height for the tabs.
 Use something line 
\family typewriter
fmH*2
\family default
.
 Required when 
\family typewriter
setIcons()
\family default
 is called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TabbedContainer(String[]
\begin_inset space ~
\end_inset

strCaptions) Constructs a tab bar control with strings as captions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TabbedContainer(Image[]
\begin_inset space ~
\end_inset

imgCaptions,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

transparentColor) Constructs a tab bar control with images as captions,
 using the given color as transparent color.
 If you don't want to use transparent colors, just pass -1 to the color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTabCount() Returns the number of tabs.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setEnabled(int
\begin_inset space ~
\end_inset

tabIndex,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

on) Sets the given tab index as enabled or not, where 
\family typewriter
tabIndex
\family default
 is the tab's index (starting with 0), and 
\family typewriter
on
\family default
 must be 
\family typewriter
true
\family default
 to enable the tab; 
\family typewriter
false
\family default
, otherwise.
 When a tab is disabled, it is displayed faded, and if the user clicks on
 it, nothing happens.
 However, you still can activate it by calling 
\family typewriter
setActiveTab()
\family default
.
 If there are no tabs enabled, the current tab will be made active and the
 controls will also be enabled.
 So, if you plan to disable all tabs, better disable the 
\family typewriter
TabbedContainer
\family default
 control instead.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isEnabled(int
\begin_inset space ~
\end_inset

tabIndex) Returns if the given tab index is enabled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setIcons(Image[]
\begin_inset space ~
\end_inset

icons) Sets the given icons to appear on the top (or bottom, if its type
 is 
\family typewriter
TABS_BOTTOM
\family default
) of a text 
\family typewriter
TabbedContainer
\family default
.
 The icon images must be squared.
 You must also set the
\family typewriter

\begin_inset Newline newline
\end_inset

extraTabHeight
\family default
 value, because the icons will be resized to 
\family typewriter
extraTabHeight-fmH
\family default
 in both directions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setType(byte
\begin_inset space ~
\end_inset

type) Sets the position of the tabs.
 Use the constants 
\family typewriter
TABS_TOP
\family default
 (specifies that the tabs will be placed on the top) or 
\family typewriter
TABS_BOTTOM
\family default
 (specifies that the tabs will be placed on the bottom).
 Since the tabs are not changed dinamicaly, this method must be called after
 the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getContainer(int
\begin_inset space ~
\end_inset

i) Returns the 
\family typewriter
Container
\family default
 for tab 
\family typewriter
i
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBorderStyle(byte
\begin_inset space ~
\end_inset

style) Sets the type of border.
 Currently, only the 
\family typewriter
Window.NO_BORDER
\family default
 and 
\family typewriter
Window.RECT_BORDER
\family default
 types are supported.
 
\family typewriter
Window.NO_BORDER
\family default
 only draws the line under the tabs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setContainer(int
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

Container
\begin_inset space ~
\end_inset

container) Replaces the default created 
\family typewriter
Container
\family default
 with the given one.
 This way you can avoid adding a container to a container and, as such,
 waste memory.
 Note that you must do this before the first 
\family typewriter
setRect()
\family default
 for this 
\family typewriter
TabbedContainer
\family default
; otherwise, you must explicitly call 
\family typewriter
setRect()
\family default
 again to update the added container bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setActiveTab(int
\begin_inset space ~
\end_inset

tab) Sets the currently active tab.
 A 
\family typewriter
PRESSED
\family default
 event will be posted to the given tab if it is not the currently active
 tab; then, the containers will be switched.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getActiveTab() Returns the index of the selected tab.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getActiveContainer() Returns the container of the active tab.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the caption height for this 
\family typewriter
TabbedContainer
\family default
.
 Note that it is not possible to compute the correct height of each container,
 since they will be added AFTER the 
\family typewriter
TabbedContainer
\family default
 has their bounds set.
 So, you should actually use some other way to specify the bounds, like
 
\family typewriter
FILL
\family default
 or 
\family typewriter
FIT
\family default
; using 
\family typewriter
PREFERRED
\family default
 in the height of 
\family typewriter
setRect()
\family default
 will make your application abort.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the minimum width (based on the sizes of the
 captions) for the 
\family typewriter
TabbedContainer
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onFontChanged() Computes the rectangles of the tabs based on the selected
 (bolded) and unselected (plain) titles.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTabColor(int
\begin_inset space ~
\end_inset

tab) Returns the color of the given tab.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCaptionColor(int
\begin_inset space ~
\end_inset

capColor) Sets the text color of the captions in the tabs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCaptionColor() Gets the text color of the captions.
 Returns a grayed value if this control is not enabled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getClientRect() Returns the area excluding the tabs and borders for this
 
\family typewriter
TabbedContainer
\family default
.
 Note: do not change the returning 
\family typewriter
Rect
\family default
 object!
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getClientRect(Rect
\begin_inset space ~
\end_inset

r) Returns the area excluding the tabs and borders for the 
\family typewriter
TabbedContainer
\family default
.
 In this version, you provide the created 
\family typewriter
Rect
\family default
 to be filled with the coords.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
changeHighlighted(Container
\begin_inset space ~
\end_inset

p,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

forward) Tranfers the focus between the containers of the 
\family typewriter
TabbedContainer
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setHighlighting() Only returns to highlighting when we want.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isAtTop() Returns 
\family typewriter
true
\family default
 if the type is set to 
\family typewriter
TABS_TOP
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resizeHeight() Resizes the height of each added container and sets the height
 of the 
\family typewriter
TabbedContainer
\family default
 to the maximum height of the containers.
\end_layout

\begin_layout Section
Tree
\begin_inset CommandInset label
LatexCommand label
name "sec:Tree"

\end_inset


\end_layout

\begin_layout Standard
This class is a simple implementation of a tree widget.
 Since it's natural to render the tree in rows, this class borrows most
 of the code from 
\family typewriter
ListBox
\family default
.
 Features: 
\end_layout

\begin_layout Itemize
Similar to Microsoft Windows Explorer tree.
 
\end_layout

\begin_layout Itemize
Horizontal and vertical scrolling.
 
\end_layout

\begin_layout Itemize
Allows setting of folder and leaf icons.
 
\end_layout

\begin_layout Itemize
Expands and collapses of folder.
 
\end_layout

\begin_layout Itemize

\family typewriter
allowsChildren
\family default
 flag to determine if the node is a leaf or a folder.
 
\end_layout

\begin_layout Itemize
Delete, insert, and modify (user object or identifier) of a node.
 
\end_layout

\begin_layout Itemize
Clicking on a leaf node will swap to the leaf icon (like hyperlink).
 
\end_layout

\begin_layout Itemize
Allows the creation of a tree to show or hide the root node.
\end_layout

\begin_layout Standard
You should use the 
\family typewriter
TreeModel
\family default
 class to modify the tree after and the class 
\family typewriter
Node
\family default
 to add nodes to the tree.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TreeModel tmodel = new TreeModel();
\end_layout

\begin_layout Plain Layout

Tree tree = new Tree(tmodel);
\end_layout

\begin_layout Plain Layout

add(tree,LEFT,TOP,FILL,FILL);
\end_layout

\begin_layout Plain Layout

Node root = new Node("Tree");
\end_layout

\begin_layout Plain Layout

tmodel.setRoot(root);
\end_layout

\begin_layout Plain Layout

Node n;
\end_layout

\begin_layout Plain Layout

root.add(n = new Node("Branch1"));
\end_layout

\begin_layout Plain Layout

n.add(new Node("SubBranch1"));
\end_layout

\begin_layout Plain Layout

n.add(new Node("SubBranch2")); 
\end_layout

\end_inset

which results in the following window (using Android style):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
UIGadgets also has a sample called FileChooserTest which uses 
\family typewriter
Tree
\family default
.
 Using Android style, it looks like this:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Tree
\family default
 class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
multipleSelection Set to 
\family typewriter
true
\family default
 to allow multiple selections using a 
\family typewriter
Check
\family default
 drawn before the nodes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
expandClickingOnText Set to 
\family typewriter
false
\family default
 to only expand or collapse if you click on the +- buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useFullWidthOnSelection If 
\family typewriter
true
\family default
, all the tree will have the selection bar drawn in the full width instead
 of the selected's text width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Tree() Constructs a new 
\family typewriter
Tree
\family default
 based on an empty tree model.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Tree(TreeModel
\begin_inset space ~
\end_inset

model) Constructs a new 
\family typewriter
Tree
\family default
 based on the given tree model.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Tree(TreeModel
\begin_inset space ~
\end_inset

model,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

showRoot) Constructs a new 
\family typewriter
Tree
\family default
 based on the given tree model.
 It will show the root if the second parameter is 
\family typewriter
true
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dontShowFileAndFolderIcons() Call this method to hide the file and folder
 icons.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setModel(TreeModel
\begin_inset space ~
\end_inset

model) Method to set the tree model.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setScrollBarPolicy(int
\begin_inset space ~
\end_inset

horiz,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

vert) Method to set the scroll bar appearance.
 It can be shown always (
\family typewriter
SCROLLBAR_ALWAYS
\family default
), never (
\family typewriter
SCROLLBAR_NEVER
\family default
), or as needed (
\family typewriter
SCROLLBAR_AS_NEEDED
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
initTree(Node
\begin_inset space ~
\end_inset

root) Method to set the tree root node with the new root node.
 If the new root node is 
\family typewriter
null
\family default
, the tree is unchanged.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setIcon(int
\begin_inset space ~
\end_inset

iconType,
\begin_inset space ~
\end_inset

Image
\begin_inset space ~
\end_inset

img) Method to set the icon of the tree based on the icon type.
 Note: you should not change the plus and minus icons.
 You can set the open/close to 
\family typewriter
null
\family default
 (setting one will 
\family typewriter
null
\family default
 out the other).
 The parameter 
\family typewriter
iconType
\family default
 can be one out of 
\family typewriter
ICON_PLUS
\family default
, 
\family typewriter
ICON_MINUS
\family default
, 
\family typewriter
ICON_OPEN
\family default
, 
\family typewriter
ICON_CLOSE
\family default
, and 
\family typewriter
ICON_FILE
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAll() Method to empty the tree, setting all elements of the array
 to 
\family typewriter
null
\family default
, so they can be garbage collected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Same as the 
\family typewriter
removeAll()
\family default
 method.
 Just a more clearer method name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(int
\begin_inset space ~
\end_inset

index) Method to remove the given index from the tree items vector.
 This method will not remove the node from the original node.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Object
\begin_inset space ~
\end_inset

item) Method to remove an object (node) from the tree's items vector.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
expand(Node
\begin_inset space ~
\end_inset

node) Method to expand a collapsed node.
 It returns 
\family typewriter
true
\family default
 if the item was expanded; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
collapse(Node
\begin_inset space ~
\end_inset

node) Method to collapse an expanded node.
 It returns 
\family typewriter
true
\family default
 if the item was collapsed; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setItemAt(int
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

s) Method to set an object (node) at the given index, starting from 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItemAt(int
\begin_inset space ~
\end_inset

i) Method to get the object (node) at the given index.
 Returns an empty string in case of error.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedItem() Method to return the selected item (node) of the tree
 or 
\family typewriter
null
\family default
 if no selection has been made.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedIndex() Method to return the position of the selected item (node)
 of the tree or -1 if the tree has no selected index yet.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getItems() Method to return all items (nodes) in the items vector as an
 array of objects.
 The objects are of the class 
\family typewriter
Node
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
indexOf(Object
\begin_inset space ~
\end_inset

name) Method to return the index of the item (node) specified by the name,
 or -1 if not found.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedItem(Object
\begin_inset space ~
\end_inset

name) Method to select the given name.
 If the name is not found, the current selected item (node) is not changed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedIndex(int
\begin_inset space ~
\end_inset

i) Method to select the given index and scroll to it if necessary.
 Note: the selection must be made only after the control has been added
 to the container and its rect has been set.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of items (
\family typewriter
Node
\family default
s).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Control
\begin_inset space ~
\end_inset

control),remove(Control
\begin_inset space ~
\end_inset

control) Do nothing.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width, i.
 e., size of the largest item plus 20.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the number of items multiplied by the font
 metrics height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
find(char
\begin_inset space ~
\end_inset

c) Searches the tree for an item with the first letter matching the given
 character.
 The search is made case insensitive.
 Note: if you override this class you must implement this method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setEnabled(boolean
\begin_inset space ~
\end_inset

enabled) Method to enable this control if the specified enabled flag is
 
\family typewriter
true
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onBoundsChanged(boolean
\begin_inset space ~
\end_inset

screenChanged) Method to recalculate the box size for the selected item
 if the control is resized by the main application.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nodeRemoved(Node
\begin_inset space ~
\end_inset

node) Method to notify the tree that a node has been removed from the tree
 model and to repaint the tree to reflect the changes, if necessary.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nodeInserted(Node
\begin_inset space ~
\end_inset

parent,
\begin_inset space ~
\end_inset

Node
\begin_inset space ~
\end_inset

child,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index) Method to notify the tree that a node has been added to the tree
 model and to repaint the tree to reflect the changes.
 
\family typewriter
parent
\family default
 is the parent node of the new added node, 
\family typewriter
child
\family default
 is the newly added node and 
\family typewriter
index
\family default
 is the index of the new node.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nodeModified(Node
\begin_inset space ~
\end_inset

node) Method to notify the tree that a node in the tree model has been modified
 (currently - only changing the user object).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
checkClicked(int
\begin_inset space ~
\end_inset

sel) Checks or unchecks a node clicked with the given index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCursorColor(int
\begin_inset space ~
\end_inset

color) Method to set the cursor color for the tree.
 The default is equal to the background slightly darker.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reload() Method to reload the tree.
 Use this method when the tree model has made a drastic change.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
unload() Method to clear the tree and release the tree model references.
\end_layout

\begin_layout Standard
The 
\family typewriter
Tree
\family default
 class has two auxiliary classes: 
\family typewriter
TreeModel
\family default
 and 
\family typewriter
Node
\family default
.
 
\family typewriter
TreeModel
\family default
 public components are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
allowsChildren Flag used to determine if a node is a leaf or a folder.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TreeModel(Node
\begin_inset space ~
\end_inset

root,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

allowsChildren) Constructor to create a tree model with the specified root
 node and indicating if the tree alows children or not (is to be a leaf
 node).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TreeModel(Node
\begin_inset space ~
\end_inset

root) Constructor to create a tree model with the specified root node and
 with 
\family typewriter
allowsChildren == true
\family default
 (the node is not a leaf).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TreeModel() Constructor to create an empty tree model with 
\family typewriter
allowsChildren == true
\family default
.
 The label of the root node will be empty.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TreeModel(boolean
\begin_inset space ~
\end_inset

allowsChildren) Constructor to create an empty tree model that use 
\family typewriter
allowsChildren
\family default
 to determine the leaf node, if and only if 
\family typewriter
allowsChildren == true
\family default
.
 The label of the root node will be empty.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Method to clear the tree model.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reload() Method to notify the tree to reload.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRoot() Method to return the root node of the tree model.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setRoot(Node
\begin_inset space ~
\end_inset

root) Method to set the root node of the tree model and notify the tree
 to reload the tree.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insertNode(Node
\begin_inset space ~
\end_inset

parent,
\begin_inset space ~
\end_inset

Node
\begin_inset space ~
\end_inset

newNode,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index) Method to insert a node to the parent node at the specified position.
 This method will notify the associated tree to display the node, if the
 parent node is expanded.
 If the index is out of range, the new node will be inserted at the end
 of the parent node children vector (consider, in this case, using the 
\family typewriter
addNode()
\family default
 method, which is faster).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addNode(Node
\begin_inset space ~
\end_inset

parent,
\begin_inset space ~
\end_inset

Node
\begin_inset space ~
\end_inset

newNode) Method to add a node to the parent node at the last position of
 the vector.
 This method will notify the associated tree to display the node, if the
 parent node is expanded.
 This is faster than 
\family typewriter
insertNode()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeNode(Node
\begin_inset space ~
\end_inset

parent,
\begin_inset space ~
\end_inset

Node
\begin_inset space ~
\end_inset

node) Method to remove a node from the tree.
 This method will notify the tree to collapse itself.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
modifyNode(Node
\begin_inset space ~
\end_inset

node,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

userObject) Method to modify a node whose identifier is 
\family typewriter
userObject
\family default
 and notify the tree of the changes.
 
\end_layout

\begin_layout Standard
The other auxiliar class, 
\family typewriter
Node
\family default
, has the following attributes (excluding the ones heired from 
\family typewriter
Vector
\family default
):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
userObject The user's object that can be set with anything you want.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
userInt The user's integer that can be set with anything you want.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
allowsChildren Flag to determine if this node can have children (i.
 e.
 if it is not to be a leaf node).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
visited Flag to determine if the leaf node has been clicked before.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isChecked Flag to determine if this node is checked (in multiple-selection
 trees).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
backColor The background color, or -1 to use the default.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
foreColor The foreground color, or -1 to use the default.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Node() Default constructor to create a tree node that has no parent and
 no children, but which allows children.
 This node identifier is an empty string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Node(Object
\begin_inset space ~
\end_inset

userObject) Constructor to create a tree node with no parent, no children,
 but which allows children, and initializes it with the specified identifier,
 which does not necessarily need to be a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(Node
\begin_inset space ~
\end_inset

newChild) Method to remove 
\family typewriter
newChild
\family default
 from its parent and make it a child of the node by adding it to the end
 of this node's children vector.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
breadthFirstVector() Method to create and return a vector of nodes that
 traverses the subtree rooted at the node in breadth-first order.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getChildAfter(Node
\begin_inset space ~
\end_inset

aChild) Method to return the child in the node's child array that immediately
 follows 
\family typewriter
aChild
\family default
, which must be a child of the node; otherwise, retuns 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getChildBefore(Node
\begin_inset space ~
\end_inset

aChild) Method to return the child in the node's child array that immediately
 precedes 
\family typewriter
aChild
\family default
, which must be a child of the node; otherwise, retruns 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFirstChild() Method to return the node's first child.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLastChild() Method to return the node's last child.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLevel() Method to return the number of levels above the node, that is
 the distance from the root to it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNodeName() Method to return the node name of the node.
 If the node identifier is not a string, it is converted to it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNextSibling() Method to return the next sibling of the node in the parent's
 children array.
 Returns 
\family typewriter
null
\family default
 if the node has no parent or is the parent's last child.
 This method performs a linear search that is 
\family typewriter
O(n)
\family default
 where 
\family typewriter
n
\family default
 is the number of children.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreviousSibling() Method to return the previous sibling of the node in
 the parent's children array.
 Returns 
\family typewriter
null
\family default
 if the node has no parent or is the parent's first child.
 This method performs a linear search that is 
\family typewriter
O(n)
\family default
 where 
\family typewriter
n
\family default
 is the number of children.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getParent() Method to return the node's parent or 
\family typewriter
null
\family default
 if the node has no parent (is the root).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPath() Method to return the path from the root to get to this node.
 It returns an array of nodes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRoot() Method to return the root of the tree that contains the node.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getUserObjectPath() Method to return the user object path, from the root,
 to get to the node.
 It returns an object array with the nodes identifiers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insert(Node
\begin_inset space ~
\end_inset

newChild,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

childIndex) Method to remove 
\family typewriter
newChild
\family default
 from its present parent (if it has a parent), sets the child's parent to
 the node, and then adds the child to this node's child array at index 
\family typewriter
childIndex
\family default
.
 If 
\family typewriter
childINdex
\family default
 is out of bounds, the new child will be inserted at the end of the children
 vector.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isLeaf() Method to return 
\family typewriter
true
\family default
 if the node has no children.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isLeaf(boolean
\begin_inset space ~
\end_inset

useAllowsChildren) Method to return 
\family typewriter
true
\family default
 if this node is not to have children (do not have and won't have children).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isRoot() Method to return 
\family typewriter
true
\family default
 if this node is a root.
 Root node is node that has a 
\family typewriter
null
\family default
 parent node.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isNodeChild(Node
\begin_inset space ~
\end_inset

aNode) Method to return 
\family typewriter
true
\family default
 if 
\family typewriter
aNode
\family default
 is a child of the node.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isNodeSibling(Node
\begin_inset space ~
\end_inset

anotherNode) Method to return 
\family typewriter
true
\family default
 if 
\family typewriter
anotherNode
\family default
 is a sibling of (has the same parent as) the node.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(int
\begin_inset space ~
\end_inset

childIndex) Method to remove the child at the specified index from the node's
 children and sets that node's parent to 
\family typewriter
null
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(Node
\begin_inset space ~
\end_inset

aChild) Method to remove 
\family typewriter
aChild
\family default
 from the node's child array, giving it a 
\family typewriter
null
\family default
 parent.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAllChildren() Method to remove all of the node's children, setting
 their parents to 
\family typewriter
null
\family default
.
 If you don't want to set their parents to 
\family typewriter
null
\family default
, call 
\family typewriter
removeAllElements()
\family default
 instead.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeFromParent() Method to remove the subtree rooted at the node from
 the tree, giving the node a 
\family typewriter
null
\family default
 parent.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParent(Node
\begin_inset space ~
\end_inset

parent) Method to set the node's parent to 
\family typewriter
parent
\family default
 but does not change the parent's child array.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Method to return the result of sending 
\family typewriter
toString()
\family default
 to the node's identifier, or an empty string if the node has no identifier.
\end_layout

\begin_layout Section
Whiteboard
\end_layout

\begin_layout Standard
This is a whiteboard that can be used to draw something.
 It uses a special event flag in order to improve the accuracy.
 
\end_layout

\begin_layout Standard
The sample Painter uses it.
 The pictures below show its whiteboard empty and drawn, respectively, where
 the application interface style was changed to Android:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/white_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/white_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following attributes, constructors, and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
borderColor Set this to some color so that a frame can be drawn around the
 image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useAA Set to 
\family typewriter
true
\family default
 to enable antialiase on the line drawing.
 It must be set right after the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
thick Set to 
\family typewriter
true
\family default
 to draw a thick line.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Whiteboard() Constructs a new whiteboard, setting the back color to white.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onBoundsChanged(boolean
\begin_inset space ~
\end_inset

screenChanged) Now that we know our bounds, we can create the image that
 will hold the drawing.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getImage() Returns the image where the drawing is taking place.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredWidth() Returns the preferred width: 
\family typewriter
FILL
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPreferredHeight() Returns the preferred height: 
\family typewriter
FILL
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setImage(Image
\begin_inset space ~
\end_inset

image) Sets the image for this whiteboard.
 Pass 
\family typewriter
null
\family default
 to create an empty image.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears the whiteboard to the current background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPenColor(int
\begin_inset space ~
\end_inset

c) Sets the drawing pen color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPenColor() Returns the drawing pen color.
 
\end_layout

\begin_layout Chapter
Charts
\end_layout

\begin_layout Standard
Here a list of chart classes supported by TotalCross.
 They are located in the package 
\family typewriter
totalcross.ui.
 chart
\family default
.
 For more details, please check the JavaDocs.
\end_layout

\begin_layout Itemize

\family typewriter
Chart
\end_layout

\begin_deeper
\begin_layout Standard
The base class of all 
\family typewriter
Chart
\family default
 classes.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ColumnChart
\end_layout

\begin_deeper
\begin_layout Standard
A vertical column chart.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
LineChart
\end_layout

\begin_deeper
\begin_layout Standard
This class represents a line chart.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PieChart
\end_layout

\begin_deeper
\begin_layout Standard
A simple pie chart.
 
\end_layout

\begin_layout Standard
The values do not have to be in percentage; the percentage is computed based
 on the series values.
 If the user clicks on the slice, a popup shows the corresponding value.
 By setting the 
\family typewriter
legendValueSuffix
\family default
 to 
\family typewriter
"%"
\family default
, the value displayed will be the percentage instead of the serie's value.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PointLineChart
\end_layout

\begin_deeper
\begin_layout Standard
Abstract class used by points and line charts.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
XYChart 
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
XYChart
\family default
 is a scatter chart.
 
\end_layout

\end_deeper
\begin_layout Chapter
The Window class
\end_layout

\begin_layout Standard
As you already know, a TotalCross program with user interface consists of
 one and only one main window (a class that directly or indirecly extends
 
\family typewriter
MainWindow
\family default
).
 This main window can pop up a window, and this new window can pop up another
 one, and so on.
 Windows in TotalCross are always modal, therefore, only the last popped
 up window can receive events and you cannot switch from the topmost Window
 to the previous without closing the topmost one.
\end_layout

\begin_layout Standard
Although the 
\family typewriter
Window
\family default
 class extends 
\family typewriter
Control
\family default
, you can't add a 
\family typewriter
Window
\family default
 to a 
\family typewriter
Container
\family default
.
 Doing this results in a 
\family typewriter
RuntimeException
\family default
.
 To show a window, you must use the method 
\family typewriter
popup()
\family default
 or the method 
\family typewriter
popupNonBlocking()
\family default
.
\end_layout

\begin_layout Standard
The following example creates a popup window class: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class TestWindow extends Window
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btnHi;
\end_layout

\begin_layout Plain Layout

	public TestWindow()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Test",RECT_BORDER); // with caption and borders
\end_layout

\begin_layout Plain Layout

		setRect(CENTER,CENTER,Settings.screenWidth/2,Settings.screenHeight/4);
\end_layout

\begin_layout Plain Layout

		add(btnHi=new Button("Hi!"),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == btnHi)
\end_layout

\begin_layout Plain Layout

			unpop(); // a WINDOW_CLOSED event will be posted to this PARENT window.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use it in the normal way (
\series bold
blocking
\series default
): 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Launcher extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btn;
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (e.target == btn)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			TestWindow tw = new TestWindow();
\end_layout

\begin_layout Plain Layout

			tw.popup(); // this line is only executed after the window is closed.
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use it non-blocking (the execution continues right after the popup command,
 even with the window still open): 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Launcher extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	TestWindow tw;
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		tw = new TestWindow();
\end_layout

\begin_layout Plain Layout

		tw.popupNonBlocking(); // this line is executed immediately
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.target == tw && event.type == ControlEvent.WINDOW_CLOSED)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			// any stuff
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Blocking popup may be use in 
\family typewriter
InputBox
\family default
/
\family typewriter
MessageBox
\family default
 classes, while non-blocking popup is used in 
\family typewriter
MenuBar
\family default
 and other classes.
 Important note: you can't use 
\family typewriter
popup()
\family default
 with a delay to unpop it.
 In this case, the correct would be to use 
\family typewriter
popupNonBlocking()
\family default
: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mb = new MessageBox(...);
\end_layout

\begin_layout Plain Layout

mb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

Vm.sleep(5000); // or do something else
\end_layout

\begin_layout Plain Layout

mb.unpop(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you use 
\family typewriter
popup()
\family default
 in this specific case, the VM will hang.
\end_layout

\begin_layout Standard
Some other features of the 
\family typewriter
Window
\family default
 class:
\end_layout

\begin_layout Itemize
Windows can have a title that can be set by the method 
\family typewriter
setTitle(String title)
\family default
 (which calls 
\family typewriter
repaint()
\family default
) or passed to the constructor.
\end_layout

\begin_layout Itemize
The window border can be selected from one of the multiple styles shown
 below, by using the 
\family typewriter
setBorderStyle(byte borderStyle)
\family default
 method or passing the desired style to the 
\family typewriter
Window
\family default
 constructor.
 The parameter value can be 
\family typewriter
NO_BORDER
\family default
, 
\family typewriter
RECT_BORDER
\family default
, 
\family typewriter
ROUND_ BORDER
\family default
, 
\family typewriter
TAB_BORDER
\family default
, 
\family typewriter
TAB_ONLY_BORDER
\family default
, 
\family typewriter
HORIZONTAL_GRADIENT
\family default
, or 
\family typewriter
VERTICAL_ GRADIENT
\family default
.
 To retrive it, use 
\family typewriter
getBorderStyle()
\family default
.
\end_layout

\begin_layout Itemize
There are two constructors: the default one, that creates a window with
 no title and no border, and one constructor with both title and border
 parameters.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Window()
\end_layout

\begin_layout Itemize

\family typewriter
Window(String title, byte borderStyle)
\end_layout

\end_deeper
\begin_layout Itemize
Windows can be moved around the screen by dragging the window’s title.
 If the window has no title, it can’t be moved.
 You can make a titled window unmovable by calling the 
\family typewriter
makeUnmovable()
\family default
 method.
\end_layout

\begin_layout Itemize
The title font can be changed using the 
\family typewriter
setTitleFont()
\family default
 method.
 To retrive it, use
\begin_inset Newline newline
\end_inset


\family typewriter
getTitleFont()
\family default
.
 By default, the font is the one used by the main window, with bold style.
\end_layout

\begin_layout Itemize
Only one control can hold the focus at a time.
 To change focus to another control, use the 
\family typewriter
setFocus(Control c)
\family default
 method (this can also be done through the 
\family typewriter
requestFocus()
\family default
 method in the 
\family typewriter
totalcross.ui.Control
\family default
 class).
 When a user types a key, the control with focus gets the key event.
 Calling this method will cause a 
\family typewriter
FOCUS_OUT
\family default
 control event to be posted to the window's current focus control (if one
 exists) and will cause a 
\family typewriter
FOCUS_IN
\family default
 control event to be posted to the new focus control.
 The 
\family typewriter
getFocus()
\family default
 method returns the control that currently owns the focus.
 
\end_layout

\begin_layout Itemize
The rectangle area excluding the border and the title is defined as the
 client rectangle.
 You can get it with the 
\family typewriter
getClientRect()
\family default
 method.
\end_layout

\begin_layout Itemize
A window can be popped up by calling the 
\family typewriter
popupNonBlocking()
\family default
 method and can be unpopped by calling the 
\family typewriter
unpop()
\family default
 method.
 The popup process saves the area behind the window that is being popped
 up and the unpop process restores that area.
 The 
\family typewriter
unpop()
\family default
 method posts a 
\family typewriter
ControlEvent.WINDOW_CLOSED
\family default
 event to the caller window.
 The 
\family typewriter

\begin_inset Newline newline
\end_inset

popupNonBlocking()
\family default
 method can be called like 
\family typewriter
this.popupNonBlocking()
\family default
.
 Calling 
\family typewriter
unpop()
\family default
 when only the 
\family typewriter
MainWindow
\family default
 is active does nothing.
 
\end_layout

\begin_layout Itemize
A window can also be popped up by calling the 
\family typewriter
popup()
\family default
 method, and be unpopped by the same 
\family typewriter
unpop() 
\family default
method described above.
 The big difference is that in 
\family typewriter

\begin_inset Newline newline
\end_inset

popupNonBlocking()
\family default
, the program execution continues to the next line, while in 
\family typewriter
popup()
\family default
, the program execution is halted and only continues when the popped up
 window is dismissed.
 
\family typewriter
Menu
\family default
, 
\family typewriter
MessageBox
\family default
, 
\family typewriter
ComboBox
\family default
, and 
\family typewriter
ComboBoxDropDown
\family default
 are popped up using 
\family typewriter
popupNonBlocking()
\family default
, because execution does not need to be halted.
 
\family typewriter
InputDialog
\family default
, 
\family typewriter
Calendar
\family default
, and 
\family typewriter
Calculator
\family default
 are usually popped up using 
\family typewriter
popup()
\family default
 because the user may want to get the result of the dialog in an easy way.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You can't use 
\family typewriter
popup()
\family default
 to popup alternating windows that call each other recursively.
 For example, suppose that from 
\family typewriter
win1
\family default
 you call 
\family typewriter
win2.popup()
\family default
, then at 
\family typewriter
win2
\family default
 you call 
\family typewriter
unpop()
\family default
 and then 
\family typewriter
win1.popup()
\family default
.
 Then, from 
\family typewriter
win1
\family default
 you do 
\family typewriter
unpop()
\family default
 again and 
\family typewriter
win2.popup()
\family default
, and so on.
 This will lead to an 
\family typewriter
OutOfMemoryError
\family default
 on the device due to a native stack overflow.
 To fix this, just replace the popup by 
\family typewriter
popupNonBlocking()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The topmost window (the one who receive events) can be obtained with the
 static method 
\family typewriter
getTopMost()
\family default
.
 To check if this window is the topmost, use the 
\family typewriter
isTopMost()
\family default
 method.
\end_layout

\begin_layout Itemize
Try 
\family typewriter
setGrabPenEvents()
\family default
 for settting to a control to redirect all pen events directly to it.
 This method speeds up pen event processing.
 Used in 
\family typewriter
Whiteboard
\family default
 class.
 
\end_layout

\begin_layout Itemize
You may check if this window is visible using the 
\family typewriter
isVisible()
\family default
 method.
 This method is inherited from 
\family typewriter
totalcross.ui.Control
\family default
, but it simply checks if the current window is the topmost one.
\end_layout

\begin_layout Itemize
Using the 
\family typewriter
setStatePosition()
\family default
 method can show PalmOS grafitti state characters.
 To hide it, call 
\family typewriter
setStatePosition(HIDE_STATE, HIDE_STATE)
\family default
.
 This method is also used in Windows CE and Pocket PC to show/hide the virtual
 keyboard (when applicable).
 Just use as parameter 
\family typewriter
VK_HIDE
\family default
, 
\family typewriter
VK_TOP
\family default
, and 
\family typewriter
VK_BOTTOM
\family default
 to hide, display the virtual keyboard at the top of the screen or at the
 bottom of the screen, respectively.
 Note that this will have no effect in devices that don't have a virtual
 keyboard.
\end_layout

\begin_layout Itemize
Each window can have a menu attached by using the method 
\family typewriter
setMenuBar()
\family default
.
 The menuBar can be made visible programatically by calling the 
\family typewriter
popupMenuBar()
\family default
 method.
\end_layout

\begin_layout Itemize
Suppose you wish to allow the user to abort a task being executed by pressing.
 You can use the method 
\family typewriter
pumpEvents()
\family default
 to process all events in the queue.
 This method is used to implement a blocking Window.
 Here is an example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while(someCondition) 
\end_layout

\begin_layout Plain Layout

	Event.pumpEvents();
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
getPreferredWidth()
\family default
 and 
\family typewriter
getPreferredHeight()
\family default
 have a special meaning for the 
\family typewriter
Window
\family default
 class.
 They return the minimum width/height needed for the correct display of
 this window.
 
\family typewriter
getPreferredWidth()
\family default
 returns the width of the title (if any) plus the width of the border (if
 any).
 
\family typewriter
getPreferredHeight()
\family default
 returns the height of the title (if any) plus the height of the border
 (if any).
\end_layout

\begin_layout Standard
There are some useful protected methods that may be implemented by controls
 that extend 
\family typewriter

\begin_inset Newline newline
\end_inset

totalcross.ui.Window
\family default
.
 Those methods are placeholders and there is no need to call the super method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onClickedOutside(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y) This method is used in popup windows.
 If the user clicks outside the window’s bounds, this method is called giving
 the absolute coordinates of the clicked point.
 There are two options:
\begin_inset Newline newline
\end_inset

If you had handled the action, return 
\family typewriter
true
\family default
 in this method.
 Otherwise, 
\family typewriter
false
\family default
 must be returned and if the 
\family typewriter
beepIfOut
\family default
 member is 
\family typewriter
true
\family default
, a beep is played (in other words, 
\family typewriter
beepIfOut
\family default
 can be set to 
\family typewriter
false
\family default
 to disable this beep).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onPopup() Called just after the behind contents are saved and before the
 popup process begin.
 When this method is called, the topmost window is still the parent of the
 window being popped up.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postPopup() Called after the popup process ended.
 When this method is called, the popped up window is fully functional.
 It is a good place to put a 
\family typewriter
control.requestFocus()
\family default
 to make the window popup with the focus in a default control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onUnpop() Called just before the unpop process begin.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postUnpop() Called after the unpop process ended.
 When this method is called, the unpopped window has gone away and the parent
 window is currently the topmost.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
postPressedEvent() Posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event on the focused control.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
A very common mistake is to popup a window without setting its bounds.
 If no bounds are set, the window will not receive events.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The other members that can be used (all public and some protected) of the
 
\family typewriter
Window
\family default
 class are explained here:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
needsPaint 
\family typewriter
true
\family default
 if there are any controls marked for repaint (some area of the window is
 invalidated).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tempTitle A temporary title that will be displayed when the 
\family typewriter
Window
\family default
 pops up.
 It will be replaced by the original title when it is closed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
topmost Stores the topmost window.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
firstFocus The control that should get focus when a focus traversal key
 is pressed and none has focus.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
canDrag (protected) If 
\family typewriter
true
\family default
 and if this is a popup window, the user is allowed to drag the title and
 make the window move around.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highResPrepared (protected) This extremely important member is used when
 your program runs on devices with a screen resolution greater than the
 default 160x160 of Palm OS.
 Some devices have 320x320, 240x320, etc.
 For each device, the font is usually proportional to the resolution.
 Since TotalCross programs are placed in a relative way, and since the relativen
ess depends on the window's size, your popped up window would look squashed
 because the windows bounds are usually set with an absolute coordinate.
 To avoid this, the window manager checks if your window is prepared for
 high resolution devices (i.e., you tested it against other resolutions and
 set the right value for the window depending on each case).
 If your window is not prepared, then the 
\family typewriter
setRect()
\family default
 method will multiply the size of the window by a factor that depends on
 how much the screen resolution has changed from the basic 160x160 (E.g.:
 in a 240x320 device, a 80x40 window will be changed to 120x80).
 Also, the window will be centered on screen.
 So, if you have tested your window in other resolutions, set this flag
 to 
\family typewriter
true
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cancelPenUp If 
\family typewriter
true
\family default
, the next 
\family typewriter
PEN_UP
\family default
 event will be ignored.
 This is used when a 
\family typewriter
PEN_DOWN
\family default
 cancels a flick, or if a drag-scrollable control needs to cancel the next
 pen_up during a drag-scrolling interaction.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gradientTitleStartColor The starting and ending colors used to fill the
 gradient title.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gradientTitleEndColor The starting and ending colors used to fill the gradient
 title.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
titleColor The title color.
 The title color depends on the border type: it will be the foreground color
 if 
\family typewriter
NO_BORDER
\family default
 is set; otherwise, it will be the background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
titleGap A vertical gap used to increase the title area.
 Defaults to 
\family typewriter
fmH/2
\family default
 on Android and 0 on other user interface styles.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
titleAlign The title horizontal alignment in the window's title area.
 It can be 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
, and you can use an adjustment on the value (E.G.: 
\family typewriter
LEFT+5
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
headerColor,
\begin_inset space ~
\end_inset

footerColor Has the header and the footer colors when on Android style and
 border type is 
\family typewriter
ROUND_BORDER
\family default
.
 Not used on other styles.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fadeOtherWindows Set to 
\family typewriter
true
\family default
 to make the other windows be faded when the window appears.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fadeValue The value used to fade the other windows.
 Defaults to 128.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
robot The 
\family typewriter
UIRobot
\family default
 instance that is being used to record or play events.
\end_layout

\begin_layout Standard
The other public methods are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDeviceTitle(String
\begin_inset space ~
\end_inset

title) Sets the title text in the task bar for non-Palm OS operating systems.
 Does not work in full-screen mode.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeFocus() Calling this method will cause a 
\family typewriter
FOCUS_OUT
\family default
 control event to be posted to the window's current focus control (if one
 exists).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
swapFocus(Control
\begin_inset space ~
\end_inset

c) Changes the focus to the desired control, without posting 
\family typewriter
FOCUS_IN
\family default
 and 
\family typewriter
FOCUS_OUT
\family default
 events.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
validate() Calls 
\family typewriter
_doPaint()
\family default
 if the window needs painting.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSIP(int
\begin_inset space ~
\end_inset

sipOption,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

edit,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

secret) Used to set the position of the Soft Input Panel on devices that
 support it, like Windows CE, where 
\family typewriter
sipOption
\family default
 is one of the 
\family typewriter
SIP_xxx
\family default
 values (
\family typewriter
SIP_HIDE
\family default
, 
\family typewriter
SIP_SHOW
\family default
, 
\family typewriter
SIP_TOP
\family default
, 
\family typewriter
SIP_BOTTOM
\family default
, 
\family typewriter
SIP_ENABLE_NUMERICPAD
\family default
, and 
\family typewriter
SIP_DISABLE_NUMERICPAD
\family default
), 
\family typewriter
edit
\family default
 is the control 
\family typewriter
Edit
\family default
 or 
\family typewriter
MultiEdit
\family default
 (iPhone only), and 
\family typewriter
secret
\family default
 is to enable password entry (iPhone only).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
swap(Container
\begin_inset space ~
\end_inset

newContainer) Used to swap containers from the window.
 To restore the first container, pass 
\family typewriter
null
\family default
 as parameter.
 Note that 
\family typewriter
null
\family default
 cannot be used for the first swap.
 See 
\family typewriter
samples.ui.ContainerSwitch
\family default
.
 This method correctly handles screen rotation for containers that were
 already swapped.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
repaintActiveWindows() Static method that repaints the window stack from
 0 to 
\family typewriter
zStack.size()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setHighlighted(Control
\begin_inset space ~
\end_inset

c) Sets the currently highlighted control which will gain focus if the ACTION
 button is pressed.
 It may be the same of the one that holds focus.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getHighlighted() Gets the currently highlighted control.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
drawHighlight() Avoid drawing the highlight on a 
\family typewriter
Window
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenResized() Called when the screen is resized, probably caused by a
 rotation.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resize() This method resizes the 
\family typewriter
Window
\family default
 to the needed bounds, based on added childs.
 It changes only the size, keeping the 
\family typewriter
x
\family default
,
\family typewriter
y
\family default
 coordinates passed on 
\family typewriter
setRect()
\family default
.
 You can add spaces at right and bottom using the 
\family typewriter
insets.right
\family default
/
\family typewriter
bottom
\family default
 properties.
 Sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class TestWindow extends Window
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public TestWindow()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		...
 call constructor
\end_layout

\begin_layout Plain Layout

		setRect(CENTER, CENTER, Screen.width-40, 1000); // height will be resized
 later
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		setInsets(5,5,5,5);
\end_layout

\begin_layout Plain Layout

		...
 add controls resize();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

In this sample, since the height is variable, you can't use 
\family typewriter
BOTTOM
\family default
 on 
\family typewriter
y
\family default
 nor 
\family typewriter
FILL
\family default
 on 
\family typewriter
height
\family default
; otherwise, resize will not work as expected.
 The same counts if you have a variable width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPopupCount() Returns the number of windows that are popped up.
 If there's only a 
\family typewriter
MainWindow
\family default
, returns 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onRobotKey() Called when a robot key is pressed.
 Don't call this method directly, use 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

deviceRobotSpecialKey
\family default
 instead.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
shiftScreen(Control
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

deltaY) Shifts the screen if SIP can't be moved.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isScreenShifted() Returns if the screen is shifted or not.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never mess with the public member 
\family typewriter
zStack
\family default
.
 It is used to store the windows that are currently popped up.
 It is made public because the 
\family typewriter
totalcross.Launcher
\family default
 class uses it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next is explained how controls inside a window are repainted: 
\end_layout

\begin_layout Enumerate
The programmer calls the 
\family typewriter
repaint()
\family default
 method of some controls, or a control is clicked and marks itself for repaint.
\end_layout

\begin_layout Enumerate
The 
\family typewriter
damageRect()
\family default
 method in class window creates a rectangle (stored in the 
\family typewriter
paintX
\family default
, 
\family typewriter
paintY
\family default
, 
\family typewriter
paintWidth
\family default
 and 
\family typewriter
paintHeight
\family default
 members) with the union of the bounds of all controls marked for repaint.
 
\end_layout

\begin_layout Enumerate
The next time a VM event is posted, the 
\family typewriter
_doPaint()
\family default
 method of the topmost window is called.
 This method paints the window’s title/border (if any) and calls the 
\family typewriter
onPaint()
\family default
 method of all containers and controls that lies inside the rectangle area
 marked for repaint.
 This explains why nothing in the window is updated when you receive events
 directly from a native library (the 
\family typewriter
Scanner
\family default
 class, for example).
 Because the VM is not receiving the event, it never validates the window.
 In these cases, you must update the window yourself, calling 
\family typewriter
repaintNow()
\family default
 or the validate methods.
\end_layout

\begin_layout Standard
Many classes in the 
\family typewriter
totalcross.ui
\family default
 package extend 
\family typewriter
totalcross.ui.Window
\family default
.
 Examples of such classes are 
\family typewriter
CalculatorBox
\family default
 and 
\family typewriter
CalendarBox
\family default
.
 Other good examples are 
\family typewriter

\begin_inset Newline newline
\end_inset

ComboBoxDropDown
\family default
 and 
\family typewriter
MessageBox
\family default
.
 
\end_layout

\begin_layout Standard
It's important to be aware that it is not a good practice to create classes
 that extend 
\family typewriter
Window
\family default
 if they will occupy the whole screen, because they use a lot of memory
 to store the underlying area.
 Opening the menu may lead to time-consuming redraws of all opened windows
 due to out-of-memory problems.
 In these cases, it is better to use 
\family typewriter
Containers
\family default
.
\end_layout

\begin_layout Chapter
UIColors
\end_layout

\begin_layout Standard
This class contains the default colors used in most user interface windows,
 like 
\family typewriter
CalendarBox
\family default
, 
\family typewriter
KeyboardBox
\family default
, 
\family typewriter
CalculatorBox
\family default
, 
\family typewriter
InputBox
\family default
, 
\family typewriter
MessageBox
\family default
, and also the default foreground and background colors of all controls
 created.
 
\end_layout

\begin_layout Standard
There are no methods in this class, only public static members, which can
 be freely changed to meet your user interface color scheme.
 To correctly change the colors for your own, you must do it in the constructor
 of your application.
 Note that each member defines the default value for all controls of your
 application.
\end_layout

\begin_layout Standard
Its attributes and descriptions are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keyboardBack 
\family typewriter
KeyboardBox
\family default
 background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keyboardFore 
\family typewriter
KeyboardBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keyboardAction 
\family typewriter
KeyboardBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calculatorBack 
\family typewriter
CalculatorBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calculatorFore 
\family typewriter
CalculatorBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calculatorAction 
\family typewriter
CalculatorBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calendarBack 
\family typewriter
CalendarBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calendarFore 
\family typewriter
CalendarBox
\family default
 foreground color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calendarAction 
\family typewriter
CalendarBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
calendarArrows 
\family typewriter
CalendarBox
\family default
 arrow colors.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
messageboxBack 
\family typewriter
MessageBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
messageboxFore 
\family typewriter
MessageBox
\family default
 foreground color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
messageboxAction 
\family typewriter
MessageBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inputboxBack 
\family typewriter
InputBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inputboxFore 
\family typewriter
InputBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inputboxAction 
\family typewriter
InputBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
colorchooserboxBack 
\family typewriter
ColorChooserBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
colorchooserboxFore 
\family typewriter
ColorChooserBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
colorchooserboxAction 
\family typewriter
ColorChooserBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tooltipBack 
\family typewriter
ToolTip
\family default
 background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tooltipFore 
\family typewriter
ToolTip
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keypadBack 
\family typewriter
Keypad
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keypadFore 
\family typewriter
Keypad
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
controlsFore Default control foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
controlsBack Default control background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sameColors Makes the edit area have the same color of the background setting
 this to 
\family typewriter
true
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
highlightColors These are the colors used to draw the highlight rectangle.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vistaFadeStep The default step used on Vista buttons to make the fade.
 Decrease the step to make the button lighter.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fileChooserFore 
\family typewriter
FileChooserBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fileChooserBack 
\family typewriter
FileChooserBox
\family default
 background color.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
htmlContainerControlsFore 
\family typewriter
HtmlContainer
\family default
 background color for the Form controls.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
htmlContainerControlsBack 
\family typewriter
HtmlContainer
\family default
 foreground color for the Form controls.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
htmlContainerLink 
\family typewriter
HtmlContainer
\family default
 link foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeboxVisorBack 
\family typewriter
TimeBox
\family default
 visor's background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeboxVisorCursor 
\family typewriter
TimeBox
\family default
 visor's cursor color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeboxOk 
\family typewriter
TimeBox
\family default
 OK button color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeboxClear 
\family typewriter
TimeBox
\family default
 Clear button color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeboxBack 
\family typewriter
TimeBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
textShadowColor Default value to be used in all 
\family typewriter
textShadowColor
\family default
(s) set in the constructor of a control.
 Defaults to -1.
 Note that it does not affect the shadow when you call 
\family typewriter
setBackColor()
\family default
 or
\begin_inset Newline newline
\end_inset


\family typewriter
setForeColor()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
positionbarColor The color of the position bar for all places that use it.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
positionbarBackgroundColor The color to fill the background of the position
 bar.
 Defaults to -1 (don't fill).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
spinnerFore 
\family typewriter
Spinner
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
spinnerBack 
\family typewriter
Spinner
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
shadeFactor The shaded factor (0 - 100) used to fill a background when the
 backgroundstyle is 
\family typewriter
BACKGROUND_ SHADED
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
numericboxBack 
\family typewriter
NumericBox
\family default
 background color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
numericboxFore 
\family typewriter
NumericBox
\family default
 foreground color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
numericboxAction 
\family typewriter
NumericBox
\family default
 action color.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
shiftScreenColor The color that will be used to paint the disabled area
 when a screen shift occurs.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardBack Background color of the clipboard menu that is opened at 
\family typewriter
Edit
\family default
 and 
\family typewriter
MultiEdit
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardFore Foreground color of the clipboard menu that is opened at 
\family typewriter
Edit
\family default
 and 
\family typewriter
MultiEdit
\family default
.
 
\end_layout

\begin_layout Chapter
Interface Dialogs
\end_layout

\begin_layout Standard
The TotalCross SDK provides some handy interface dialogs, which are windows
 that handles common user interaction scenarios, like displaying an informative
 message or requesting a specific user input.
\end_layout

\begin_layout Standard
Interface dialogs are pop-up windows that extend the 
\family typewriter
Window
\family default
 class, and just like 
\family typewriter
Window
\family default
, they are not automatically displayed under creation.
 To show or hide a dialog you must use 
\family typewriter
Window
\family default
 methods: 
\family typewriter
popup()
\family default
, 
\family typewriter
popupNonBlocking()
\family default
 and 
\family typewriter
unpop()
\family default
.
\end_layout

\begin_layout Section
MessageBox
\end_layout

\begin_layout Standard
Simple dialog used to display a text with some user-defined buttons.
 Useful for displaying informative messages or to make the user take a decision
 before proceeding (e.g.
 “Yes/No”, “Ok/Cancel”, “Save/Discard/Cancel”).
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
MessageBox
\family default
 from the UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/messagebox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
MessageBox
\family default
 has five constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MessageBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

msg) Creates a 
\family typewriter
MessageBox
\family default
 with the given title and message.
 The message is displayed using a label, and can be displayed in multiple
 lines if previously parsed with the 
\family typewriter

\backslash
n
\family default
 character.
 It also displays a single 
\family typewriter
<Ok>
\family default
 button to dismiss the window.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MessageBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

buttonCaptions) Same as the above, but also receives a string array specifying
 the button captions.
 A 
\family typewriter

\begin_inset Newline newline
\end_inset

PushButtonGroup
\family default
 is used to display the buttons, and the method 
\family typewriter

\begin_inset Newline newline
\end_inset

getPressedButtonIndex()
\family default
 returns the index of the pressed button (where the first one has index
 0).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth) Same as above, but the last parameter indicates that all the
 buttons have the same width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap) Same as the second one, but also receives the 
\family typewriter
gap
\family default
 (space between buttons) and 
\family typewriter
insideGap
\family default
 (space between the button's text and it's bounds) to be used by the 
\family typewriter
PushButtonGroup
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap) It is the most complete constructor, with all the possible parameters.
\end_layout

\begin_layout Standard
The message box is displayed on the center of the device screen, and its
 bounds are calculated based on the given title, text and buttons.
 If the text height is above the screen limits, two arrows are added to
 the message box to allow the text scrolling.
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox
\family default
 has the following public fields (omitting some methods from its superclasses):
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
btns The 
\family typewriter
PushButtonGroup
\family default
 with the box buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
yPosition Defines the 
\family typewriter
y
\family default
 position on screen where the window opens.
 It can be changed to 
\family typewriter
TOP
\family default
 or 
\family typewriter
BOTTOM
\family default
.
 Defaults to 
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buttonKeys If you set the 
\family typewriter
buttonCaptions
\family default
 array in the construction, you can also set this public field to an 
\family typewriter
int
\family default
 array of the keys that maps to each of the buttons.
 For example, if you set the buttons to 
\family typewriter
{"Ok","Cancel"}
\family default
, you can map the enter key for the 
\family typewriter
Ok
\family default
 button and the escape key for the 
\family typewriter
Cancel
\family default
 button by assigning: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

buttonKeys = new int[]{SpecialKeys.ENTER,SpecialKeys.ESCAPE}; 
\end_layout

\end_inset

Note that 
\family typewriter
ENTER
\family default
 is also handled as 
\family typewriter
ACTION
\family default
, since the 
\family typewriter
ENTER
\family default
 key is mapped to 
\family typewriter
ACTION
\family default
 on some platforms.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showExceptionTitle Title shown in the 
\family typewriter
showException()
\family default
 dialog for all exceptions shown this way.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
MessageBox
\family default
 has the following public instance methods (omitting some methods from its
 superclasses):
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
setText(String
\begin_inset space ~
\end_inset

text) This method can be used to set the text AFTER the dialog was shown.
 However, the dialog will not be resized.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setIcon(Image
\begin_inset space ~
\end_inset

icon) Sets an icon to be shown in the 
\family typewriter
MessageBox
\family default
's title, at left.
 It only works if there's a title.
 If you really need an empty title, pass as title a string with a couple
 of spaces, like 
\family typewriter
" "
\family default
.
 The icon's width and height will be set to title's font ascent.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPressedButtonIndex() Returns the index of the pressed button.
 This index is zero based (the first element has index 0).
\begin_inset Newline newline
\end_inset

This method returns -1 if invoked before the window is closed (or if it
 is closed without any button being pressed).
 To make sure you're retrieving the correct value, consider using 
\family typewriter
popup()
\family default
 instead of 
\family typewriter
popupNonBlocking()
\family default
, or invoke this method only after the window is closed (
\family typewriter
MessageBox
\family default
 is a 
\family typewriter
Window
\family default
, so it also posts the event 
\family typewriter
ControlEvent.
 WINDOW_CLOSED
\family default
 when closed).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTextAlignment(int
\begin_inset space ~
\end_inset

align) Sets the alignment of the label that displays the text.
 The argument must be one of the following constants: 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
.
 The default alignment is 
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setUnpopDelay(int
\begin_inset space ~
\end_inset

unpopDelay) Automatically unpops the message box after the given time in
 milliseconds.
 You must use this method just before displaying the window (either by 
\family typewriter
popup()
\family default
 or
\begin_inset Newline newline
\end_inset


\family typewriter
popupNonBlocking()
\family default
).
 This method actually adds a timer to the message box, invoking the 
\family typewriter
unpop()
\family default
 method when the 
\family typewriter
TimerEvent
\family default
 is triggered.
 Be sure to learn how the timer works to better understand this method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEvent(Event
\begin_inset space ~
\end_inset

e) Handles scroll buttons and normal buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDelayToShowButton(int
\begin_inset space ~
\end_inset

ms) Calling this method will make the buttons initially hidden and will
 show them after the specified number of milisseconds.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MessageBox mb = new MessageBox("Novo Tweet!",tweet);
\end_layout

\begin_layout Plain Layout

mb.setTimeToShowButton(7000);
\end_layout

\begin_layout Plain Layout

mb.popup();  
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The method 
\family typewriter
setUnpopDelay()
\family default
 does not affect the regular behavior of the message box – the 
\family typewriter
popupNonBlocking()
\family default
 method will not block the program execution and will still return immediately,
 the 
\family typewriter
popup()
\family default
 method will still block the program execution, and the message box may
 still be dismissed by the user (e.g.
 pressing one of its buttons) before the timer finishes.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
An interesting feature of the message box is that you may create it with
 no buttons, just passing the 
\family typewriter
null
\family default
 value for the constructor's argument 
\family typewriter
buttonCaptions
\family default
.
 However, a message box created with no buttons does not provide a default
 way of being dismissed by the user.
 You must dismiss it programatically, by invoking 
\family typewriter
unpop()
\family default
, using 
\family typewriter
setUnpopDelay()
\family default
 or handling events (e.g.
 you may handle pen events to make it unpop after the user touches the screen).
\end_layout

\begin_layout Standard
The 
\family typewriter
MessageBox
\family default
 class has a handy method to debug your application:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showException(Throwable
\begin_inset space ~
\end_inset

t,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

dumpToConsole) Immediately displays a message box showing the given throwable
 name, message, and its stack trace.
 This information is dumped to the debug console if the field 
\family typewriter
dumpToConsole
\family default
 is 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If you use an IDE with customizable templates for automatic code generation
 (like Eclipse), try changing the template for try/catch blocks to call
 
\family typewriter
MessageBox.showException()
\family default
 instead of 
\family typewriter
Throwable.printStackTrace()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Section
InputBox
\end_layout

\begin_layout Standard
Simple dialog used to get a text input from the user.
 It contains a label to display some text, an edit to receive the user input,
 and some user-defined buttons.
 Basically it's like a message box with an edit.
 
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
InputBox
\family default
 from the UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/inputbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
It has three constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InputBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

defaultValue) Creates an input box with the given title, text, a default
 value for the edit and two buttons: 
\family typewriter
<Ok>
\family default
 and 
\family typewriter
<Cancel>
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InputBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String
\begin_inset space ~
\end_inset

defaultValue,String[]
\begin_inset space ~
\end_inset

buttonCaptions) Same as the above, plus a string array specifying the buttons
 captions.
 A 
\family typewriter
PushButtonGroup
\family default
 is used to display the buttons, and the 
\family typewriter
getPressedButtonIndex()
\family default
 method returns the pressed button index.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
InputBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String
\begin_inset space ~
\end_inset

defaultValue,String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap) The most complete version, where 
\family typewriter
allSameWidth
\family default
 indicates that all the buttons have the same width, 
\family typewriter
gap
\family default
 is the space between buttons, and 
\family typewriter
insideGap
\family default
 is the space between the button's text and it's bounds.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unlike the message box, the argument 
\family typewriter
buttonCaptions
\family default
 cannot have a 
\family typewriter
null
\family default
 value.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The input box is displayed on the center of the device screen, and its bounds
 are calculated based on the given title, text, edit and buttons.
 If the text height is above the screen limits, two arrows are added to
 the input box to allow the text scrolling.
 And its edit receives the focus when the input box is popped up.
\end_layout

\begin_layout Standard
The 
\family typewriter
InputBox
\family default
 class provides the following public attributes and methods (omitting some
 fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
openKeyboardOnPopup Set to 
\family typewriter
true
\family default
 to automatically open the keyboard once the 
\family typewriter
InputBox
\family default
 is open.
 Since this is a static member, it is valid for all 
\family typewriter
InputBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
yPosition Defines the 
\family typewriter
y
\family default
 position on screen where the window opens.
 Can be changed to 
\family typewriter
TOP
\family default
 or 
\family typewriter
BOTTOM
\family default
.
 Defaults to 
\family typewriter
CENTER
\family default
.
 The image above shows a 
\family typewriter
InputBox
\family default
 opened at the bottom.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buttonKeys If you set the 
\family typewriter
buttonCaptions
\family default
 array in the construction, you can also set this public field to an 
\family typewriter
int
\family default
 array of the keys that maps to each of the buttons.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTextAlignment(int
\begin_inset space ~
\end_inset

align) Sets the alignment for the text.
 The parameter must be 
\family typewriter
CENTER
\family default
 (default), 
\family typewriter
LEFT
\family default
, or 
\family typewriter
RIGHT
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPressedButtonIndex() Returns the index of the pressed button.
 This index is zero based (the first element has index 0).
 This method returns -1 if invoked before the window is closed (or if it
 is closed without any button being pressed).
 To make sure you're retrieving the correct value, consider using 
\family typewriter
popup()
\family default
 instead of 
\family typewriter
popupNonBlocking()
\family default
, or invoke this method only after the window is closed (
\family typewriter
InputBox
\family default
 is a 
\family typewriter
Window
\family default
, so it also posts the event 
\family typewriter
ControlEvent.WINDOW_CLOSED
\family default
 when closed).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getEdit() Returns a reference to this input box's edit, so you can change
 its properties.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValue() Returns a string with the edit's text.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setValue(String
\begin_inset space ~
\end_inset

value) Sets the edit with the given value.
\end_layout

\begin_layout Section
KeyboardBox
\end_layout

\begin_layout Standard
Dialog that displays a virtual keyboard that can be used to handle text
 input either by the device's keyboard or by pen events on the virtual keyboard
 on devices with touchscreen.
\end_layout

\begin_layout Standard
Unlike other dialogs, the 
\family typewriter
KeyboardBox
\family default
 constructor does not receive any arguments, and it does not provide any
 methods for its manipulation.
 So how does it work?
\end_layout

\begin_layout Standard
When the keyboard box is popped up, it gets the control of the topmost window
 that currently holds the focus.
 The control is shown at the top of the keyboard box, and any text input
 received is passed to the control as a key event.
 If the virtual keyboard is used, the keyboard box handles the pen event,
 converting it to a key event before passing to the target control.
\end_layout

\begin_layout Standard
The edit and multi edit controls may use the keyboard box for text input.
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
KeyboardBox
\family default
 from the UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/keyboardbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
CalculatorBox
\end_layout

\begin_layout Standard
A dialog with a simpler calculator.
 It allows you to enter two numbers, select an operation and calculate the
 result.
 You may also paste the result or the first operand.
\end_layout

\begin_layout Standard
This class is used by the 
\family typewriter
Edit
\family default
 class when its mode is set to 
\family typewriter
CURRENCY
\family default
 and displays a calculator with six basic operations and a numeric pad.
 Here is a sample from AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/calculator_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
edNumber The edit used to show the number.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
actions Strings used to display the action messages.
 You can localize these strings if you wish.
 Its default value is 
\family typewriter
{"Clear","Ok","Cancel"}
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultTitle A static field that defines the default title for all calculator
 boxes, which is 
\family typewriter
Numeric Pad
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
optionalValue Defines an optional character to be used in the 
\family typewriter
CalculatorBox
\family default
.
 Replaces the decimal separator 
\family typewriter
/ 00
\family default
 character.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
maxLength The maximum length for the edit that will be created.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cOrig The control that had focus when the 
\family typewriter
CalculatorBox
\family default
 was popped up.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultValue The default value of the edit.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keepOriginalValue Set to 
\family typewriter
true
\family default
 to don't replace the original value in the 
\family typewriter
Edit
\family default
 if the user pressed Ok.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showNextButtonInsteadOfClear Set to 
\family typewriter
true
\family default
 to replace the 
\family typewriter
Clear
\family default
 button by the 
\family typewriter
Next
\family default
 button.
 This button is equivalent to the 
\family typewriter
Ok
\family default
 button, but it also changes the focus to the next field.
 The user can still clean the edit by clicking the backspace 
\family typewriter
<<
\family default
 button.
 The default behaviour calls 
\family typewriter
moveFocusToNextControl()
\family default
.
 You can change it by overriding the method 
\family typewriter
gotoNext()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
CalculatorBox() Constructs a 
\family typewriter
CalculatorBox
\family default
 with the 6 basic operations visible.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
CalculatorBox(boolean
\begin_inset space ~
\end_inset

showOperations) Constructs a 
\family typewriter
CalculatorBox
\family default
 with the 6 basic operations hidden if the parameter is 
\family typewriter
false
\family default
.
 In this case, it will become a numeric box.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear(boolean
\begin_inset space ~
\end_inset

requestFocusOnOper1) Clears everything in this calculator.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAnswer() Returns a string with the answer the user selected to be pasted
 (the result, the first operand, or 
\family typewriter
null
\family default
 if the user canceled).
\end_layout

\begin_layout Section
CalendarBox
\end_layout

\begin_layout Standard
Displays a calendar where a date can be chosen.
 It pops up with the current day as default and the user can scroll through
 months or years.
 It uses the 
\family typewriter
Date
\family default
 class for all operations.
 When a day is selected the calendar is closed and you may retrieve a 
\family typewriter
Date
\family default
 object representing the chosen date.
\end_layout

\begin_layout Standard
Instead of creating a new instance (which consumes memory), you may use
 the 
\family typewriter
Edit
\family default
's static field calendar.
\end_layout

\begin_layout Standard
If there is something in the edit box which poped up the calendar, the clear
 button will clear it.
 Cancel will leave whatever was in there.
 
\end_layout

\begin_layout Standard
The month can be changed via keyboard using the left/right keys, and the
 year can be changed using up/down keys.
 
\end_layout

\begin_layout Standard
Here is a sample from AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/calendar_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, one omitted default constructor,
 and methods (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
canceled 
\family typewriter
true
\family default
 if the user had canceled without selecting.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
weekNames The 7 week names painted in the control.
 It defaults to 
\family typewriter
{"S","M","T","W","T","F","S"}
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
todayClearCancel The labels for 
\family typewriter
Today
\family default
, 
\family typewriter
Clear
\family default
, and 
\family typewriter
Cancel
\family default
.
 It defaults to 
\family typewriter
{"Today","Clear","Cancel"}
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
yearMonth The labels between the arrows for year and month.
 It defaults to 
\family typewriter
{"year","month"}
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSelectedDate() Returns a 
\family typewriter
Date
\family default
 object representing the selected date, or 
\family typewriter
null
\family default
 if the calendar is canceled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSelectedDate(Date
\begin_inset space ~
\end_inset

d) Changes this calendar box current date by the given one.
 If the given date is 
\family typewriter
null
\family default
, the current date is set to today.
\end_layout

\begin_layout Standard
To correctly retrieve the selected date, you can handle the 
\family typewriter
ControlEvent.PRESSED
\family default
 event posted by the calendar, and call 
\family typewriter
getSelectedDate()
\family default
.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CalendarBox calendar = new CalendarBox();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	calendar.popup();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (event.type == ControlEvent.PRESSED && event.target == calendar)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		Date date = calendar.getSelectedDate();
\end_layout

\begin_layout Plain Layout

		String text = (date == null)? "No date selected" : date.toString();
\end_layout

\begin_layout Plain Layout

		new MessageBox("Selected Date", text).popup();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
ColorChooserBox
\end_layout

\begin_layout Standard
Shows a color dialog that can be used to select a color.
 There are several ways to choose a color: 
\end_layout

\begin_layout Itemize
Using a color matrix.
\end_layout

\begin_layout Itemize
Using a websafe palette.
 
\end_layout

\begin_layout Itemize
Writting the red, green, and blue components.
 
\end_layout

\begin_layout Itemize
Writting the color in hexdecimal.
 
\end_layout

\begin_layout Standard
Here's a sample code: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ColorChooserBox ccb = new ColorChooserBox(getBackColor());
\end_layout

\begin_layout Plain Layout

ccb.popup();
\end_layout

\begin_layout Plain Layout

if (ccb.choosenColor != -1) // user pressed cancel?
\end_layout

\begin_layout Plain Layout

	int color = ccb.choosenColor; // no, color was selected 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ColorChooserBox
\family default
 looks like the following images taken from UIGadgets using Android user
 interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorchoser_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorchoser_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attribute and constructor (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
choosenColor The chosen color or -1 if the user cancelled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ColorChooserBox(int
\begin_inset space ~
\end_inset

defaultColor) Constructs a 
\family typewriter
ColorChooserBox
\family default
 with a default color as the chosen color.
\end_layout

\begin_layout Section
ControlBox
\family typewriter
 
\end_layout

\begin_layout Standard
A popup window that displays any control given as parameter to the constructor
 To add more than one control, use a container.
 Here is a sample from Litebase AllTests:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/controlbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
yPosition Defines the 
\family typewriter
y
\family default
 position on screen where this window opens.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buttonKeys If you set the
\family typewriter
 buttonCaptions
\family default
 array in the construction, you can also set this public field to an 
\family typewriter
int
\family default
 array of the keys that maps to each of the buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,Control
\begin_inset space ~
\end_inset

cb) Constructs a 
\family typewriter
ControlBox
\family default
 with the given parameters, and an 
\family typewriter
Ok
\family default
 and a 
\family typewriter
Cancel
\family default
 buttons.
 The control may have at least one item, which will be used to determine
 the preferred size.
 The 
\family typewriter
text
\family default
 parameter is the text that will be displayed in a label above the control
 
\family typewriter
cb
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,Control
\begin_inset space ~
\end_inset

cb,String[]
\begin_inset space ~
\end_inset

buttonCaptions) Same as the above, plus a string array specifying the buttons
 captions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,Control
\begin_inset space ~
\end_inset

cb,int
\begin_inset space ~
\end_inset

prefW,int
\begin_inset space ~
\end_inset

prefH,String[]
\begin_inset space ~
\end_inset

buttonCaptions) Same as the above, plus the preferred height and width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ControlBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,Control
\begin_inset space ~
\end_inset

cb,int
\begin_inset space ~
\end_inset

prefW,int
\begin_inset space ~
\end_inset

prefH,String[]
\begin_inset space ~
\end_inset

buttonCaptions,int
\begin_inset space ~
\end_inset

buttonRows) Same as the above, plus the number of rows for the buttons.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onEvent(Event
\begin_inset space ~
\end_inset

e) Handles scroll buttons and normal buttons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPressedButtonIndex() Returns the pressed button index, starting from
 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getControl() Returns the control associated.
 
\end_layout

\begin_layout Section
FileChooserBox
\end_layout

\begin_layout Standard
A class that shows all folders from a startup one to allow the user select
 a file or a folder.
 The file tree is mounted 
\emph on
on demand
\emph default
 to speed up the process.
 
\end_layout

\begin_layout Standard
Here's a list of customizations you can do: 
\end_layout

\begin_layout Itemize
You can set a path to be selected initially by setting the 
\family typewriter
initialPath
\family default
 property.
 
\end_layout

\begin_layout Itemize
Set the 
\family typewriter
defaultButton
\family default
 property to allow the selection of an item doing a double-click on it.
 
\end_layout

\begin_layout Standard
Here's a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	FileChooserBox w = new FileChooserBox("Select the folder",new String[]{"
 This one "," Cancel "}, 
\end_layout

\begin_layout Plain Layout

		new FileChooserBox.Filter()
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			public boolean accept(File f) throws IOException
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				return f.isDir(); // will only list folders.
 you may filter by other file types too
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		});
\end_layout

\begin_layout Plain Layout

	w.mountTree(Settings.appPath,1);
\end_layout

\begin_layout Plain Layout

	w.popup();
\end_layout

\begin_layout Plain Layout

	return w.getPressedButtonIndex() == 0 ? w.getAnswer() : null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (IOException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Tree"

\end_inset

 from chapter 
\begin_inset Quotes eld
\end_inset

Some Advanced Controls
\begin_inset Quotes erd
\end_inset

 shows some images of its usage.
\end_layout

\begin_layout Standard
This class has the following public attributes, constructors and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultButtonCaptions The default button captions: 
\family typewriter
" Select "
\family default
 and 
\family typewriter
" Cancel "
\family default
.
 You can localize them if you want.
 Since this is a static field, it values for all 
\family typewriter
FileChooserBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
msgVolume The 
\family typewriter
"Volume: "
\family default
 label that's placed before the volume combo.
 You can localize it if you want.
 Since this is a static field, it values for all 
\family typewriter
FileChooserBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
msgRefresh The 
\family typewriter
" Refresh "
\family default
 button that's placed after the volume combo.
 You can localize it if you want.
 Since this is a static field, it values for all 
\family typewriter
FileChooserBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
msgInvalidVolumeTitle The title of a message box that appears if the user
 tries to access a volume and an error is issued by the operating system.
 Defaults to 
\family typewriter
"Error"
\family default
.
 You can localize it if you want.
 Since this is a static field, it values for all 
\family typewriter
FileChooserBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
msgInvalidVolumeMessage The body of a message box that appears if the user
 tries to access a volume and an error is issued by the operating system.
 Defaults to 
\family typewriter
"Unable to read the contents of the selected volume.
 Make sure the volume is mounted and you have
\begin_inset Newline newline
\end_inset

enough privileges to query its contents."
\family default
.
 You can localize it if you want.
 Since this is a static field, it values for all 
\family typewriter
FileChooserBox
\family default
es.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fileCount The number of files found in the current directory.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
multipleSelection Set to 
\family typewriter
true
\family default
 to allow multiple selections using a 
\family typewriter
Check
\family default
 drawn before the nodes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
initialPath Selects a file that is in the tree.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
defaultButton The button index that will be chosen if the user makes a double-cl
ick in an item.
 Usually you set this to the index of the 
\family typewriter
Ok
\family default
 button.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
FileChooserBox(FileChooserBox.Filter
\begin_inset space ~
\end_inset

ff) Constructs a file chooser with 
\family typewriter
"Select a file"
\family default
 as the window title, and 
\family typewriter
"Select"
\family default
 and 
\family typewriter
"Cancel"
\family default
 buttons.
 It receives the filter as parameter.
 Pass 
\family typewriter
null
\family default
 to accept all files.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
FileChooserBox(String
\begin_inset space ~
\end_inset

caption,String[]
\begin_inset space ~
\end_inset

buttonCaptions,FileChooserBox.Filter
\begin_inset space ~
\end_inset

ff) Constructs a file chooser with the given parameters, where caption is
 the caption to be displayed in the title and 
\family typewriter
buttonCaptions
\family default
 is the button captions that will be used in the 
\family typewriter
PushButtonGroup
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
mountTree(String
\begin_inset space ~
\end_inset

filePath,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

volume) Call this method to mount the tree, starting from the given path
 and volume.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPressedButtonIndex() Returns the button index used to close the window.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAnswer() Returns the path choosen by the user.
 If using the default captions and the cancel button was pressed, returns
 
\family typewriter
null
\family default
.
 The filename is returned with normal (
\family typewriter
/
\family default
) slashes; the path also ends with a slash.
 If 
\family typewriter
multipleSelections
\family default
 is on, a list of paths, separated by comma (
\family typewriter
,
\family default
) is returned.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTree() Returns the tree.
 
\end_layout

\begin_layout Standard
This class use a nested interface called 
\family typewriter
FileChooserBox.Filter
\family default
.
 This is necessary to indicate that a filter must have the method 
\family typewriter
accept(File f)
\family default
, which must return 
\family typewriter
true
\family default
 if the file is to be added to the tree.
 
\end_layout

\begin_layout Section
ProgressBox
\end_layout

\begin_layout Standard
This class implements a message box that shows a spinner at the left of
 the text.
 You can set the spinner color and type before constructing the progress
 box (usually you do this in your application's constructor, and not for
 each progress box created).
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ProgressBox pb = new ProgressBox("Message","Loading, please wait...",null);
\end_layout

\begin_layout Plain Layout

pb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

...
 lengthy task
\end_layout

\begin_layout Plain Layout

pb.unpop(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the AndroidUI sample, there is some examples using 
\family typewriter
ProgressBox
\family default
.
 The images order follow the buttons order to show the examples:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public constructors (excluding some fields
 from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

msg) Constructs a progress box with the text and one "Ok" button.
 The text may be separated by 
\family typewriter

\backslash
n
\family default
 as the line delimiters; otherwise, it is automatically splitted if its
 too big to fit on screen.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions) Same as above, plus the specified button captions.
 If 
\family typewriter
buttonCaptions
\family default
 is 
\family typewriter
null
\family default
, no buttons are displayed and you must dismiss the dialog by calling 
\family typewriter
unpop()
\family default
 or by setting the delay using the 
\family typewriter
setUnpopDelay()
\family default
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth) Same as above, plus the parameter 
\family typewriter
allSameWidth
\family default
, which is the same as in the constructor for 
\family typewriter
PushButtonGroup
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap) Same as the second one, plus the parameters 
\family typewriter
gap
\family default
 and 
\family typewriter
insideGap
\family default
, which are the same as in the constructor for 
\family typewriter
PushButtonGroup
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ProgressBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap) This is the most complete constructor with all the possible parameter
s.
 
\end_layout

\begin_layout Section
TimeBox
\family typewriter
 
\end_layout

\begin_layout Standard
Class used to input a time from the user.
 Correctly handles the AM/PM depending on 
\family typewriter

\begin_inset Newline newline
\end_inset

Settings.is24Hour
\family default
.
 
\end_layout

\begin_layout Standard
When the window closes, a 
\family typewriter
PRESSED
\family default
 event is sent to the caller, and the time can be retrieved using 
\family typewriter
getTime()
\family default
.
 
\end_layout

\begin_layout Standard
The time can be entered also using the arrow keys and by typing the numbers
 directly.
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TimeBox tb;
\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		(tb=new TimeBox()).popupNonBlocking();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		e.printStackTrace();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (e.type == ControlEvent.PRESSED && e.target == tb)
\end_layout

\begin_layout Plain Layout

		Vm.debug("ret: "+tb.getTime());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It looks like the following image taken from AndroidUI:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/timebox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
okCaption Used in the button.
 Change it if you want to localize the text.
 It defaults to 
\family typewriter
OK
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clearCaption Used in the button.
 Change it if you want to localize the text.
 It defaults to 
\family typewriter
Clear
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hideIfInvalid Set to 
\family typewriter
false
\family default
 to disable the buttons instead of hiding them if they are not a valid number
 to appear at the current position.
 By default, the buttons are hidden, but setting this to 
\family typewriter
false
\family default
 can disable them instead.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TimeBox() Constructs a 
\family typewriter
TimeBox
\family default
 with time set to midnight.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TimeBox(Time
\begin_inset space ~
\end_inset

time) Constructs a 
\family typewriter
TimeBox
\family default
 with the given time.
 If the time is invalid, it is set to midnight.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTime(Time
\begin_inset space ~
\end_inset

time) Sets the time if it was not set yet in the constructor.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTime() Returns the time placed in this control, which is the time passed
 in the constructor (if any) updated with the hours, minutes, and seconds.
 
\end_layout

\begin_layout Chapter
Image
\end_layout

\begin_layout Standard
Image is a rectangular image, which you can draw into or copy to a surface
 (using a 
\family typewriter
Graphics
\family default
 object).
 They are always 24 bpp, and TotalCross supports only the PNG and JPEG formats
 when running on the TCVM.
\end_layout

\begin_layout Standard
However, you may still use GIF and BMP files on your application, because
 these formats are also supported when running on Java, and the TotalCross
 deployer automatically converts those files to 24 bpp PNG files, which
 are then packaged with your application (along with any other required
 resources).
 The deployed PNG may contain transparency information which is correctly
 handled.
 
\end_layout

\begin_layout Standard

\family typewriter
Image
\family default
 objects cannot be directly added to the user interface because they are
 not controls (i.
 e.
 the 
\family typewriter
Image
\family default
 class does not extend the 
\family typewriter
Control
\family default
 class).
 To display an image on the user interface, you may either use the 
\family typewriter
Graphics
\family default
 object to draw the image on the screen, or use a control that better suits
 your needs, like 
\family typewriter
ImageControl
\family default
 or 
\family typewriter
Button
\family default
 (both described at the user interface section of this document).
\end_layout

\begin_layout Standard
Some transformation methods return a new instance of this image while others
 apply to the current instance.
 To preserve an image with a single frame, use 
\family typewriter
getFrameInstance(0)
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
TotalCross does not support grayscale PNG with alpha-channel.
 Convert the image to true-color with alpha-channel and it will work fine
 (the only backdraw is that the new image will be bigger).
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Image
\family default
 constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Image(int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height) Creates an 
\family typewriter
Image
\family default
 object with the given width and height.
 The new image has the same color depth and color map of the default drawing
 surface.
 Here is an example of use: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img = new Image(100,100);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

g.backColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

g.fillRect(25,25,50,50);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Graphics screenG = getGraphics();
\end_layout

\begin_layout Plain Layout

screenG.drawImage(img,CENTER,CENTER);  
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
Image(byte[]
\begin_inset space ~
\end_inset

fullDescription) Creates an 
\family typewriter
Image
\family default
 object from the given byte array, which must specify the whole image, including
 its headers.
 Use only JPEG or PNG images on the devices (GIF and BMP are supported on
 the desktop only).
 Here is a code example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// create the image and fill it with something
\end_layout

\begin_layout Plain Layout

Image img = new Image(160,160);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

for (int i =0; i < 16; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	g.backColor = Color.getRGB(10*i,10*i,10*i);
\end_layout

\begin_layout Plain Layout

	g.fillRect(i*10,0,10,160);
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\begin_layout Plain Layout

// save the bmp in a byte stream
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(4096);
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(bas);
\end_layout

\begin_layout Plain Layout

int totalBytesWritten = img.createBmp(ds);
\end_layout

\begin_layout Plain Layout

// parse the saved bmp
\end_layout

\begin_layout Plain Layout

Image im = new Image(bas.getBuffer()); // Caution! the buffer may be greater
 than totalBytesWritten, but when parsing theres no problem.
\end_layout

\begin_layout Plain Layout

if (im.getWidth() > 0) // successfully parsed?
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	getGraphics().drawImage(im,CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	Vm.sleep(2000);
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Caution: if reading a JPEG file, the original array contents will be changed!
 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
Image(String
\begin_inset space ~
\end_inset

path) Attempts to read the contents of the file specified by the given path,
 creating an 
\family typewriter
Image
\family default
 object from the bytes read.
 The path given is the path to the image file.
 The file must be in 2, 16, 256, 24 bpp color compressed (RLE) or uncompressed
 BMP bitmap format, a PNG file, a GIF file, or a JPEG file.
 If the image cannot be loaded, an 
\family typewriter
ImageException
\family default
 will be thrown.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Image(Stream
\begin_inset space ~
\end_inset

s) Attempts to read the contents of the given stream, and create an 
\family typewriter
Image
\family default
 object from the bytes read.
 Loads a BMP, JPEG, GIF, or PNG image from a stream.
 Note that GIF and BMP are supported only on the desktop.
 Note that all the bytes of the given stream will be fetched, even those
 bytes that may follow the image.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The usage of this last constructor with connection oriented streams (like
 socket) is not advised.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard

\family typewriter
Image
\family default
 public attributes (omitting the ones from its superclass):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
transparentColor Sets the transparent pixel of this image.
 Used in many controls.
 Note that you can set it to -1 to make the image use the background color.
 Note also that this value is not used by the system, but the controls (e.
 g.: 
\family typewriter
Button
\family default
) use the value stored here to set the background color when going to draw
 a transparent image.
 The value that will be 
\family typewriter
NO_TRANSPARENT_COLOR
\family default
 when image has no transparent color.
 It defaults to 
\family typewriter
Color.WHITE
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
comment A textual description stored in the PNG image.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useAlpha 
\family typewriter
true
\family default
 if this image has an alpha-channel for transparency (higher 8 bits).
 Important: if 
\family typewriter
useAlpha
\family default
 is 
\family typewriter
true
\family default
, 
\family typewriter
transparentColor
\family default
 must be set to -1, otherwise, many 
\family typewriter
Graphics
\family default
 methods will not work.
 Also, the only operation that works with alpha-channel is 
\family typewriter
Graphics.DRAW_PAINT
\family default
; all other drawing operations ignore the alpha channel.
 
\end_layout

\begin_layout Itemize
If you want to check if a specific file is supported by the platform at
 runtime, you may use the static method 
\family typewriter
Image.isSupported(String filename)
\family default
.
 PNG or JPEG are always supported.
 GIF and BMP are supported on JavaSE only.
 
\end_layout

\begin_layout Itemize
To retrieve the image dimensions, you may use the methods 
\family typewriter
getWidth()
\family default
 and
\family typewriter

\begin_inset Newline newline
\end_inset

getHeight()
\family default
.
 You can check if the image is ok by comparing these values with zero.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getGraphics()
\family default
 returns the 
\family typewriter
Graphics
\family default
 object used by this image, which provides several methods that may be used
 for drawing in this image.
\end_layout

\begin_layout Itemize
You may change all pixels of the same color by another color with the method
 
\family typewriter
changeColors (int from, int to)
\family default
.
 The current value of the transparent color is not changed.
 Using this routine, you can change the colors to any other you want.
 Note this replaces a single solid color by another solid color.
 If you want to change a gradient or colorize an image, use the 
\family typewriter
applyColor(int color)
\family default
 method instead, which applies the given color RGB values to all pixels
 of this image, preserving the transparent color and alpha channel, if set.
 
\end_layout

\begin_layout Standard
The deployer also convert animated GIFs into multi-frame PNGs – which are
 regular PNG files that contains all frames from the original GIF, along
 with the number of frames – to be packaged with the application's tclass
 file.
\end_layout

\begin_layout Standard
In this case, you may use the method 
\family typewriter
getFrameCount()
\family default
 to check if the loaded image contains more than one frame.
\end_layout

\begin_layout Standard
However, you may want to load an actual PNG or JPEG file created in multi-frame
 format to display an animation.
 In this case, the number of frames contained in the file will be unknown
 and 
\family typewriter
getFrameCount()
\family default
 will return 1.
\end_layout

\begin_layout Standard
To set the actual number of frames of the image, you must use the method
 
\family typewriter
setFrameCount (int n)
\family default
, which sets the total number of frames of the image by the given one, but
 only if the total image width (including all frames) is divisible by the
 given value.
\end_layout

\begin_layout Standard
The image's frame count cannot be changed if its value is already higher
 than 1.
 In this case, the 
\family typewriter
setFrameCount()
\family default
 method simply returns without doing anything.
\end_layout

\begin_layout Standard
The following methods should be used only on multi-framed images.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCurrentFrame() Returns the index of the current visible frame.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCurrentFrame(int
\begin_inset space ~
\end_inset

nr) Sets the given frame index as the current frame, moving its contents
 to the set of visible pixels.
 If the given index is negative, the last frame is set as the current frame;
 if it's higher than the number of frames, the first one is set instead.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nextFrame() Sets the next frame as the current one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
prevFrame() Sets the previous frame as the current one.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Both 
\family typewriter
nextFrame()
\family default
 and 
\family typewriter
prevFrame()
\family default
 treat the multi-framed image as a circular list, looping back to the first
 frame if moving forward from the last frame, or to the last frame if moving
 backwards from the first frame.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The 
\family typewriter
Image
\family default
 class also provides the methods that creates a new 
\family typewriter
Image
\family default
 object to be changed and returned, instead of changing the original instance:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getScaledInstance(int
\begin_inset space ~
\end_inset

newWidth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newHeight) Returns a scaled instance of this image.
 The arguments are the new dimensions for this image in pixels.
 The algorithm used is the replicate scale: not good quality, but fast.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scaledBy(double
\begin_inset space ~
\end_inset

scaleX,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

scaleY) Returns a scaled instance of this image.
 The new dimensions are calculated based on this image's dimensions and
 the given proportions.
 The algorithm used is the replicate scale: not good quality, but fast.
 The given values must be 
\family typewriter
> 0
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSmoothScaledInstance(int
\begin_inset space ~
\end_inset

newWidth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newHeight,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor) Returns a scaled instance of the image using the area averaging
 algorithm.
 Transparent pixels are replaced by 
\family typewriter
backColor
\family default
, which produces a smooth border.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.getSmoothScaledInstance(200,200, getBackColor());
\end_layout

\end_inset

On device and JavaSE it uses a Catmull-rom resampling, and on Blackberry
 it uses an area-average resampling.
 The reason is that the Catmull-rom consumes more memory and is also slower
 than the area-average, although the final result is much better.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
smoothScaledBy(double
\begin_inset space ~
\end_inset

scaleX,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

scaleY,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor) Returns a scaled instance of this image.
 The new dimensions are calculated based on this image's dimensions and
 the given proportions.
 The given values must be 
\family typewriter
> 0
\family default
.
 The transparent pixels are replaced by 
\family typewriter
backColor
\family default
, which produces a smooth border.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.smoothScaledBy(0.75,0.75, getBackColor()); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRotatedScaledInstance(int
\begin_inset space ~
\end_inset

scale,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

angle,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fillColor) Returns a rotated and/or scaled version of this image.
 A new 
\family typewriter
Image
\family default
 object is returned which will render the image at the specified scale ratio
 and rotation angle.
 After rotation, the empty parts of the rectangular area of the resulting
 image are filled with the fill color.
 If color is -1, then the fill color is the transparent color, or white
 if none.
 The new image will probably have a different size of the original image.
 In multi-framed images, each image is rotated/scaled independently.
 
\begin_inset Newline newline
\end_inset


\family typewriter
scale
\family default
 is a number greater than or equal to 0 stating the percentage of scaling
 to be performed.
 100 is not scaling, 200 doubles the size, 50 shrinks the image by 2.
 
\family typewriter
angle
\family default
 is the rotation angle, expressed in trigonometric degrees and 
\family typewriter
fillColor
\family default
 is the fill color (-1 indicates the transparent color of this image or
 
\family typewriter
Color.WHITE
\family default
 if the 
\family typewriter
transparentColor
\family default
 was not set).
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Do not use this method for scaling only, because the scaling methods are
 faster.
 If you need a smooth scale and rotate, scale it first with 
\family typewriter
smoothScaledBy()
\family default
 or 
\family typewriter
getSmoothScaledInstance()
\family default
 and rotate it without scaling (or vice-versa).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
getTouchedUpInstance(byte
\begin_inset space ~
\end_inset

brightness,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

contrast) Returns a touched-up instance of this image with the specified
 brightness and contrast.
\family typewriter

\begin_inset Newline newline
\end_inset

brightness
\family default
 is a number between -128 and 127 stating the desired level of brightness.
 127 is the highest brightness level (white image), while -128 is no brightness
 (darkest image).
 
\family typewriter
contrast
\family default
 is a number between -128 and 127 stating the desired level of contrast.
 127 is the highest contrast level, while -128 is no contrast.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The methods 
\family typewriter
getSmoothScaledInstance()
\family default
 and 
\family typewriter
smoothScaleBy()
\family default
 uses the area averaging algorithm instead of the replication algorithm
 used by 
\family typewriter
scaleBy()
\family default
 and 
\family typewriter
getScaledInstance()
\family default
.
 Although slower, the area averaging algorithm provides better results.
 You may now create only 320x320 images for your application, and smoothly
 resizes it to the target resolution, instead of providing one image per
 resolution.
\end_layout

\begin_layout Plain Layout
Images with anti-aliased borders produce better results because of the extra
 argument for the background color.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
smoothScaledFixedAspectRatio(int
\begin_inset space ~
\end_inset

newSize,boolean
\begin_inset space ~
\end_inset

isHeight,int
\begin_inset space ~
\end_inset

backColor) Returns the scaled instance using fixed aspect ratio for this
 image, given the scale arguments.
 The given values must be 
\family typewriter
> 0
\family default
.
 This method is useful to resize an image, specifying only one of its sides:
 the width or the height.
 The other side is computed to keep the aspect ratio.
 
\family typewriter
newSize
\family default
 is the new size (width or height) for the image, if 
\family typewriter
isHeight
\family default
 is 
\family typewriter
true
\family default
, 
\family typewriter
newSize
\family default
 is considered as the new height of the image; if 
\family typewriter
false
\family default
, 
\family typewriter
newSize
\family default
 is considered the new width of the image, and 
\family typewriter
backColor
\family default
 is the background color to be used as transparent pixel (for PNG images
 with alpha-channel, use -1).
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.smoothScaledFixed(fmH, true, -1); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFadedInstance(int
\begin_inset space ~
\end_inset

backColor) Creates a faded instance of the image, interpolating all pixels
 with the given background color.
 The pixels that match the transparent color will not be changed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFrameInstance(int
\begin_inset space ~
\end_inset

frame) In a multi-framed image, returns a copy of the given frame.
 In a single-framed image, gets a copy of the image.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
smoothScaledFromResolution(int
\begin_inset space ~
\end_inset

originalRes,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor) Returns a smooth scaled instance of this image with a fixed aspect
 ratio based on the given resolution (which is the resolution that you used
 to MAKE the image).
 The target size is computed as 
\family typewriter
image_size*min(screen_size)/original_resolution
\family default
.
 
\family typewriter
originalRes
\family default
 is the original resolution that the image was developed for (it's a good
 idea to create images for 320x320 and then scale them down) and 
\family typewriter
backColor
\family default
 is the background color.
 
\end_layout

\begin_layout Standard
And finally, to save your 
\family typewriter
Image
\family default
 object, you may use one of the methods below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
createPng(Stream
\begin_inset space ~
\end_inset

s) Attempts to write this image as a 24 bpp PNG file on the given stream
 (if 
\family typewriter
useAlpha
\family default
 is 
\family typewriter
true
\family default
, it saves as 32 bpp).
 If you're sending the PNG through a stream but not saving it to a 
\family typewriter
PDBFile
\family default
, you can use this method.
 If you're going to save it to a 
\family typewriter
PDBFile
\family default
, then you must use the 
\family typewriter
saveTo()
\family default
 method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
saveTo(PDBFile
\begin_inset space ~
\end_inset

cat,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

name) Writes this image as a 24 bpp PNG file on the currently selected record
 of the given 
\family typewriter
PDBFile
\family default
, using the given name.
 
\end_layout

\begin_deeper
\begin_layout Itemize
The stored image size is limited to near 64 Kb.
 Note that a stored image size has no relation to its size in pixels.
 For example, a 1300x1200 completely-white PNG file takes 7 Kb of storage
 size but 6 MB of RAM when loaded.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
PDBFile
\family default
 can save multiple images, but the record must be prefixed with the image's
 name and must be sorted.
 
\end_layout

\begin_layout Itemize
This method finds the exact place where to insert the PNG and puts it there.
 
\end_layout

\begin_layout Itemize
If you want to create a PNG to be transfered by a stream to serial or socket
 then you must use the method 
\family typewriter
createPng()
\family default
 instead.
 
\end_layout

\begin_layout Itemize
If a record with this name already exists, it will be replaced.
 
\end_layout

\begin_layout Itemize
The name is always converted to lowercase and the method makes sure that
 PNG is appended to it.
 
\end_layout

\begin_layout Itemize
To get the list of images in a PDBFile, just do a 
\family typewriter
readString()
\family default
 at the beginning of each record.
 
\end_layout

\begin_layout Itemize
To retrieve the image, use the 
\family typewriter
loadFrom(PDBFile cat, String name)
\family default
 method.
\end_layout

\begin_layout Standard
Here is a sample code: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// create the image and paint over it
\end_layout

\begin_layout Plain Layout

Image img = new Image(100,100);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

g.backColor = Color.getRGB(100,150,200);
\end_layout

\begin_layout Plain Layout

g.fillRect(25,25,50,50);
\end_layout

\begin_layout Plain Layout

g.foreColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

g.drawCircle(50,50,20);  // create the PDBFile to save the image.
 You must change CRTR to match your apps creator ID
\end_layout

\begin_layout Plain Layout

String pdbName = "images.CRTR.TYPE";
\end_layout

\begin_layout Plain Layout

PDBFile pdb = new PDBFile(pdbName, PDBFile.CREATE);
\end_layout

\begin_layout Plain Layout

img.saveTo(pdb, "boxcircle.png");
\end_layout

\begin_layout Plain Layout

pdb.close();  // load the previously created image
\end_layout

\begin_layout Plain Layout

PDBFile pdb = new PDBFile(pdbName, PDBFile.READ_WRITE);
\end_layout

\begin_layout Plain Layout

add(new ImageControl(Image.loadFrom(pdb,"boxcircle.png")),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

pdb.close();  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's a code that lists the images in a PDB (saved using this method).
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static String[] list(PDBFile cat) throws IOException  
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DataStream ds = new DataStream(cat);
\end_layout

\begin_layout Plain Layout

	int n = cat.getRecordCount();
\end_layout

\begin_layout Plain Layout

	String[] names = new String[n];
\end_layout

\begin_layout Plain Layout

	for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		cat.setRecordPos(i);
\end_layout

\begin_layout Plain Layout

		names[i] = ds.readString();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return names;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Some other 
\family typewriter
Image
\family default
 public methods (omitting the ones from its superclass):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPixels() Used only on the desktop to get the image's pixels; NOT AVAILABLE
 on the device (it will throw a 
\family typewriter
NoSuchMethodError
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getX(),
\begin_inset space ~
\end_inset

getY() Returns 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

o) Returns 
\family typewriter
true
\family default
 if the given 
\family typewriter
Image
\family default
 object has the same size and RGB pixels of the original one.
 The alpha-channel is ignored.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
applyColor2(int
\begin_inset space ~
\end_inset

color) Applies the given color RGB values to all pixels of this image, preservin
g the transparent color and alpha channel, if set.
 This method is used to colorize the Android buttons.
\end_layout

\begin_layout Standard
Here's an example of how to create buttons for several resolutions based
 on a 320x320 images: (adapted from UIGadgets sample)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	setTitle("ImageButton resolution scale");
\end_layout

\begin_layout Plain Layout

	String[] imageNames = {"clear.gif", "go.gif"};
\end_layout

\begin_layout Plain Layout

	int imgRes = 320;
\end_layout

\begin_layout Plain Layout

	int targetRes[] = {160, 176, 240, 320};
\end_layout

\begin_layout Plain Layout

	int backColor = getBackColor();
\end_layout

\begin_layout Plain Layout

	int coordX = LEFT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		for (int i = imageNames.length - 1; i >= 0; i--)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Image img = new Image(imageNames[i]);
\end_layout

\begin_layout Plain Layout

			int imgWidth = img.getWidth();
\end_layout

\begin_layout Plain Layout

			int coordY = TOP;
\end_layout

\begin_layout Plain Layout

			for (int j = targetRes.length - 1; j >= 0; j--)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				double factor = (double) targetRes[j] / (double) imgRes;
\end_layout

\begin_layout Plain Layout

				Image img2 = img.smoothScaledBy(factor, factor, backColor);
\end_layout

\begin_layout Plain Layout

				Button btn = new Button(img2);
\end_layout

\begin_layout Plain Layout

				btn.setBorder(Button.BORDER_NONE);
\end_layout

\begin_layout Plain Layout

				add(btn, coordX, coordY);
\end_layout

\begin_layout Plain Layout

				coordY += img2.getHeight() + 5;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			coordX += imgWidth + 5;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example with an animated GIF: (adapted from GifAnimatedTest sample)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		img = new Image("alligator.gif");
\end_layout

\begin_layout Plain Layout

		imgCtrl = new ImageControl(img);
\end_layout

\begin_layout Plain Layout

		add(imgCtrl, CENTER, CENTER);
\end_layout

\begin_layout Plain Layout

		addTimer(200);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (event.type == TimerEvent.TRIGGERED)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		img.nextFrame();
\end_layout

\begin_layout Plain Layout

		imgCtrl.repaintNow();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Note that it will work in the same way on desktop or on device.
 
\end_layout

\begin_layout Chapter
Camera
\end_layout

\begin_layout Standard
This class is used to enable the camera of the underlying device.
 The following platforms are supported: Windows Mobile, Blackberry, Palm
 OS, Android, and iOS.
 It is not possible to use the webcam on PC platforms (JavaSE, Windows 2000,
 XP, Vista, Seven and Linux).
 
\end_layout

\begin_layout Standard
For more information about the possible parameters on Windows Mobile devices,
 see:
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://msdn2.microsoft.com/en-us/library/bb431794.aspx"
target "http://msdn2.microsoft.com/en-us/library/bb431794.aspx"

\end_inset

.
 Note that you can easily rotate the image to put it in portrait mode, using
 the 
\family typewriter
Image.getRotatedScaledInstance()
\family default
 method, after retrieving the image.
 To use this class with the Hand Held Dolphin barcode scanners, you must
 install 
\family typewriter
TotalCrossSDK/dist/vm/wince/POCKETPC/ARM/Dolphin.dll
\family default
.
 Only 640x480 photos are supported, and you may change the following options:
 
\family typewriter
initialDir, defaultFileName
\family default
 (must end with 
\family typewriter
.jpg
\family default
), and 
\family typewriter
resolutionWidth
\family default
 x 
\family typewriter
resolutionHeight
\family default
 (possible values are 640x480 and 212x160; different values defaults to
 640x480) .
 All other options are ignored.
 
\end_layout

\begin_layout Standard
On Android you can set the 
\family typewriter
defaultFileName
\family default
, 
\family typewriter
stillQuality
\family default
, 
\family typewriter
resolutionWidth
\family default
 and 
\family typewriter
resolutionHeight
\family default
.
 All other options are ignored.
 You can call the
\begin_inset Newline newline
\end_inset


\family typewriter
getSupportedResolutions()
\family default
 method to see the resolutions that are available on the device.
 
\end_layout

\begin_layout Standard
On iOS there's no way to return the supported resolutions; it will take
 a photo using the default camera's resolution, and then will resize to
 the resolution defined in 
\family typewriter
resolutionWidth
\family default
 x 
\family typewriter
resolutionHeight
\family default
, keeping the camera's aspect ratio.
 On iOS you can specify the
\family typewriter

\begin_inset Newline newline
\end_inset

defaultFileName
\family default
 with a path or just the name, or use a system-generated name.
\end_layout

\begin_layout Standard
This class only has de default constructor.
 The other interesting fields are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
title The title to display in the window opened for the camera.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stillQuality Defines the quality of the image.
 It can be equal to
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_DEFAULT
\family default
 (default quality),
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_LOW
\family default
 (low quality),
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_NORMAL
\family default
 (normal quality), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_HIGH
\family default
 (high quality).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
videoType Can be one of 
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_VIDEOTYPE_ALL
\family default
 (produces video clips that match video profiles, using just the video resolutio
n for the match criteria, the default value)
\family typewriter

\begin_inset Newline newline
\end_inset

CAMERACAPTURE_VIDEOTYPE_STANDARD
\family default
 (0roduces high-quality video clips used for home movies and e-mail video
 messaging, using a video encoder such as the Windows Media encoder), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_VIDEOTYPE_MESSAGING
\family default
 (Produces video clips used for Multimedia Messaging Service (MMS) video
 messaging, which require a video encoder that conforms to the 3rd Generation
 Partnership Project (3GPP) specification on
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://go.microsoft.com/fwlink/?LinkId=32710"
target "http://go.microsoft.com/fwlink/?LinkId=32710"

\end_inset

).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
videoTimeLimit Maximum time limit for recording a video.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
captureMode Can be one of
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_STILL
\family default
 (only picture, the default value), 
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_VIDEOONLY
\family default
 (no sound), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_VIDEOWITHAUDIO
\family default
 (video and sound).
\end_layout

\begin_layout Standard
The class 
\family typewriter
Camera
\family default
 only has one method:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
click() Takes a photo or records a video based on the members set.
 It returns a string with the file name where the image or video is located
 or 
\family typewriter
null
\family default
 if the user canceled.
 
\end_layout

\begin_layout Part
UTILITY CLASSES
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
This section covers utility classes to deal with date and time, random number
 generation, data structures, logging and conversions.
\end_layout

\begin_layout Chapter
totalcross.util
\end_layout

\begin_layout Section
Date
\end_layout

\begin_layout Standard
The 
\family typewriter
Date
\family default
 class is a general date data type implementation of the Gregorian Calendar,
 and supports dates from January 1
\begin_inset script superscript

\begin_layout Plain Layout
st
\end_layout

\end_inset

, 1000 to December 31
\begin_inset script superscript

\begin_layout Plain Layout
th
\end_layout

\end_inset

, 2999.
 It checks to make sure that the dates that are instanciated or changed
 exist and if they don't an exception (
\family typewriter
InvalidDateException
\family default
) is thrown.
 It provides methods to advance the date backwards and forwards by increments
 of day, week, and month.
 It provides comparisons 
\family typewriter
=
\family default
,
\family typewriter
>
\family default
,
\family typewriter
<
\family default
.
 It also provides constants and methods for date manipulation and comparison.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Months
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.JANUARY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.FEBRUARY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.MARCH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.APRIL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.MAY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.JUNE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.JULY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.AUGUST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.SEPTEMBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.OCTOBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.NOVEMBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date.DECEMBER
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Date
\family default
 has six constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date()
\family default
 Creates a 
\family typewriter
Date
\family default
 object set with today's date.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date(int
\begin_inset space ~
\end_inset

sentDate)
\family default
 Creates a 
\family typewriter
Date
\family default
 object using the given value, which must be in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date(int
\begin_inset space ~
\end_inset

sentDay,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sentMonth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sentYear)
\family default
 Creates a 
\family typewriter
Date
\family default
 object using the given values, where 
\family typewriter
sentDay
\family default
 must be an integer between 1 and the last day in the month, 
\family typewriter
sentMonth
\family default
 must be an integer between 1 and 12, and 
\family typewriter
sentYear
\family default
 must be an integer between 1000 and 2999.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date(String
\begin_inset space ~
\end_inset

strDate) 
\family default
Creates a 
\family typewriter
Date
\family default
 object with the given 
\family typewriter
strDate
\family default
, which must be a valid date in the current device date format (See 
\family typewriter
Settings.dateFormat
\family default
).
 The date separator can be any non-number character; the constructor auto-detect
s what character is being used as separator.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date(String
\begin_inset space ~
\end_inset

strDate,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat) 
\family default
Creates a 
\family typewriter
Date
\family default
 object with the given 
\family typewriter
strDate
\family default
, which must be a valid date in the given 
\family typewriter
dateFormat
\family default
.
 The argument 
\family typewriter
dateFormat
\family default
 must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants, where
\family typewriter
 DATE_MDY
\family default
 stands for month, day, and year format, 
\family typewriter
DATE_DMY
\family default
 stands for day, year, and month format, and 
\family typewriter
DATE_YMD
\family default
 stands for year, month, and day format.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
Date(Time
\begin_inset space ~
\end_inset

t) 
\family default
Creates a 
\family typewriter
Date
\family default
 object using the given 
\family typewriter
Time
\family default
 object (See section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Time"

\end_inset

).
\end_layout

\begin_layout Standard
Except for the default constructor, all 
\family typewriter
Date
\family default
 constructors may throw the checked exception 
\family typewriter
InvalidDateException
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Date
\family default
 objects can be manipulated in a simple way with the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
advance(int
\begin_inset space ~
\end_inset

numberDays) Advances (or regresses if 
\family typewriter
numberDays
\family default
 is negative) the date by the given value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
advanceMonth() Advances the date to the beginning of the next month.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
advanceMonth(boolean
\begin_inset space ~
\end_inset

direction) Changes the date to the beginning of the next or previous month.
 The static variables 
\family typewriter
Date.FORWARD
\family default
 or 
\family typewriter
Date.BACKWARD
\family default
 instructs the method to either move to the next or previous month.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
advanceWeek() Advances the date to the beginning of the next week.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
advanceWeek(boolean
\begin_inset space ~
\end_inset

direction) Changes the date to the beginning of the next or previous week.
 The static variables 
\family typewriter
Date.FORWARD
\family default
 or 
\family typewriter
Date.BACKWARD
\family default
 instructs the method to either move to the next or previous week.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setToday() Sets this 
\family typewriter
Date
\family default
 object to the current day.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
set(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year) Sets the date fields to the given ones and returns an integer in the
 format 
\family typewriter
YYYYMMDD
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
set(String
\begin_inset space ~
\end_inset

strDate,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat) Sets the date fields by parsing the given string, and using
 the given 
\family typewriter
dateFormat
\family default
.
 If you want to use the default date format, use 
\family typewriter
Settings.dateFormat
\family default
.
 Trailing spaces are skipped.
 It returns an integer in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Date
\family default
 objects can be easily compared using the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
isAfter(Date
\begin_inset space ~
\end_inset

sentDate) Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 is after this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isBefore(Date
\begin_inset space ~
\end_inset

sentDate) Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 is before this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

sentDate) Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 represents the same 
\family typewriter
Date
\family default
 as this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
compareTo(Object
\begin_inset space ~
\end_inset

other) Implementation of the 
\family typewriter
Comparable
\family default
 interface.
 Return is 
\family typewriter
> 0
\family default
 if this object is greater than the other one, 
\family typewriter
< 0
\family default
 if its smaller, and 0 if they are equal.
\end_layout

\begin_layout Standard
You can get the difference in days between two dates using the method 
\family typewriter
subtract(Date other)
\family default
 (
\family typewriter
other – this
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never use 
\family typewriter
subtract()
\family default
 to compare dates.
 Using 
\family typewriter
subtract()
\family default
 to compare dates can be 15 times slower than using one of the above methods,
 like 
\family typewriter
compareTo()
\family default
.
 Use 
\family typewriter
subtract()
\family default
 only when you need to know the exact difference between two dates.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The following methods can be used to retrieve information about the set
 date:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getDay() Returns the day.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMonth() Returns the month.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getYear() Returns the year.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDayOfWeek() Returns the day of week, where 0 is Sunday and 6 is Saturday.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getWeek() Calculates and returns the ordinal value of the week (1-52).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDateInt() Returns an integer representing the date in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDaysInMonth() Returns the number of days the set month has.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDaysInMonth(int
\begin_inset space ~
\end_inset

month) Returns the number of days in the given month of the set year.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDaysInMonth(int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year) Static method which returns the number of days in the passed month
 and year.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMonthName(int
\begin_inset space ~
\end_inset

m) Returns the string representation of the month passed, that is 
\family typewriter
monthNames[m]
\family default
 if 
\family typewriter
Date.
 JANUARY <= m
\family default
 and 
\family typewriter
m <= Date.DECEMBER
\family default
.
 It returns an empty string if 
\family typewriter
m
\family default
 is out of the valid bounds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getGregorianDay() Returns the number of days since the January 1
\begin_inset script superscript

\begin_layout Plain Layout
st
\end_layout

\end_inset

 of the epoch year 1000.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isLeapYear(int
\begin_inset space ~
\end_inset

year) Checks if the year is a leap year.
 
\end_layout

\end_deeper
\begin_layout Itemize
You can also retrieve the date as a string:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
formatDayMonth() Returns a zero padded string representation of the day
 and month, using the current device settings (see 
\family typewriter
Settings.dateFormat
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year) Formats the date specified with the 
\family typewriter
Settings.dateFormat
\family default
, zero padded.
 The date separator used is 
\family typewriter
Settings.dateSeparator
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

separator) Formats the date specified with 
\family typewriter
Settings.dateFormat
\family default
, zero padded, and using the given separator.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat) Formats the date specified with the 
\family typewriter
dateFormat
\family default
 parameter, zero padded.
 The date separator used is 
\family typewriter
Settings.dateSeparator
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,int
\begin_inset space ~
\end_inset

month,int
\begin_inset space ~
\end_inset

year,byte
\begin_inset space ~
\end_inset

dateFormat,String
\begin_inset space ~
\end_inset

dateSeparator) Formats the date specified with the 
\family typewriter
dateFormat
\family default
 parameter, zero padded, and using the given separator.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the date using the current
 device settings (see 
\family typewriter
Settings.
 dateFormat
\family default
).
 The date separator used is 
\family typewriter
Settings.dateSeparator
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(byte
\begin_inset space ~
\end_inset

format) Returns a string representation of the date using the given format,
 which must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants.
 The date separator used is 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

dateSeparator
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(byte
\begin_inset space ~
\end_inset

dateFormat,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

separator) Returns the date in a string format and using the given format
 and separator.
 
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
Date
\family default
 class provides a few static utility methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getMonthName(int
\begin_inset space ~
\end_inset

m) Returns the string representation of the given month.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDaysInMonth(int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year) Returns the number of days the given month and year.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year) Returns the string representation of the given date (zero padded)
 using the current device settings (See 
\family typewriter
Settings.dateFormat
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat) Returns the string representation of the given date (zero padded)
 using the specified date format, which must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants.
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
Date
\family default
 class has the field 
\family typewriter
monthNames
\family default
, which is the month names used in some routines.
 You can localize it if you wish.
 Its default value is: 
\family typewriter
{"", "January", "February", "March", "April", "May", "June", "July", "August",
 "September",
\begin_inset Newline newline
\end_inset

"October", "November", "December"}
\family default
.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Date PaulBorn = null;
\end_layout

\begin_layout Plain Layout

Date DavidBorn = null;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PaulBorn = new Date(23, 12, 1960);
\end_layout

\begin_layout Plain Layout

	DavidBorn = new Date(20, 7, 1978);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (InvalidDateException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

new MessageBox("Paul was born in " + Date.getMonthName(PaulBorn.getMonth())).popup(
);
\end_layout

\begin_layout Plain Layout

if (PaulBorn.isAfter(DavidBorn))
\end_layout

\begin_layout Plain Layout

	new MessageBox("David is older than Paul").popup();
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	new MessageBox("Paul is older than David").popup();
\end_layout

\begin_layout Plain Layout

PaulBorn.setToday(); // Now Paul has just been born.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vector
\end_layout

\begin_layout Standard
The 
\family typewriter
Vector
\family default
 class implements a growable array of objects.
 Like an array, it contains components that can be accessed using an integer
 index.
 However, the size of a 
\family typewriter
Vector
\family default
 can dynamically grow as needed, but it never shrinks.
 If the array never needs to be increased, an array should be used.
\end_layout

\begin_layout Standard
In Java you cannot directly access the 
\family typewriter
Vector
\family default
's internal array, you must use its methods to 
\family typewriter
insert()
\family default
, 
\family typewriter
remove()
\family default
, 
\family typewriter
retrieve()
\family default
, or 
\family typewriter
replace()
\family default
 elements in a 
\family typewriter
Vector
\family default
.
 This way the programmer cannot accidentally (or intentionally) corrupt
 the object's internal state.
\end_layout

\begin_layout Standard
Unfortunately this makes 
\family typewriter
Vector
\family default
 iteration a very costly operation, because each iteration requires at least
 one method call.
\end_layout

\begin_layout Standard
To avoid this performance issue, TotalCross' 
\family typewriter
Vector
\family default
 implementation allows public access to its internal array (
\family typewriter
items
\family default
).
 However, to guarantee the Vector's integrity
\emph on
 you must only access it to retrieve (get) or replace (set) elements, and
 never to insert, remove, or resize the buffer
\emph default
.
\end_layout

\begin_layout Standard
You may also use a 
\family typewriter
Vector
\family default
 as a stack, whose feature is better explained below.
\end_layout

\begin_layout Standard
Here is an example showing a vector being used: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Vector vec = new Vector();
\end_layout

\begin_layout Plain Layout

vec.addElement(obj1);
\end_layout

\begin_layout Plain Layout

vec.addElement(obj2);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

vec.insertElementAt(obj3, 3);
\end_layout

\begin_layout Plain Layout

vec.removeElementAt(2);
\end_layout

\begin_layout Plain Layout

if (vec.size() > 5)
\end_layout

\begin_layout Plain Layout

   ...
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Vector
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Vector() Default constructor, which creates a 
\family typewriter
Vector
\family default
 with the default size 8.
 This constructor should be avoided.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Vector(int
\begin_inset space ~
\end_inset

size) Creates a 
\family typewriter
Vector
\family default
 with the given size, which is the initial size of the vector's internal
 object array and cannot be negative (the minimum size is 0).
 The vector will grow as needed when objects are added.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Vector(Object[]
\begin_inset space ~
\end_inset

startingWith) Creates a 
\family typewriter
Vector
\family default
, assigning the given array as the internal buffer and its size as the 
\family typewriter
Vector
\family default
 size.
 Note that the given array must not have 
\family typewriter
null
\family default
 elements.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice this constructor uses the given array as internal buffer,
 not a copy.
 So you should not use this array after initializing the 
\family typewriter
Vector
\family default
 with it.
 If you want to initialize the 
\family typewriter
Vector
\family default
 with a copy of the array, use 
\family typewriter
Vm.arrayCopy()
\family default
, or for string arrays, 
\family typewriter
Convert.cloneStringArray()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To add an element to a vector, you may use:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
addElement(Object
\begin_inset space ~
\end_inset

obj) Adds a reference to the given object to the end of the 
\family typewriter
Vector
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addElements(Object[]
\begin_inset space ~
\end_inset

objects) Adds an array of objects at the end of the vector.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addElementsNotNull(Object[]
\begin_inset space ~
\end_inset

objects) Adds an array of objects at the end of the vector (
\family typewriter
null
\family default
 objects are skipped).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insertElementAt(Object
\begin_inset space ~
\end_inset

obj,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index) Inserts a reference to the given object at the specified index of
 this 
\family typewriter
Vector
\family default
, shifting elements with index greater or equal to the specified index to
 have an index one greater than it had previously.
 If 
\family typewriter
index
\family default
 is less than 0 or above the number of elements, the object is inserted
 at the end.
 
\end_layout

\end_deeper
\begin_layout Itemize
And to remove:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
removeElement(Object
\begin_inset space ~
\end_inset

obj) Removes the reference of the given object from this 
\family typewriter
Vector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeElementAt(int
\begin_inset space ~
\end_inset

index) Removes the reference to the object at the given index of this 
\family typewriter
Vector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAllElements() Removes all elements from this 
\family typewriter
Vector
\family default
, reseting its length to 0.
 Note that this method sets all items in this vector to 
\family typewriter
null
\family default
, so, if you had directly assigned an array to this vector, all items inside
 it will be nulled.
 
\end_layout

\end_deeper
\begin_layout Itemize
To find the index of a 
\family typewriter
Vector
\family default
's element:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
indexOf(Object
\begin_inset space ~
\end_inset

obj,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startIndex) Returns the index of the given object, or -1 if the object is
 not found.
 The array is searched using an 
\family typewriter
O(n)
\family default
 linear search, starting at the given start index, until the object is found
 or the end of the array is reached.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
indexOf(Object
\begin_inset space ~
\end_inset

obj) Like the above, but always start the search at the first position (index
 0).
 In fact its implementation consists of a single method call: 
\family typewriter
indexOf(obj, 0)
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Vector
\family default
 also provides the following handy methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
isEmpty() Returns 
\family typewriter
true
\family default
 if the 
\family typewriter
Vector
\family default
 is empty.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of elements in the 
\family typewriter
Vector
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSize(int
\begin_inset space ~
\end_inset

newSize) Sets the size of the 
\family typewriter
Vector
\family default
.
 If the new size is greater than the current size, new 
\family typewriter
null
\family default
 items are added to the end of the 
\family typewriter
Vector
\family default
.
 If the new size is less than the current size, all components at index
 
\family typewriter
newSize
\family default
 and greater are discarded (set to 
\family typewriter
null
\family default
).
 The new size can't be negative.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort() Sorts the elements of the 
\family typewriter
Vector
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If the elements are strings, the sort will be faster because a cast to 
\family typewriter
String
\family default
 will be done.
 Otherwise, it will use the method 
\family typewriter
toString()
\family default
 to get a 
\family typewriter
String
\family default
 representation of the object to use on the sort.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
toObjectArray() Returns an array of objects containing all elements of the
 
\family typewriter
Vector
\family default
, or 
\family typewriter
null
\family default
 if the 
\family typewriter
Vector
\family default
 is empty.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If the first element of the 
\family typewriter
Vector
\family default
 is a string, it will assume all elements are of the same type and create
 a 
\family typewriter
String
\family default
 array instead of an 
\family typewriter
Object
\family default
 array.
 In this case, you may safely cast the return from 
\family typewriter
Object[]
\family default
 to 
\family typewriter
String[]
\family default
.
 This is only valid for strings.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
dump() Dumps the contents of the 
\family typewriter
Vector
\family default
, returning a string representation of it.
 If the number of elements is big, it can take a lot of memory! 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns the items of the vector separated by comma in a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(String
\begin_inset space ~
\end_inset

separator) Returns the items of the vector separated by the given string
 
\family typewriter
separator
\family default
 in a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
copyInto(Object[]
\begin_inset space ~
\end_inset

out) Copies the items of the vector into the given array, which must have
 at least the current size of the vector.
 If the output vector is greater than the current size, the remaining positions
 will remain unchanged.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
contains(Object
\begin_inset space ~
\end_inset

o) Returns 
\family typewriter
true
\family default
 if the vector contains the specified element.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reverse() Reverses the order of the elements in the vector.
 In a vector with 
\family typewriter
n
\family default
 elements, the element of index 0 is moved to the index 
\family typewriter
n-1
\family default
, the element of index 1 is moved to the index 
\family typewriter
n-2
\family default
, and so on.
 
\end_layout

\end_deeper
\begin_layout Itemize
To use a 
\family typewriter
Vector
\family default
 as a stack, you may use the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
push(Object
\begin_inset space ~
\end_inset

obj) Pushes an item onto the top of the stack.
 It actually just calls the method 
\family typewriter
addElement()
\family default
 passing the given object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pop() Removes the object at the top of the stack, returning that object.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pop(int
\begin_inset space ~
\end_inset

n) Pops 
\family typewriter
n
\family default
 last elements from the stack.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
peek() Returns the object at the top of the stack without removing it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
peek(int
\begin_inset space ~
\end_inset

n) Returns the 
\family typewriter
n
\family default
-last object, without removing it.
 Note that 
\family typewriter
peek(0)
\family default
 is the same of 
\family typewriter
peek()
\family default
.
 
\family typewriter
n
\family default
 is how many elements to get from the top and must be a positive number.
\end_layout

\end_deeper
\begin_layout Standard
Although 
\family typewriter
Vector
\family default
 can grow to accommodate more elements, this is a costly operation that
 should be avoided.
 Keep in mind the following when using 
\family typewriter
Vector
\family default
s:
\end_layout

\begin_layout Itemize
If you can estimate the number of elements, you can create the 
\family typewriter
Vector
\family default
 object with enough room for them:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// we expect at least 1000 elements
\end_layout

\begin_layout Plain Layout

Vector v = new Vector(1100) // a little extra space just in case
\end_layout

\begin_layout Plain Layout

Foo f;
\end_layout

\begin_layout Plain Layout

while ((f = getNextFoo()) != null)
\end_layout

\begin_layout Plain Layout

	v.addElement(f);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If you know the exact number of elements, you can create an array and initialize
 the 
\family typewriter
Vector
\family default
 object with this array:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// we can get the exact number of elements we'll receive
\end_layout

\begin_layout Plain Layout

int fooCount = getFooCount();
\end_layout

\begin_layout Plain Layout

Foo[] f = new Foo[fooCount];
\end_layout

\begin_layout Plain Layout

for (int i = 0 ; i < fooCount ; i++)
\end_layout

\begin_layout Plain Layout

	f[i] = getNextFoo();
\end_layout

\begin_layout Plain Layout

Vector v = new Vector(f);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Use this approach only when you know the initial number of elements is not
 too low and you do not expect to make several insertions later.
 Otherwise the 
\family typewriter
Vector
\family default
 may need to grow several times, decreasing the performance.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
Vector
\family default
 growth rate is 20% + 1 on device (100% + 1 on Java), so you should avoid
 using the default constructor (the default size is 8) or initializing the
 
\family typewriter
Vector
\family default
 with less than 20 positions.
\end_layout

\begin_layout Itemize

\family typewriter
Vector
\family default
 does not shrinks automatically.
 If you make several inserts followed by even more removals, you may end
 up with a huge 
\family typewriter
Vector
\family default
 consuming more memory than it actually needs (i.
 e.
 after the inserts the 
\family typewriter
Vector
\family default
 ends up with 1200 positions but after the removals only 500 positions are
 actually being used).
\end_layout

\begin_layout Section
IntVector
\end_layout

\begin_layout Standard
The 
\family typewriter
IntVector
\family default
 is a growable array of integers.
 It's a 
\family typewriter
Vector
\family default
 implementation specific for integers, which provides better performance
 and takes less memory than using 
\family typewriter
Vector
\family default
 to hold only integers.
\end_layout

\begin_layout Standard
For efficiency, 
\family typewriter
IntVector
\family default
 was implemented exactly like 
\family typewriter
Vector
\family default
: it also allows public access to its internal array (
\family typewriter
items
\family default
), but 
\emph on
you must only access it to retrieve (get) or replace (set) elements, and
 never to insert, remove, or resize the buffer
\emph default
.
\end_layout

\begin_layout Standard
Like 
\family typewriter
Vector
\family default
, 
\family typewriter
IntVector
\family default
 may also be used as a stack (an integer stack in this case).
 It can also be used as a bit array.
 These features are better described below.
 
\end_layout

\begin_layout Itemize

\family typewriter
IntVector
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
IntVector() Default constructor, creates an 
\family typewriter
IntVector
\family default
 with the default size 20.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IntVector(int
\begin_inset space ~
\end_inset

size) Creates an 
\family typewriter
IntVector
\family default
 with the given size, which MUST BE greater than 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IntVector(int[]
\begin_inset space ~
\end_inset

items) Creates an 
\family typewriter
IntVector
\family default
, assigning the given array as the internal buffer and its size as the an
 
\family typewriter
IntVector
\family default
 size.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice this constructor uses the given array as internal buffer,
 not a copy.
 So you should not use this array after initializing the 
\family typewriter
IntVector
\family default
 with it.
 If you want to initialize the 
\family typewriter
IntVector
\family default
 with a copy of the array, use
\family typewriter
 Vm.arrayCopy()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To add an element to an 
\family typewriter
IntVector
\family default
, you may use:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
addElement(int
\begin_inset space ~
\end_inset

item) Adds the given integer to the end of the 
\family typewriter
intVector
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addElements(int[]
\begin_inset space ~
\end_inset

elements) Appends an array of integers at the end of the 
\family typewriter
intVector
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insertElementAt(int
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index) Inserts the given integer at the specified index of this 
\family typewriter
IntVector
\family default
, shifting elements with index greater or equal to the specified index to
 have an index one greater than it had previously.
 If 
\family typewriter
index
\family default
 is less than 0 or above the number of elements, the new item is inserted
 at the end.
 
\end_layout

\end_deeper
\begin_layout Itemize
And to remove:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
removeElement(int
\begin_inset space ~
\end_inset

item) Removes the given integer from this 
\family typewriter
IntVector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeElementAt(int
\begin_inset space ~
\end_inset

index) Removes the integer at the given index of this 
\family typewriter
IntVector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeAllElements() Removes all elements from this 
\family typewriter
IntVector
\family default
, reseting its length to 0 and setting all elements to 0.
\end_layout

\end_deeper
\begin_layout Itemize
To find the index of an element of this 
\family typewriter
IntVector
\family default
:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
indexOf(int
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startIndex) Returns the index of the given integer, or -1 if the integer
 is not found.
 The array is searched using an 
\family typewriter
O(n)
\family default
 linear search, starting at the given start index, until the integer is
 found or the end of the array is reached.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
indexOf(int
\begin_inset space ~
\end_inset

item) Like the above, but always start the search at the first position
 (index 0).
 In fact its implementation consists of a single method call: 
\family typewriter
indexOf(item, 0)
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
IntVector
\family default
 also provides the following handy methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
isEmpty() Returns 
\family typewriter
true
\family default
 if the 
\family typewriter
IntVector
\family default
 is empty.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of elements in the 
\family typewriter
IntVector
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort() Sorts the elements of the 
\family typewriter
IntVector
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toIntArray() Returns an array of integers containing all elements of the
 
\family typewriter
IntVector
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unlike 
\family typewriter
Vector.toObjectArray()
\family default
, the method 
\family typewriter
toIntArray()
\family default
 does not return 
\family typewriter
null
\family default
 if the 
\family typewriter
IntVector
\family default
 is empty.
 It always returns an integer array, which may contain elements or not.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
setSize(int
\begin_inset space ~
\end_inset

newSize) Sets the size of the 
\family typewriter
IntVector
\family default
.
 If the new size is greater than the current size, new items equal to zero
 are added to the end of the 
\family typewriter
IntVector
\family default
.
 If the new size is less than the current size, all components at index
 
\family typewriter
newSize
\family default
 and greater are discarded (set to 0).
 The new size can't be negative.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
copyInto(int[]
\begin_inset space ~
\end_inset

out) Copies the items of the vector into the given array, which MUST have
 at least the current size of this vector.
 If the out vector is greater than the current size, the remaining positions
 will remain unchanged.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
contains(int
\begin_inset space ~
\end_inset

v) Returns 
\family typewriter
true
\family default
 if the vector contains the specified element.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reverse() Reverses the order of the elements in the vector.
 In a vector with 
\family typewriter
n
\family default
 elements, the element of index 0 is moved to the index 
\family typewriter
n-1
\family default
, the element of index 1 is moved to the index 
\family typewriter
n-2
\family default
, and so on.
 
\end_layout

\end_deeper
\begin_layout Itemize
To use an 
\family typewriter
IntVector
\family default
 as a stack, you may use the following methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
push(int
\begin_inset space ~
\end_inset

item) Pushes an item onto the top of the stack.
 It actually just calls the method 
\family typewriter
addElement()
\family default
 passing the given integer.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pop() Removes the item at the top of the stack, returning that integer.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pop(int
\begin_inset space ~
\end_inset

howMany) Removes the desired number of items from the top of the stack.
 Unlike the previous method, nothing is returned.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
peek() Returns the item at the top of the stack without removing it.
\end_layout

\end_deeper
\begin_layout Standard
When we want to deal with bit values, we usually use a boolean array.
 However, each position of a boolean array takes 1 byte of memory instead
 of 1 bit.
 This can be a problem when you need to deal with large arrays of bits.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
A single boolean variable is stored in memory as an integer, which costs
 4 bytes.
 But in a boolean array, each position takes 1 byte instead of 4 bytes.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As an alternative, you may use the 
\family typewriter
IntVector
\family default
 as a real bit array using the provided methods and save a lot of memory.
 But there is a drawback: the internal array does not grow by itself when
 you try to access an index bigger than the array's size.
 So you must make sure the 
\family typewriter
IntVector
\family default
 is large enough to hold the number of bits you want to manipulate, otherwise
 you may get an 
\family typewriter
ArrayIndexOutOfBoundsException
\family default
.
\end_layout

\begin_layout Itemize
The 
\family typewriter
IntVector
\family default
 provides the following methods to be used as a bit array:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
ensureBit(int
\begin_inset space ~
\end_inset

sizeInBits) Makes sure the 
\family typewriter
IntVector
\family default
 is large enough to hold the given number of bits.
 You should always call this method before using it as a bit array.
 After that, you can safely use the two methods below.
 This must be done because those methods do not check the bounds of the
 array.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBit(int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

on) Sets the bit at the given index if 
\family typewriter
on
\family default
 is 
\family typewriter
true
\family default
; unsets it, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isBitSet(int
\begin_inset space ~
\end_inset

index) Returns 
\family typewriter
true
\family default
 if the bit at the given index is set; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\end_deeper
\begin_layout Standard
Sample code of the 
\family typewriter
IntVector
\family default
 as a bit array:
\end_layout

\begin_layout Itemize
We need to hold 40000 bits, let's do it with a boolean array:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

boolean[] bitArray = new boolean[40000]; // That's 40000 bytes
\end_layout

\begin_layout Plain Layout

bitArray[5] = true; // easy to set a bit, just use the index.
\end_layout

\begin_layout Plain Layout

boolean aux = bitArray[5]; // easy to get a bit.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Now using an IntVector:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

IntVector bitVector = new IntVector();
\end_layout

\begin_layout Plain Layout

bitVector.ensureBits(40000); // First we make sure the array is large enough.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// This time our array uses only 1251 bytes.
\end_layout

\begin_layout Plain Layout

bitVector.setBit(5, true); // just as easy to set
\end_layout

\begin_layout Plain Layout

boolean aux = bitVector.isBitSet(5); // just as easy to get.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Hashtable
\end_layout

\begin_layout Standard
This class implements a hash table, which is a data structure that associates
 keys with values.
 It's primary operation is a lookup: given a key, finds the corresponding
 value.
 It works by transforming the key into a hash using the method 
\family typewriter
hashCode()
\family default
 (inherited from 
\family typewriter
Object
\family default
), which is then used as an index for the hash table.
\end_layout

\begin_layout Standard
Hash tables should be used when the number of search operations greatly
 supersedes the number of insertions.
\end_layout

\begin_layout Standard
Any non-null object can be used as a key or as a value, optionally, you
 can provide your own hash code instead of providing a key from which the
 hash code will be calculated.
\end_layout

\begin_layout Standard
An instance of 
\family typewriter
Hashtable
\family default
 has two parameters that affect its efficiency: its 
\emph on
capacity
\emph default
 and its 
\emph on
load factor
\emph default
.
 The load factor should be between 0.0 and 1.0.
 When the number of entries in the hash table exceeds the product of the
 load factor and the current capacity, the capacity is increased by calling
 the 
\family typewriter
rehash()
\family default
 method.
 Larger load factors use memory more efficiently, at the expense of larger
 expected time per lookup.
 
\end_layout

\begin_layout Standard
If many entries are to be made into a hash table, creating it with a sufficientl
y large capacity may allow the entries to be inserted more efficiently than
 letting it perform automatic rehashing as needed to grow the table.
\end_layout

\begin_layout Itemize

\family typewriter
Hashtable
\family default
 has two public fields:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
collisions Computes the number of collisions for a set of inserts.
 You must zero this each time you want to compute it.
 Keep in mind that the lower collisions is better, but don't waste too much
 memory if its too high.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
allowDuplicateKeys Setting this to 
\family typewriter
true
\family default
 will allow the hashtable to have more than one key with the same value.
 In this case, the methods will always return the first matching key.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Hashtable
\family default
 has four constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Hashtable(int
\begin_inset space ~
\end_inset

initialCapacity) Creates an empty hash table with the specified initial
 capacity and default load factor of 
\family typewriter
0.75f
\family default
.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The argument 
\family typewriter
initialCapacity
\family default
's value should be the final number of entries in the hash table to avoid
 rehashing.
 The hash table will grow if necessary, but using a number near or above
 the final size can improve performance.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
Hashtable(int
\begin_inset space ~
\end_inset

initialCapacity,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

loadFactor) Creates a new, empty hashtable with the specified initial capacity
 and the specified load factor, which must be between 0.0 and 1.0.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Hashtable(String
\begin_inset space ~
\end_inset

res) Creates a new hash table parsing the elements from the given string.
 The string must be in the form: 
\family typewriter
key = value
\family default
, split in lines (
\family typewriter

\backslash
n
\family default
).
 This aids the task of creating resource bundles to add localization to
 your application.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// save these two lines in a file named EN.txt:  
\end_layout

\begin_layout Plain Layout

Message = Message  
\end_layout

\begin_layout Plain Layout

TestMsg = This is a test  
\end_layout

\begin_layout Plain Layout

Exit = Exit  
\end_layout

\begin_layout Plain Layout

// save these other two in a file named PT.txt:  
\end_layout

\begin_layout Plain Layout

Message = Mensagem 
\end_layout

\begin_layout Plain Layout

TestMsg = Isso e um teste 
\end_layout

\begin_layout Plain Layout

Exit = Sair 
\end_layout

\end_inset

The TotalCross deployer will include the two files referenced below in the
 
\family typewriter
.tcz
\family default
 file.
 Now, when your program starts, you can do:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String txt = idiom == EN? "EN.txt" : "PT.txt";
\end_layout

\begin_layout Plain Layout

byte[] b = Vm.getFile(txt);
\end_layout

\begin_layout Plain Layout

Hashtable res = new Hashtable(new String(b,0,b.length));
\end_layout

\begin_layout Plain Layout

new MessageBox(res.get("Message"), res.get("TestMsg"), new String[]{res.get("Exit")
}).popupNonBlocking();
\end_layout

\end_inset

Note that the keys are case sensitive, and that all strings are trimmed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Hashtable(Object[]
\begin_inset space ~
\end_inset

keys,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

values) Creates a 
\family typewriter
Hashtable
\family default
 with the given keys and values.
 The values can be two things: 
\end_layout

\begin_deeper
\begin_layout Enumerate
An 
\family typewriter
Object
\family default
 array (
\family typewriter
Object[]
\family default
).
 In this case, the number of keys and values must match.
 
\end_layout

\begin_layout Enumerate
A single 
\family typewriter
Object
\family default
.
 This object is set as value to all keys.
 
\end_layout

\begin_layout Standard
The values parameter cannot be 
\family typewriter
null
\family default
.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
To insert a new entry on the hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
put(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

value) Maps the given value to the hash code of the given key.
 Neither the key nor the value can be 
\family typewriter
null
\family default
.
 The value can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
 It returns the previous value of the specified key in the hash table, or
 
\family typewriter
null
\family default
 if it did not have one.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
put(int
\begin_inset space ~
\end_inset

hash,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

value) Maps the given value to the given hash.
 The value can't be 
\family typewriter
null
\family default
 and can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
 It returns the previous value of the specified key in the hash table, or
 
\family typewriter
null
\family default
 if it did not have one.
\begin_inset Newline newline
\end_inset

This method receives a hash code instead of the object.
 You MUST use the 
\family typewriter
get(int)
\family default
 method to retrieve the value, otherwise you will get a 
\family typewriter
NullPointerException
\family default
, because no key is stored using this method.
 
\end_layout

\begin_layout Standard
If the given hash (or key's hash code) already exists in the hash table,
 the old value will be replaced by the given value (unless 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
true
\family default
) and the 
\family typewriter
put()
\family default
 method will return the old value.
 Otherwise, a 
\family typewriter
null
\family default
 value will be returned.
\end_layout

\end_deeper
\begin_layout Itemize
To test if a key is already mapped in the hash table, use the method 
\family typewriter
exists(Object key)
\family default
.
\end_layout

\begin_layout Itemize
To retrieve a value from a hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
get(Object
\begin_inset space ~
\end_inset

key) Returns the value to which the specified key is mapped in the hash
 table.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

defaultValue) Returns the value to which the specified key is mapped in
 the hash table.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(int
\begin_inset space ~
\end_inset

hash) Returns the value to which the specified hash is mapped in the hash
 table.
 Caution: since you're passing an integer instead of an object, if there
 are two objects that map to the same key, this method will always return
 the first one only.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(int
\begin_inset space ~
\end_inset

hash,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

defaultValue) Returns the value to which the specified hash is mapped in
 the hash table.
 Caution: since you're passing an integer instead of an object, if there
 are two objects that map to the same key, this method will always return
 the first one only.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getString(Object
\begin_inset space ~
\end_inset

key) Returns the value to which the specified key is mapped in this hash
 table as a string.
 If the item is a string, a cast is made, otherwise, the 
\family typewriter
toString()
\family default
 method is called.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getString(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

defaultValue) Returns the value to which the specified key is mapped in
 the hash table as a string.
 If the item is a atring, a cast is made, otherwise, the 
\family typewriter
toString()
\family default
 method is called.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\end_deeper
\begin_layout Itemize
To retrieve all values and/or keys from a hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getKeys() Returns a 
\family typewriter
Vector
\family default
 with all the keys in the hash table.
 The order is the same of the 
\family typewriter
getValues()
\family default
 method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValues() Returns a 
\family typewriter
Vector
\family default
 with all the values in the hash table.
 The order is the same of the 
\family typewriter
getKeys()
\family default
 method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getKeyValuePairs(String
\begin_inset space ~
\end_inset

separator) Returns a 
\family typewriter
Vector
\family default
 with all the key/value pairs in the form 
\family typewriter
key + separator + value
\family default
.
 Each vector's element can safely be casted to string and separator sould
 be 
\family typewriter
:
\family default
, 
\family typewriter
=
\family default
, etc.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
copyInto(Hashtable
\begin_inset space ~
\end_inset

target) Copies the keys and values of the hash table into the given target
 hash table.
 Note that the target hash table is not cleared; you should do that by yourself.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dumpKeysValues(StringBuffer
\begin_inset space ~
\end_inset

sb,vString
\begin_inset space ~
\end_inset

keyvalueSeparator,String
\begin_inset space ~
\end_inset

lineSeparator) Dumps the keys and values into the given 
\family typewriter
StringBuffer
\family default
, where 
\family typewriter
keyvalueSeparator
\family default
 is the separator between the key and the value (e.
 g.
 
\family typewriter
:
\family default
) and 
\family typewriter
lineSeparator
\family default
 is the separator placed after each key+value pair (e.
 g.
 
\family typewriter

\backslash
r
\backslash
n
\family default
).
 The last separator is cut from the 
\family typewriter
StringBuffer
\family default
.
 
\end_layout

\end_deeper
\begin_layout Itemize
The method 
\family typewriter
size()
\family default
 returns the number of keys in the hash table.
\end_layout

\begin_layout Itemize
To remove a key and its corresponding value from the hash table, use:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
remove(Object
\family default

\begin_inset space ~
\end_inset


\family typewriter
key)
\family default
 Removes the key (and its corresponding value) from the hash table.
 This method does nothing if the key is not in the hash table.
 It returns the value to which the key had been mapped in the hash table,
 or 
\family typewriter
null
\family default
 if the key did not have a mapping.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(int
\begin_inset space ~
\end_inset

hash) Removes the key (and its corresponding value) from the hash table.
 This method does nothing if the key is not in the hash table.
 It returns the value to which the key had been mapped in the hash table,
 or 
\family typewriter
null
\family default
 if the key did not have a mapping.
\end_layout

\end_deeper
\begin_layout Itemize
To clear the hash table, removing all its entries, use 
\family typewriter
clear()
\family default
.
\end_layout

\begin_layout Itemize
The Hashtable class has a nested class called 
\family typewriter
Hashtable.Entry
\family default
.
 It has the following public fields:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
hash The hash code of a key.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
key A key in the hash table.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The value mapped to this key.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
next Another entry in the hash table.
\end_layout

\end_deeper
\begin_layout Standard
This example creates a hash table of numbers.
 It uses the name of the numbers as keys:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Hashtable numbers = new Hashtable(13);
\end_layout

\begin_layout Plain Layout

numbers.put("one", Convert.toString(1));
\end_layout

\begin_layout Plain Layout

numbers.put("two", Convert.toString(2));
\end_layout

\begin_layout Plain Layout

numbers.put("three",Convert.toString(3));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To retrieve a number, use the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String n = (String)numbers.get("two");
\end_layout

\begin_layout Plain Layout

if (n != null)
\end_layout

\begin_layout Plain Layout

	new MessageBox("two = " + Convert.toInt(n)).popup(); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
IntHashtable
\end_layout

\begin_layout Standard
This class implements a hash table where both the keys and values inserted
 must be integers.
\end_layout

\begin_layout Itemize
Its public fields are similar to the ones from 
\family typewriter
Hashtable
\family default
.
 In 
\family typewriter
allowDuplicateKeys
\family default
, set it to 
\family typewriter
false
\family default
 to throw a 
\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 if you add a key that already exists.
 It's very unusually to have two objects with same key, but it can occur.
 This is good to improve the program's correctness.
 
\end_layout

\begin_layout Itemize
It also has an 
\family typewriter
Entry
\family default
 nested class.
 However, diferently from 
\family typewriter
Hashtable
\family default
, it does not have the field 
\family typewriter
hash
\family default
 and 
\family typewriter
key
\family default
 is an integer instead of an object.
\end_layout

\begin_layout Itemize

\family typewriter
IntHashtable
\family default
 has two constructor:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
IntHashtable(int
\begin_inset space ~
\end_inset

initialCapacity) Creates an empty hash table with the specified initial
 capacity and default load factor of 
\family typewriter
0.75f
\family default
.
 The initial capacity must be the number of elements you think the hash
 table will end with.
 The hash table will grow if necessary, but using a number near or above
 the final size can improve performance.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
IntHashtable(int
\begin_inset space ~
\end_inset

initialCapacity,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

loadFactor) Same as above but receiving a load factor which must be between
 0.0 and 1.0.
\end_layout

\end_deeper
\begin_layout Itemize
The insert a new entry on the hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
put(int
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

value) Maps the given value to the given key.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
put(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

value) Takes out the hash code from the given key object (
\family typewriter
object.hashCode()
\family default
) and calls the previous method.
 To increase safeness, set 
\family typewriter
allowDuplicateKeys
\family default
 to 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout Standard
If the given hash (or key's hash code) already exists in the hash table,
 the old value will be replaced by the given value (unless 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
true
\family default
) and the 
\family typewriter
put()
\family default
 method will return the old value (or the object hash code when inserting
 an object).
 Otherwise, the given value will be returned.
 If 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
false
\family default
 and a duplicated key is inserted, 
\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 is thrown.
\begin_inset Newline newline
\end_inset

The value can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
\end_layout

\end_deeper
\begin_layout Itemize
To test if a key is already mapped in the hash table, use the method 
\family typewriter
exists(int key)
\family default
.
\end_layout

\begin_layout Itemize
To retrieve a value from a hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
get(int
\begin_inset space ~
\end_inset

key) Returns the value to which the specified key is mapped in this hash
 table.
 It throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(Object
\begin_inset space ~
\end_inset

key) Returns the value to which the specified key hash code (
\family typewriter
key.hashCode()
\family default
) is mapped in this hash table.
 It throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(int
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

def) Returns the value to which the specified key is mapped in this hash
 table, or the given default value (
\family typewriter
def
\family default
) if the key is not found.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Make sure you choose a value for 
\family typewriter
def
\family default
 that is never inserted as a value in the hash table, otherwise the return
 value of this method may be treated as a false negative (i.
 e.
 the key maps to a value equals to the given 
\family typewriter
def
\family default
, thus, if you test if the return is not equals to 
\family typewriter
def
\family default
 to check if the key was found, the result will be a false negative).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To retrieve all keys and values from a hash table:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getKeys() Returns an 
\family typewriter
IntVector
\family default
 with all the keys in the hash table.
 The order is the same of the 
\family typewriter
getValues()
\family default
 method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValues() Returns an 
\family typewriter
IntVector
\family default
 with all the values in the hash table.
 The order is the same of the 
\family typewriter
getKeys()
\family default
 method.
 
\end_layout

\end_deeper
\begin_layout Itemize
You may use the method 
\family typewriter
getKey(int pos)
\family default
 to retrieve the key at the given position (
\family typewriter
pos
\family default
).
 An 
\family typewriter
ArrayIndexOutOfBoundsException
\family default
 is thrown if the given position is out of range.
 Note that the first key has no relation with the smallest key.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
size()
\family default
 returns the number of keys in the hash table.
\end_layout

\begin_layout Itemize
To remove a key and its corresponding value from the hash table, use 
\family typewriter
remove(int key)
\family default
.
 This method throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
\end_layout

\begin_layout Itemize
To clear the hash table, removing all its entries, use 
\family typewriter
clear()
\family default
.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
incrementValue(int key, int amount)
\family default
 increments the value of a key by the given amount.
 If the key doesn't exist, a new one is created with the amount.
 Otherwise, its value is changed by the amount.
 This method is useful to use an 
\family typewriter
IntHashtable
\family default
 as a multi counter.
 
\end_layout

\begin_layout Standard
This example creates a small hash table of numbers:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

IntHashtable numbers = new IntHashtable(10);
\end_layout

\begin_layout Plain Layout

numbers.put(1, 1000);
\end_layout

\begin_layout Plain Layout

numbers.put(2, 2000);
\end_layout

\begin_layout Plain Layout

numbers.put(3, 3000);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To retrieve a number, use the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	int i = numbers.get(2);
\end_layout

\begin_layout Plain Layout

	new MessageBox("two = " + i).popup();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch(ElementNotFoundException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example is to count the number of collisions so that it is possible
 to chose the best 
\family typewriter
IntHashtable
\family default
 size (a similar code can be used for 
\family typewriter
Hashtable
\family default
):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int max = 0xFFFFFFF;
\end_layout

\begin_layout Plain Layout

for (int h = 5; ; h++)  
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	IntHashtable ht = new IntHashtable(h);
\end_layout

\begin_layout Plain Layout

	ht.put("nbsp".hashCode(),' ');
\end_layout

\begin_layout Plain Layout

	ht.put("shy".hashCode(),'-');
\end_layout

\begin_layout Plain Layout

	ht.put("quot".hashCode(),'"');
\end_layout

\begin_layout Plain Layout

	...
     
\end_layout

\begin_layout Plain Layout

	if (ht.collisions < max)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		Vm.debug("h: "+h+" colli: "+ht.collisions);
\end_layout

\begin_layout Plain Layout

		max = ht.collisions;
\end_layout

\begin_layout Plain Layout

		if (max == 0)
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Section
Properties
\end_layout

\begin_layout Standard
Properties can be used to store properties pairs (key, value) using a hash
 table.
 Currently, the key must be a string and the value must be an instance of
 
\family typewriter
Properties.Value
\family default
.
\end_layout

\begin_layout Standard
The properties can be saved and loaded to/from a 
\family typewriter
DataStream
\family default
.
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Properties props = new Properties();
\end_layout

\begin_layout Plain Layout

File file;
\end_layout

\begin_layout Plain Layout

if (existe_arquivo(arquivo))
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	file = new File(arquivo, File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

	props.load(new DataStream(file));
\end_layout

\begin_layout Plain Layout

	file.close();
\end_layout

\begin_layout Plain Layout

}         
\end_layout

\begin_layout Plain Layout

props.put(propriedade,new Properties.Str(valor));
\end_layout

\begin_layout Plain Layout

file = new File(arquivo, File.CREATE);
\end_layout

\begin_layout Plain Layout

props.save(new DataStream(file));
\end_layout

\begin_layout Plain Layout

file.close();      
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
To avoid that the 
\family typewriter
load()
\family default
 method gets into an infinite loop if the file is empty or corrupted, the
 constant 
\family typewriter
MAX_PROPS
\family default
 limits the number of properties to 1000.
 If you are saving more than 1000 properties, just change this maximum value.
 
\end_layout

\begin_layout Itemize
Properties has the following constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Properties() Default constructor, creates an empty 
\family typewriter
Properties
\family default
 object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Properties(String[]
\begin_inset space ~
\end_inset

keys,
\begin_inset space ~
\end_inset

Properties.Value[]
\begin_inset space ~
\end_inset

values) Creates a 
\family typewriter
Properties
\family default
 object, storing the given keys/values pairs.
\end_layout

\end_deeper
\begin_layout Itemize
The following methods are provided to handle a 
\family typewriter
Properties
\family default
 objects and its entries:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
put(String
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Properties.Value
\begin_inset space ~
\end_inset

v) Maps the given value to the given key in the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
get(String
\begin_inset space ~
\end_inset

key) Returns the value whose key is mapped to in the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remove(String
\begin_inset space ~
\end_inset

key) Remove the value mapped to the given key from the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the number of 
\family typewriter
Properties
\family default
 stored.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getKeys() Returns a 
\family typewriter
Vector
\family default
 with the current keys.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clear() Clears the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dumpKeysValues(StringBuffer
\begin_inset space ~
\end_inset

sb,String
\begin_inset space ~
\end_inset

keyvalueSeparator,String
\begin_inset space ~
\end_inset

lineSeparator) Similar to 
\family typewriter
Hashtable.dumpKeysValues()
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
To load or save data directly from/to a 
\family typewriter
DataStream
\family default
:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
load(DataStream
\begin_inset space ~
\end_inset

ds) Load all 
\family typewriter
Properties
\family default
 from the given 
\family typewriter
DataStream
\family default
.
 Before calling this method, be sure that there's something to be read (i.
 e., that the file is not empty), to improve efficiency.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
load(DataStream
\begin_inset space ~
\end_inset

ds,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

cleanBeforeLoad) Load all 
\family typewriter
Properties
\family default
 from the given 
\family typewriter
DataStream
\family default
.
 If 
\family typewriter
cleanBeforeLoad
\family default
 is 
\family typewriter
true
\family default
, the contents of the object will be cleared before reading from the stream.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
save(DataStream
\begin_inset space ~
\end_inset

ds) Save all 
\family typewriter
Properties
\family default
 in the given 
\family typewriter
DataStream
\family default
.
 
\end_layout

\end_deeper
\begin_layout Standard
To store a value in 
\family typewriter
Properties
\family default
, you must extend the abstract class 
\family typewriter
Properties.Value
\family default
 and implement the method 
\family typewriter
toString()
\family default
.
\end_layout

\begin_layout Itemize
The following classes (and their field definition) are already implemented
 in the SDK:
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
Properties.Boolean
\family default
 Implements a value of type 
\family typewriter
boolean
\family default
.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
type Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
B
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
typeStr Equals to 
\family typewriter
boolean
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The 
\family typewriter
boolean
\family default
 value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns 
\family typewriter
1
\family default
 if value is 
\family typewriter
true
\family default
; 
\family typewriter
0
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns the integer 1231 if the object represents 
\family typewriter
true
\family default
 and returns the integer 1237 if the object represents 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

obj) Returns 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Boolean
\family default
 object that represents the same 
\family typewriter
boolean
\family default
 value as the current object.
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Double
\family default
 Implements a value of type 
\family typewriter
double
\family default
.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
type Equals to 
\family typewriter
TYPE 
\family default
(D).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
typeStr Equals to 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The 
\family typewriter
double
\family default
 value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the value number (
\family typewriter
Convert.toString(value)
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns a hash code for the 
\family typewriter
Properties.Double
\family default
 object.
 The result is the exclusive OR of the two halves of the 
\family typewriter
long
\family default
 integer bit representation, exactly as produced by the method 
\family typewriter
doubleToLongBits(double)
\family default
, of the primitive 
\family typewriter
double
\family default
 value represented by the object.
 That is, the hash code is the value of the expression: 
\family typewriter
(int) (v ˆ (v >>> 32))
\family default
 where 
\family typewriter
v
\family default
 is defined by: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

long v = Convert.doubleToLongBits(this.value); 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

obj) Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.Double
\family default
 object that represents a 
\family typewriter
double
\family default
 that has the same value as the 
\family typewriter
double
\family default
 represented by the original object.
 For this purpose, two 
\family typewriter
double
\family default
 values are considered to be the same if and only if the method 
\family typewriter
doubleToLongBits(double)
\family default
 returns the identical 
\family typewriter
long
\family default
 value when applied to each.
 
\begin_inset Newline newline
\end_inset

Note that, in most cases, for two instances of class 
\family typewriter
Properties.Double
\family default
, 
\family typewriter
d1
\family default
 and 
\family typewriter
d2
\family default
, the value of 
\family typewriter
d1.equals(d2)
\family default
 is 
\family typewriter
true
\family default
 if and only if 
\family typewriter

\begin_inset Newline newline
\end_inset

Convert.doubleToLongBits(d1.value) ==
\begin_inset Newline newline
\end_inset

Convert.doubleToLongBits(d2.value)
\family default
 also has the value 
\family typewriter
true
\family default
.
 However, there are two exceptions: 
\begin_inset Newline newline
\end_inset

If 
\family typewriter
d1
\family default
 and 
\family typewriter
d2
\family default
 both represent 
\family typewriter
Convert.DOUBLE_NAN_BITS
\family default
, then the 
\family typewriter
equals()
\family default
 method returns 
\family typewriter
true
\family default
, even though 
\family typewriter
Convert.doubleToLongBits(Convert.
\begin_inset Newline newline
\end_inset

DOUBLE_NAN_BITS) == Convert.doubleToLongBits(Convert.
\begin_inset Newline newline
\end_inset

DOUBLE_NAN_BITS)
\family default
 has the value 
\family typewriter
false
\family default
.
\begin_inset Newline newline
\end_inset

If 
\family typewriter
d1
\family default
 represents 
\family typewriter
+0.0
\family default
 while 
\family typewriter
d2
\family default
 represents 
\family typewriter
-0.0
\family default
, or vice versa, the equal test has the value 
\family typewriter
false
\family default
, even though 
\family typewriter
+0.0==-0.0
\family default
 has the value 
\family typewriter
true
\family default
.
 This definition allows hash tables to operate properly.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Int
\family default
 Implements a value of type 
\family typewriter
int
\family default
.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
type Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
I
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
typeStr Equals to 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The 
\family typewriter
int
\family default
 value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the value number (
\family typewriter
Convert.toString(value)
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns a hash code value for the object, equal to the primitive
 
\family typewriter
int
\family default
 value represented by the 
\family typewriter
Properties.Int
\family default
 object.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

obj) Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.Int
\family default
 object that contains the same 
\family typewriter
int
\family default
 value as the original object.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Long
\family default
 Implements a value of type 
\family typewriter
long
\family default
.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
type Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
L
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
typeStr Equals to 
\family typewriter
long
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
value The 
\family typewriter
long
\family default
 value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the value number (
\family typewriter
Convert.toString(value)
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns a hash code for the 
\family typewriter
Properties.Long
\family default
 object.
 The result is the exclusive OR of the two halves of the primitive 
\family typewriter
long
\family default
 value held by the object.
 That is, the hash code is the value of the expression: 
\family typewriter
(int) (this.value ˆ (this.value >>> 32))
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

obj) Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.Long
\family default
 object that contains the same 
\family typewriter
long
\family default
 value as the original object.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Str
\family default
 Implements a value of type 
\family typewriter
String
\family default
.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
type Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
S
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
typeStr Equals to 
\family typewriter
String
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns 
\family typewriter
value
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns the hash code of the enclosed string value (
\family typewriter
value.hashCode()
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

obj) Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
String
\family default
 object, or another 
\family typewriter
Properties.Str
\family default
 object, that represents the same sequence of characters as the original
 object.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Random
\end_layout

\begin_layout Standard
This is a simple Linear Congruential Generator which produces random numbers
 in the range 
\begin_inset Formula $\left[0,2^{31}\right)$
\end_inset

, derived from 
\family typewriter
ran0()
\family default
 in Numerical Recipes.
 Note that 
\family typewriter
ran0()
\family default
 isn't that great – there are much better generators out there -- but it
 is fast and has low memory consumption, and it will do the job.
\end_layout

\begin_layout Standard
Here's a sample of how to use the Random class: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Random r = new Random(0x1234); // the use of the same key is sometimes desirable
 
\end_layout

\begin_layout Plain Layout

for (...) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int nextRandomInt = r.between(0,10);
\end_layout

\begin_layout Plain Layout

	char nextRandomChar = r.between('a','z');
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Random has the following constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Random() Default constructor, creates a 
\family typewriter
Random
\family default
 instance using a seed based on the timestamp.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Random(int
\begin_inset space ~
\end_inset

seed) Creates a 
\family typewriter
Random
\family default
 object using the given seed.
 The only reasonable seeds are between 0 and 2
\begin_inset script superscript

\begin_layout Plain Layout
31
\end_layout

\end_inset

 inclusive.
 If a negative value is received, its absolute value will be used.
\end_layout

\end_deeper
\begin_layout Itemize
The class has only 4 simple methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
nextInt(int
\begin_inset space ~
\end_inset

n) Returns a random integer in the range 
\family typewriter
[0, n)
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
> 0
\family default
; otherwise, -1 is returned.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nextDouble() Returns a random 
\family typewriter
double
\family default
 in the half-open range 
\family typewriter
[0, 1)
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
between(int
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

e) Returns a random integer in the given region.
 E.
 g.
 : 
\family typewriter
rand(1, 10)
\family default
 returns a random integer in the range of 1 to 10, inclusive.
 Note that if 
\family typewriter
s == e
\family default
, it will return in the range 
\family typewriter
s
\family default
 and 
\family typewriter
e+1
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
between(char
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

e) Returns a random character in the given region.
 E.
 g.: 
\family typewriter
between('a', 'e')
\family default
 returns a random character between 
\family typewriter
a
\family default
 and 
\family typewriter
e
\family default
, inclusive.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You should only use one instance of 
\family typewriter
Random
\family default
, otherwise you might not get good values.
 Creating a new instance using always the same seed will always result on
 the same sequence of numbers.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Logger
\end_layout

\begin_layout Standard
A 
\family typewriter
Logger
\family default
 object is used to log messages for a specific system or application component.
 Loggers are usually named using a hierarchical dot-separated namespace.
 Logger names can be arbitrary strings, but they should usually be based
 on the package name or class name of the logged component, such as 
\family typewriter
totalcross.net
\family default
 or 
\family typewriter
totalcross.io
\family default
.
 In addition it is possible to retrieve one global "anonymous" logger that
 can be used in the whole system.
 A logger can be created or retrieved (if it already exists) by 
\family typewriter
getLogger()
\family default
.
 To dispose a logger after using it, just call 
\family typewriter
dispose()
\family default
 and it will be permanently discarded (it will be closed and it won't be
 possible to use it anymore).
 To log a message, you may call the 
\family typewriter
log()
\family default
 method or any of the other convenience methods (
\family typewriter
info()
\family default
, 
\family typewriter
severe()
\family default
, 
\family typewriter
entering()
\family default
, etc).
 
\end_layout

\begin_layout Itemize
First you must be familiar with the different message levels:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
CONFIG
\family default
 Message level for static configuration messages.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
INFO
\family default
 Message level for informational messages.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINE
\family default
 Message level providing tracing information.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINER
\family default
 Indicates a fairly detailed tracing message.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINEST
\family default
 Indicates a highly detailed tracing message.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
WARNING
\family default
 Message level indicating a potential problem.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
SEVERE
\family default
 Message level indicating a serious failure.
\end_layout

\end_deeper
\begin_layout Itemize
You may get or set the logger default settings with these static methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getDefaultSeparator() Returns the string used as initial message separator,
 which is used by new loggers.
 A separator is a string that separates two log messages.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDefaultSeparator(String
\begin_inset space ~
\end_inset

separator) Sets the initial message separator to be used by new loggers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDefaultLevel() Returns the initial logger level, which is used by new
 loggers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setDefaultLevel(int
\begin_inset space ~
\end_inset

level) Sets the initial logger level to be used by new loggers.
\end_layout

\end_deeper
\begin_layout Itemize
The logger level may be one of the above message levels, or any composition
 of them 
\family typewriter
OR
\family default
'ed together.
 You may also use one of the following constants:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
ALL
\family default
 Indicates that all messages should be logged.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
OFF
\family default
 Special level that can be used to turn off logging.
\end_layout

\end_deeper
\begin_layout Itemize
To get a logger, you may use one of the following static methods:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getLogger(String
\begin_inset space ~
\end_inset

name) Returns the logger with the given name, keeping its level and output
 handlers unchanged.
 If the logger does not exist, it will be created and stored for future
 use.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLogger(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

level) Returns the logger with the given name, setting the specified level
 and keeping the output handlers unchanged.
 If the logger does not exist, it will be created and stored for future
 use.
 If 
\family typewriter
level == -1
\family default
, it won't be changed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLogger(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

level,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

outputStream) Returns the logger with the given name, setting the level
 specified and optionally adding the given stream to the list of output
 handlers.
 If the logger does not exist, it will be created and stored for future
 use.
 If 
\family typewriter
level == -1
\family default
 or 
\family typewriter
outputStream == null
\family default
, it won't be changed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getGlobalLogger() Returns the global anonymous logger (
\family typewriter
name == null
\family default
).
 Notice that the name can't be null in the above methods.
\end_layout

\end_deeper
\begin_layout Itemize
After getting a 
\family typewriter
Logger
\family default
 instance, you may get or set its settings:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
getName() Returns the name of the logger or 
\family typewriter
null
\family default
, if the logger is the global anonymous logger.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSeparator() Returns the string used by the logger to separate log messages.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSeparator(String
\begin_inset space ~
\end_inset

separator) Sets the separator to be used by the logger.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLevel() Returns the current level of the logger, which is an integer
 number representing the current logger level.
 To check if the logger is set to log a specific type of message (
\family typewriter
SEVERE
\family default
, 
\family typewriter
WARNING
\family default
, etc), just check if the level 
\family typewriter
OR
\family default
'ed with the message level is different from zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setLevel(int
\begin_inset space ~
\end_inset

level) Sets the current level of the logger.
 
\family typewriter
level
\family default
 should be a composition of one or more of the message types constants (
\family typewriter
FINEST
\family default
, 
\family typewriter
FINER
\family default
, 
\family typewriter
FINE
\family default
, 
\family typewriter
CONFIG
\family default
, 
\family typewriter
INFO
\family default
, 
\family typewriter
WARNING
\family default
, or 
\family typewriter
SEVERE
\family default
), 
\family typewriter
OFF
\family default
, if you want to disable all logging, or 
\family typewriter
ALL
\family default
, if you want to enable all logging.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSeparator() Gets the string used to separate two log messages, that is,
 the string written after each log message.
 A separator can be 
\family typewriter

\backslash
n
\family default
 (newline), white spaces, etc.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSeparator(String
\begin_inset space ~
\end_inset

separator) Sets the string used to separate two log messages.
 
\end_layout

\end_deeper
\begin_layout Itemize
You must add an output handler to a logger, which is a stream object that
 will receive the log messages.
 A logger may have multiple output handlers.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
addOutputHandler(Stream
\begin_inset space ~
\end_inset

output) Adds an output stream to the logger's output handler set.
 It does nothing if the given stream was previously added to this logger.
 This means that every logged message (depending on the current logger level)
 will be written to this new stream.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getOutputHandlers() Gets the output handlers associated with the logger,
 returning an array of all registered output handlers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
removeOutputHandler(Stream
\begin_inset space ~
\end_inset

output) Removes an output handler from the logger's output handler set.
 It return 
\family typewriter
true
\family default
 if, and only if, the stream was successfully removed.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You may use the static field 
\family typewriter
DEBUG_CONSOLE
\family default
, which is a stream to the TotalCross' debug file.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The following methods can be used to help you trace the execution flow of
 your code and log exceptions:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
entering(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

params) Logs a 
\family typewriter
FINER
\family default
 message reporting a method entry.
 A record with message
\family typewriter
 ENTRY
\family default
, log level 
\family typewriter
FINER
\family default
, and the given parameters are logged.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
exiting(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod) Logs a 
\family typewriter
FINER
\family default
 message reporting a method return.
 A record with message
\family typewriter
 RETURN
\family default
, log level 
\family typewriter
FINER
\family default
, and the given parameters are logged.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
throwing(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod,
\begin_inset space ~
\end_inset

Throwable
\begin_inset space ~
\end_inset

thrown) Logs a 
\family typewriter
SEVERE
\family default
 message reporting an exception being thrown.
 A record with message
\family typewriter
 THROW
\family default
, log level 
\family typewriter
SEVERE
\family default
, and the given parameters are logged.
\end_layout

\end_deeper
\begin_layout Itemize
To log your own message, you may use:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
log(int
\begin_inset space ~
\end_inset

level,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

message,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

prependInfo) Logs the given message, using the given level.
 The last argument is a flag indicating whether this log message must be
 prepended with the current date and time, level string, logger name, etc.
 It will throw a 
\family typewriter
NullPointerException
\family default
 if one or more registered output handler streams are 
\family typewriter
null
\family default
 or the logger has been disposed.
\end_layout

\end_deeper
\begin_layout Itemize
Or one of the convenience methods, which are actually just calls to the
 method 
\family typewriter
log()
\family default
 using the given message, the appropriate level, and the 
\family typewriter
prependInfo
\family default
 flag always on:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0

\family typewriter
config(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
CONFIG
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
info(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs an 
\family typewriter
INFO
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
fine(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINE
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
finer(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINER
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
finest(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINEST
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
warning(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
WARNING
\family default
 message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
severe(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
SEVERE
\family default
 message.
\end_layout

\end_deeper
\begin_layout Itemize
Finally, you should dispose the logger and close all streams associated
 to the logger, unless its streams are still in use by the program.
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
dispose(boolean
\begin_inset space ~
\end_inset

closeOutputHandlers) Permanently discards this logger, removing it from
 the loggers registry.
 If 
\family typewriter

\begin_inset Newline newline
\end_inset

closeOutputHandlers
\family default
 is 
\family typewriter
true
\family default
, all streams associated to this logger are closed.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You shouldn't (and in fact you can't) dispose the global logger.
 Calling 
\family typewriter
dispose()
\family default
 for the global logger does not discard it, only adds an useless method
 call to your code.
\end_layout

\end_inset


\end_layout

\begin_layout Section
BigDecimal
\end_layout

\begin_layout Standard
Arbitrary-precision signed decimal numbers.
 A 
\family typewriter
BigDecimal
\family default
 consists of an arbitrary precision integer unscaled value and a 32-bit
 integer scale.
 If zero or positive, the scale is the number of digits to the right of
 the decimal point.
 If negative, the unscaled value of the number is multiplied by ten to the
 power of the negation of the scale.
 The value of the number represented by the 
\family typewriter
BigDecimal
\family default
 is therefore 
\family typewriter
unscaledValue × 10
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
-scale
\end_layout

\end_inset


\family default
.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
BigDecimal
\family default
 class provides operations for arithmetic, scale manipulation, rounding,
 comparison, hashing, and format conversion.
 The 
\family typewriter
toString()
\family default
 method provides a canonical representation of a 
\family typewriter
BigDecimal
\family default
.
\end_layout

\begin_layout Standard
The 
\family typewriter
BigDecimal
\family default
 class gives its user complete control over rounding behavior.
 If no rounding mode is specified and the exact result cannot be represented,
 an exception is thrown; otherwise, calculations can be carried out to a
 chosen precision and rounding mode.
\end_layout

\begin_layout Standard
Since the same numerical value can have different representations (with
 different scales), the rules of arithmetic and rounding must specify both
 the numerical result and the scale used in the result's representation.
 In general the rounding modes and precision setting determine how operations
 return results with a limited number of digits when the exact result has
 more digits (perhaps infinitely many in the case of division) than the
 number of digits returned.
 
\end_layout

\begin_layout Standard
For all arithmetic operators, the operation is carried out as though an
 exact intermediate result were first calculated and then rounded to the
 number of digits specified by the precision setting (if necessary), using
 the selected rounding mode.
 If the exact result is not returned, some digit positions of the exact
 result are discarded.
 When rounding increases the magnitude of the returned result, it is possible
 for a new digit position to be created by a carry propagating to a leading
 "9" digit.
 For example, rounding the value 999.9 to three digits rounding up would
 be numerically equal to one thousand, represented as 100×10
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

.
 In such cases, the new "1" is the leading digit position of the returned
 result.
 
\end_layout

\begin_layout Standard
Besides a logical exact result, each arithmetic operation has a preferred
 scale for representing a result.
 The preferred scale for each operation is listed in the table below.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Preferred Scale of Result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
max(addend.scale(), augend.scale())
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subtract
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
max(minuend.scale(), subtrahend.scale())
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiply
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
multiplier.scale() + multiplicand.scale()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Divide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
dividend.scale() - divisor.scale()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
These scales are the ones used by the methods which return exact arithmetic
 results; except that an exact divide may have to use a larger scale since
 the exact result may have more digits.
 For example, 1/32 is 0.03125.
 
\end_layout

\begin_layout Standard
Before rounding, the scale of the logical exact intermediate result is the
 preferred scale for that operation.
 If the exact numerical result cannot be represented in precision digits,
 rounding selects the set of digits to return and the scale of the result
 is reduced from the scale of the intermediate result to the least scale
 which can represent the precision digits actually returned.
 If the exact result can be represented with at most precision digits, the
 representation of the result with the scale closest to the preferred scale
 is returned.
 In particular, an exactly representable quotient may be represented in
 fewer than precision digits by removing trailing zeros and decreasing the
 scale.
 For example, rounding to three digits using the floor rounding mode, 
\family typewriter

\begin_inset Newline newline
\end_inset

19/100 = 0.19 // integer=19, scale=2 
\family default

\begin_inset Newline newline
\end_inset

but 
\begin_inset Newline newline
\end_inset


\family typewriter
21/110 = 0.190 // integer=190, scale=3
\family default
 
\end_layout

\begin_layout Standard
Note that for add, subtract, and multiply, the reduction in scale will equal
 the number of digit positions of the exact result which are discarded.
 If the rounding causes a carry propagation to create a new high-order digit
 position, an additional digit of the result is discarded than when no new
 digit position is created.
 
\end_layout

\begin_layout Standard
Other methods may have slightly different rounding semantics.
 For example, the result of the 
\family typewriter
pow()
\family default
 method using the specified algorithm can occasionally differ from the rounded
 mathematical result by more than one unit in the last place, one ulp.
 
\end_layout

\begin_layout Standard
Two types of operations are provided for manipulating the scale of a 
\family typewriter
BigDecimal
\family default
: scaling/rounding operations and decimal point motion operations.
 Scaling/rounding operations (
\family typewriter

\begin_inset Newline newline
\end_inset

setScale()
\family default
) return a 
\family typewriter
BigDecimal
\family default
 whose value is approximately (or exactly) equal to that of the operand,
 but whose scale or precision is the specified value; that is, they increase
 or decrease the precision of the stored number with minimal effect on its
 value.
 Decimal point motion operations (
\family typewriter
movePointLeft()
\family default
 and 
\family typewriter
movePointRight()
\family default
) return a 
\family typewriter
BigDecimal
\family default
 created from the operand by moving the decimal point a specified distance
 in the specified direction.
 
\end_layout

\begin_layout Standard
All methods and constructors for this class throw 
\family typewriter
NullPointerException
\family default
 when passed a 
\family typewriter
null
\family default
 object reference for any input parameter.
 
\end_layout

\begin_layout Standard
If you need numerical precision, you need to use this class when dealing
 with floating point numbers.
 
\end_layout

\begin_layout Standard
Computers don't deal properly with decimals.
 As you already know, data is represented internaly using the binary format.
\end_layout

\begin_layout Standard
The number 4, for instance, is represented by 100 (
\family typewriter
1x2
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + 0x2
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 + 0x2
\begin_inset script superscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 = 4
\family default
).
\end_layout

\begin_layout Standard
How to represent a number smaller than 1? Each decimal digit after the dot
 represents the values 
\family typewriter
1/2
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-1
\end_layout

\end_inset


\family default
), 
\family typewriter
1/4
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-2
\end_layout

\end_inset


\family default
), 
\family typewriter
1/8
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-3
\end_layout

\end_inset


\family default
), and so on.
\end_layout

\begin_layout Standard
Therefore, the numbers 4.25, 4.5, and 4.75 are represented in binary like this,
 respectively: 100,01, 100,10, and 100,11.
\end_layout

\begin_layout Standard
This is very poor to represent decimals.
 Trying to represent 0.3 in binary results in an infinite binary number,
 because 0.3 = 0.25 + 0.03125 + 0.009765635...
\end_layout

\begin_layout Standard
To bypass the problem, the calculations are done with many decimal digits
 and then the result is rounded.
 This explains why 
\family typewriter
double
\family default
 and 
\family typewriter
float
\family default
 calculations are not precise.
 Some processors use 50 bits, which is good enough for many applications.
 However, it is not an infinite number of bits, which is needed to represent
 some numbers, such as 0.3.
 
\end_layout

\begin_layout Standard
A correct example to use this class is the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static BigDecimal newBigDecimal(String value) throws InvalidNumberExcepti
on
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return new BigDecimal(value.replace(Settings.decimalSeparator, '.'));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public static String toPlainString(BigDecimal value)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return value.toPlainString().replace('.', Settings.decimalSeparator);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

BigDecimal num1 = newBigDecimal("5.912");
\end_layout

\begin_layout Plain Layout

BigDecimal num2 = newBigDecimal("0.01");
\end_layout

\begin_layout Plain Layout

BigDecimal num3 = num1.multiply(num2).setScale(4, BigDecimal.ROUND_HALF_EVEN);
\end_layout

\begin_layout Plain Layout

Vm.debug("Resultado: "+toPlainString(num3)); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you are getting a value typed by the user in a text box, DON'T CONVERT
 IT TO DOUBLE! You must create a 
\family typewriter
BigDecimal
\family default
 directly.
\end_layout

\begin_layout Standard
That is, the following code is WRONG:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double d = Convert.toDouble(edValor.getText());
\end_layout

\begin_layout Plain Layout

BigDecimal b = new BigDecimal(d);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you convert the number to double, you LOSE PRECISION.
 The correct code is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BigDecimal b = new BigDecimal(edValor.getText()); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This class has the following constants:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZERO The constant zero as a 
\family typewriter
BigDecimal
\family default
 with scale zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ONE The constant one as a 
\family typewriter
BigDecimal
\family default
 with scale zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TEN The constant ten as a 
\family typewriter
BigDecimal
\family default
 with scale zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_UP Rounding mode to round away from zero.
 Always increments the digit prior to a nonzero discarded fraction.
 Note that this rounding mode never decreases the magnitude of the calculated
 value.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_DOWN Rounding mode to round towards zero.
 Never increments the digit prior to a discarded fraction (i.
 e., truncates).
 Note that this rounding mode never increases the magnitude of the calculated
 value.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_CEILING Rounding mode to round towards positive infinity.
 If the 
\family typewriter
BigDecimal
\family default
 is positive, behaves as for 
\family typewriter
ROUND_UP
\family default
; if negative, behaves as for 
\family typewriter
ROUND_DOWN
\family default
.
 Note that this rounding mode never decreases the calculated value.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_FLOOR Rounding mode to round towards negative infinity.
 If the 
\family typewriter
BigDecimal
\family default
 is positive, behave as for 
\family typewriter
ROUND_DOWN
\family default
; if negative, behave as for 
\family typewriter
ROUND_UP
\family default
.
 Note that this rounding mode never increases the calculated value.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_HALF_UP Rounding mode to round towards "nearest neighbor" unless both
 neighbors are equidistant, in which case round up.
 Behaves as for 
\family typewriter
ROUND_UP
\family default
 if the discarded fraction is 
\family typewriter
>= 0.5
\family default
; otherwise, behaves as for 
\family typewriter
ROUND_DOWN
\family default
.
 Note that this is the rounding mode that most of us were taught in grade
 school.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_HALF_DOWN Rounding mode to round towards "nearest neighbor" unless
 both neighbors are equidistant, in which case round down.
 Behaves as for 
\family typewriter
ROUND_UP
\family default
 if the discarded fraction is 
\family typewriter
> 0.5
\family default
; otherwise, behaves as for 
\family typewriter
ROUND_DOWN
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_HALF_EVEN Rounding mode to round towards the "nearest neighbor" unless
 both neighbors are equidistant, in which case, round towards the even neighbor.
 Behaves as for 
\family typewriter
ROUND_HALF_UP
\family default
 if the digit to the left of the discarded fraction is odd; behaves as for
 
\family typewriter
ROUND_HALF_DOWN
\family default
 if it's even.
 Note that this is the rounding mode that minimizes cumulative error when
 applied repeatedly over a sequence of calculations.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ROUND_UNNECESSARY Rounding mode to assert that the requested operation has
 an exact result, hence no rounding is necessary.
 If this rounding mode is specified on an operation that yields an inexact
 result, an 
\family typewriter
ArithmeticException
\family default
 is thrown.
\end_layout

\begin_layout Standard
This class has the following public constructors and methods (excluding
 some fields from its superclasses):
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(String
\family typewriter

\begin_inset space ~
\end_inset


\family default
num) Constructs a 
\family typewriter
BigDecimal
\family default
 which represents the number given by the parameter.
 If its value is invalid, the method throws an 
\family typewriter
InvalidNumberException
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Constructs a new 
\family typewriter
BigDecimal 
\family default
whose unscaled value is 
\family typewriter
val
\family default
 and whose scale is zero.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(long
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Constructs a new 
\family typewriter
BigDecimal
\family default
 whose unscaled value is 
\family typewriter
val
\family default
 and whose scale is zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(BigInteger
\family typewriter

\begin_inset space ~
\end_inset


\family default
num) Constructs a 
\family typewriter
BigDecimal
\family default
 whose unscaled value is 
\family typewriter
num
\family default
 and whose scale is zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(BigInteger
\family typewriter

\begin_inset space ~
\end_inset


\family default
num,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
scale) Constructs a 
\family typewriter
BigDecimal
\family default
 whose unscaled value is 
\family typewriter
num
\family default
 and whose scale is 
\family typewriter
scale
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BigDecimal(double
\family typewriter

\begin_inset space ~
\end_inset


\family default
num) Constructs a 
\family typewriter
BigDecimal
\family default
 which represents the number given by the parameter.
 If the number represents infinity values or NaN (not a number), it will
 throw an 
\family typewriter
InvalidNumberException
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
valueOf(long
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Static method similar to 
\family typewriter
BigDecimal(long val)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
valueOf(long
\family typewriter

\begin_inset space ~
\end_inset


\family default
val,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
scale) Static method that creates a new 
\family typewriter
BigDecimal
\family default
 whose unscaled value is 
\family typewriter
val
\family default
 and whose scale is 
\family typewriter
scale
\family default
.
 It will throw an 
\family typewriter
InvalidNumberException
\family default
 if the value is 
\family typewriter
NaN
\family default
 or infinite
\end_layout

\begin_layout FieldList
\labelwidthstring 0
valueOf(double
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Static method that returns a new 
\family typewriter
BigDecimal
\family default
 constructed from the 
\family typewriter
BigDecimal(String)
\family default
 constructor using the 
\family typewriter
Convert.toString(double)
\family default
 method to obtain the string.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
add(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Adds two 
\family typewriter
BigDecimal
\family default
s.
 The scales need to be lined up, that is, the one which has the smaller
 scale must be multiplied by a power of ten so that both scales are equal.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
subtract(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Executes a subtraction using 
\family typewriter
BigDecimal
\family default
s.
 The scales also need to be lined up.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
multiply(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Multiplies two 
\family typewriter
BigDecimal
\family default
s.
 The unscaled values are multipled and the scales are added.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
divide(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
newScale,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
roundingMode) Executes a division using 
\family typewriter
BigDecimal
\family default
s.
 The resulting scale will be the one passed as parameter.
 If the rounding mode is invalid or it is necessary to round the resulting
 value (has a nonterminating decimal expansion) and the rounding mode passed
 is 
\family typewriter
ROUND_UNNECESSARY
\family default
, an exception will be thrown.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
divide(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
roundingMode) Executes a division using 
\family typewriter
BigDecimal
\family default
s.
 The resulting scale will be the one from the original object.
 If the rounding mode is invalid or it is necessary to round the resulting
 value and the rounding mode passed is 
\family typewriter
ROUND_UNNECESSARY
\family default
, an exception will be thrown.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
divide(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
divisor) Executes a division using 
\family typewriter
BigDecimal
\family default
s.
 The resulting scale will be the one from the original object.
 If it is necessary to round the resulting value an exception will be thrown.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
remainder(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Returns a 
\family typewriter
BigDecimal
\family default
 whose value is the remainder in the quotient 
\family typewriter
this / val
\family default
.
 This is obtained by 
\family typewriter
subtract(divideToIntegralValue(val).multiply(val))
\family default
.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
divideAndRemainder(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Returns a 
\family typewriter
BigDecimal
\family default
 array, the first element of which is the integer part of 
\family typewriter
this / val
\family default
, and the second element of which is the remainder of that quotient.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
divideToIntegralValue(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Returns a 
\family typewriter
BigDecimal
\family default
 whose value is the integer part of the quotient 
\family typewriter
this / val
\family default
.
 The preferred scale is 
\family typewriter
this.scale - val.scale
\family default
.
 The divisor can't be zero.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
compareTo(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) Returns 0 if the two values represent the same number, -1 if 
\family typewriter
this < val
\family default
, and 1 if 
\family typewriter
val > this
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
equals(Object
\family typewriter

\begin_inset space ~
\end_inset


\family default
o) Returns 
\family typewriter
true
\family default
 if 
\family typewriter
o
\family default
 is a 
\family typewriter
BigDecimal
\family default
, both scales are equal and their comparison (
\family typewriter
this.compare To((BigDecimal)o
\family default
) returns 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns a XOR between the integer part of the object and its
 scale.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
max(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) If 
\family typewriter
this > val
\family default
, returns 
\family typewriter
this
\family default
; otherwise, returns 
\family typewriter
val
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
min(BigDecimal
\family typewriter

\begin_inset space ~
\end_inset


\family default
val) If 
\family typewriter
this < val
\family default
, returns 
\family typewriter
this
\family default
; otherwise, returns 
\family typewriter
val
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
movePointRight(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
n) Multiplies the number represented by the 
\family typewriter
BigDecimal
\family default
 by 
\family typewriter
10
\begin_inset script superscript

\begin_layout Plain Layout
n
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
movePointLeft(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
n) Divides the number represented by the 
\family typewriter
BigDecimal
\family default
 by 
\family typewriter
10
\begin_inset script superscript

\begin_layout Plain Layout
n
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
signum() Returns the sign of the number represented by the 
\family typewriter
BigDecimal
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scale() Returns the scale of the 
\family typewriter
BigDecimal
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
unscaledValue() Returns the unscaled value of the 
\family typewriter
BigDecimal
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
abs() Returns a 
\family typewriter
BigDecimal
\family default
 whose unscaled value is the modulus of the original one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
negate() Returns a 
\family typewriter
BigDecimal
\family default
 whose unscaled value is the negation of the original one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
plus() Returns the 
\family typewriter
BigDecimal
\family default
 unchanged.
 This is included for symmetry with the method 
\family typewriter
negate()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
precision() Returns the precision of the 
\family typewriter
BigDecimal
\family default
 (the number of digits in the unscaled value).
 The precision of a zero value is 1.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns the string representation of the 
\family typewriter
BigDecimal
\family default
 using scientific notation if necessary.
 The following steps are taken to generate the result: 
\end_layout

\begin_deeper
\begin_layout Enumerate
the 
\family typewriter
BigInteger
\family default
 
\family typewriter
unscaledValue
\family default
's 
\family typewriter
toString()
\family default
 method is called and if 
\family typewriter
scale == 0
\family default
, this string is returned.
 
\end_layout

\begin_layout Enumerate
An integer 
\family typewriter
adjExp
\family default
 is created, which is equal to the negation of scale plus the number of
 digits in the unscaled value, minus one.
 
\end_layout

\begin_layout Enumerate
If 
\family typewriter
scale >= 0 && adjExp >= -6
\family default
, then we represent the 
\family typewriter
BigDecimal
\family default
 without scientific notation.
 A decimal is added if the scale is positive and zeros are prepended as
 necessary.
\end_layout

\begin_layout Enumerate
If scale is negative or 
\family typewriter
adjExp
\family default
 is less than -6, we use scientific notation.
 If the unscaled value has more than one digit, a decimal is inserted after
 the first digit, the character 
\family typewriter
E
\family default
 is appended and 
\family typewriter
adjExp
\family default
 is appended.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
toEngineeringString() Returns the string representation of the 
\family typewriter
BigDecimal
\family default
 using engineering notation if necessary.
 This is similar to 
\family typewriter
toString()
\family default
 but when exponents are used, the exponent is made to be a multiple of 3
 such that the integer part is between 1 and 999.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toPlainString() Returns a string representation of the 
\family typewriter
BigDecimal
\family default
 without using scientific notation.
 Zeros may be added to the end of the string.
 For example, an unscaled value of 1234 and a scale of -3 would result in
 the string 1234000, but the 
\family typewriter
toString()
\family default
 method would return 
\family typewriter
1.234E+6
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toBigInteger() Converts the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
BigInteger
\family default
.
 Any fractional part will be discarded.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toBigIntegerExact() Converts the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
BigInteger
\family default
, throwing an 
\family typewriter
ArithmeticException
\family default
 if the conversion is not exact.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
intValue() Returns an integer from the conversion of the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
BigInteger
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stripTrailingZeros() Returns a 
\family typewriter
BigDecimal
\family default
 which is numerically equal to the original 
\family typewriter
BigDecimal
\family default
 but with no trailing zeros in the representation.
 For example, if the 
\family typewriter
BigDecimal
\family default
 has 
\family typewriter
[unscaledValue, scale] = [6313000, 4]
\family default
 this method returns a 
\family typewriter
BigDecimal
\family default
 with 
\family typewriter
[unscaledValue, scale] = [6313, 1]
\family default
.
 As another example, 
\family typewriter
[12400, -2]
\family default
 would become
\family typewriter
 [124, -4]
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
longValue() Returns a 
\family typewriter
long
\family default
 from the conversion of the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
BigInteger
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
doubleValue() Converts the string representation of the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setScale(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
scale) Changes the scale.
 If rounding is necessary, an 
\family typewriter
ArithmeticException
\family default
 is thrown.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setScale(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
scale,
\family typewriter

\begin_inset space ~
\end_inset


\family default
int
\family typewriter

\begin_inset space ~
\end_inset


\family default
roundingMode) Changes the scale.
 If rounding is necessary and 
\family typewriter
roundingMode == ROUND_UNNECESSARY
\family default
, an 
\family typewriter
ArithmeticException
\family default
 is thrown.
 It will also be thrown if 
\family typewriter
scale < 0
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
scaleByPowerOfTen(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
n) Returns a 
\family typewriter
BigDecimal
\family default
 whose numerical value is the numerical value of the original 
\family typewriter
BigDecimal
\family default
 multiplied by 10 to the power of 
\family typewriter
n
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pow(int
\family typewriter

\begin_inset space ~
\end_inset


\family default
n) Returns a 
\family typewriter
BigDecimal
\family default
 whose value is the original value to the power of 
\family typewriter
n
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ulp() Returns the size of a unit in the last place of the 
\family typewriter
BigDecimal
\family default
.
 This returns a 
\family typewriter
BigDecimal
\family default
 with 
\family typewriter
[unscaledValue, scale] = [1, scale]
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
longValueExact() Converts the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
long
\family default
 value.
 It will throw an 
\family typewriter
ArithmeticException
\family default
 if rounding or overflow occurs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
intValueExact() Converts the 
\family typewriter
BigDecimal
\family default
 into an integer by first calling 
\family typewriter
longValueExact()
\family default
 and then checking that the 
\family typewriter
long
\family default
 returned from that method fits into an 
\family typewriter
int
\family default
.
 It will throw an
\family typewriter

\begin_inset Newline newline
\end_inset

ArithmeticException
\family default
 if the 
\family typewriter
BigDecimal
\family default
 has a fractional part or is too large to fit into an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
shortValueExact() Converts the 
\family typewriter
BigDecimal
\family default
 into a 
\family typewriter
short
\family default
 by first calling 
\family typewriter
longValueExact()
\family default
 and then checking that the 
\family typewriter
long
\family default
 returned from that method fits into a 
\family typewriter
short
\family default
.
 It will throw an
\family typewriter

\begin_inset Newline newline
\end_inset

ArithmeticException
\family default
 if the 
\family typewriter
BigDecimal
\family default
 has a fractional part or is too large to fit into a 
\family typewriter
short
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
byteValueExact() Converts the 
\family typewriter
BigDecimal
\family default
 into a byte by first calling 
\family typewriter
longValueExact()
\family default
 and then checking that the 
\family typewriter
long
\family default
 returned from that method fits into a byte.
 It will throw an 
\family typewriter
ArithmeticException
\family default
 if the 
\family typewriter
BigDecimal
\family default
 has a fractional part or is too large to fit into a byte.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
compareTo(Object
\family typewriter

\begin_inset space ~
\end_inset


\family default
other) Just calls 
\family typewriter
compareTo((BigDecimal)other)
\family default
.
\end_layout

\begin_layout Chapter
totalcross.sys
\end_layout

\begin_layout Section
Time
\begin_inset CommandInset label
LatexCommand label
name "sec:Time"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Time
\family default
 class stores a specific a date and time.
 The year must have 4 digits and the hour is numbered in 24-hour notation,
 which is the international standard notation of time, and may also be referred
 as military time or astronomical time.
\end_layout

\begin_layout Standard
For performance reasons, the 
\family typewriter
Time
\family default
 fields have public access.
 So you can directly access the field day to get or set its value, instead
 of calling a method.
 However, that makes the 
\family typewriter
Time
\family default
 objects unsafe because the fields' values are not checked when they are
 set, and may not be within the field valid range.
\end_layout

\begin_layout Standard
Since the fields can be set without any kind of validation, it would be
 pointless to add validation to the other methods, therefore, 
\emph on
the Time fields' values are never validated by any method or constructor
\emph default
.
 So you must know and always respect the fields' range, and never set a
 field with a variable without first checking if the value is withing range
 (for instance, let the user type the hour in an edit and simply convert
 it to 
\family typewriter
int
\family default
 and set the 
\family typewriter
hour
\family default
 field, without checking if its value is between 0 and 23).
\end_layout

\begin_layout Itemize
The 
\family typewriter
Time
\family default
 fields with their respective range:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
year
\family default
 The year in 4 digits.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
month
\family default
 The month in the range of 1 to 12.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
day
\family default
 The day in the range of 1 to the last day of the specified month.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
hour
\family default
 The hour in the range of 0 to 23.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
minute
\family default
 The minute in the range of 0 to 59.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
second
\family default
 The second in the range of 0 to 59.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
millis
\family default
 Milliseconds in the range of 0 to 999.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Time
\family default
 has four constructors:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
Time() Default constructor, creates a 
\family typewriter
Time
\family default
 object set with the device's current date and time.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Most devices do not keep track of the milliseconds, therefore, the field
 
\family typewriter
millis
\family default
 of the new object will always have the default value 0 on them.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
Time(int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

hour,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

minute,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

second,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

millis) Creates a 
\family typewriter
Time
\family default
 object with the given values.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Time(long
\begin_inset space ~
\end_inset

t) Creates a 
\family typewriter
Time
\family default
 object from the given value, which must be in the format 
\family typewriter
YYYYMMDDHHMMSS
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Time(String
\begin_inset space ~
\end_inset

iso8601) Creates a 
\family typewriter
Time
\family default
 object using the given string, which must be in the ISO8601 format: 
\family typewriter
YYYYMMDDTHH:MM:SS
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice the last two constructors do not include the milliseconds,
 so the field 
\family typewriter
millis
\family default
 will keep its default value 0.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember: no kind of validation is done on the 
\family typewriter
Time
\family default
 fields values, not even on the constructors.
 However, the default constructor will never initialize an object with invalid
 values, and the last constructor may throw an 
\family typewriter
InvalidNumberException
\family default
 if it fails to parse the given string.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
equals(Object
\begin_inset space ~
\end_inset

o) Compares two 
\family typewriter
Time
\family default
 objects for equality.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and its a 
\family typewriter
Time
\family default
 object that represents the same point in time, from year to millisecond,
 as this object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTimeLong() Converts this 
\family typewriter
Time
\family default
 object to a long value in the format 
\family typewriter
YYYYMMDDHHMMSS.

\family default
 Milliseconds is not included.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toIso8601() Converts this 
\family typewriter
Time
\family default
 object to a string in the ISO8601 format: 
\family typewriter
YYYYMMDDTHH:MM:SS
\family default
.
 Milliseconds is not included.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Converts this 
\family typewriter
Time
\family default
 object to a string using the date format specified in 
\family typewriter
Settings.dateFormat
\family default
.
\end_layout

\begin_layout Section
CharacterConvert
\end_layout

\begin_layout Standard
This class is used to correctly handle international character conversions.
 The default character scheme converter is the 8859-1 (ISO Latin 1).
 If you want to use a different one, you must extend this class, implementing
 the 
\family typewriter
bytes2chars()
\family default
 and 
\family typewriter
chars2bytes()
\family default
 methods, and then assign the public member of 
\family typewriter
Convert.charConverter
\family default
 to use your class instead of this default one.
 You can also use the method 
\family typewriter
Convert.setDefaultConverter()
\family default
 to change it, passing, as parameter, the prefix of your 
\family typewriter
CharacterConverter
\family default
 class (better look at the implementation to know what to pass on).
\end_layout

\begin_layout Standard
To find out which 
\family typewriter
sun.io.CharacterEncoder
\family default
 you're using on JDK to implement an equivalent version for TotalCross,
 use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

System.out.println("" + sun.io.ByteToCharConverter.getDefault());
\end_layout

\end_inset


\end_layout

\begin_layout Section
UTF8CharacterConvert
\end_layout

\begin_layout Standard
This class extends the 
\family typewriter
CharacterConvert
\family default
 class, and implements the UTF8 byte to UCS-2 character conversion.
 To use this class, you can call:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Convert.setDefaultConverter("UTF8");
\end_layout

\end_inset


\end_layout

\begin_layout Section
Convert
\end_layout

\begin_layout Standard

\family typewriter
Convert
\family default
 basically provides methods that allows object and basic type conversion.
 Furthermore, it also provides handy methods for common operations that
 should be used for a better performance.
\end_layout

\begin_layout Standard
This class is final and cannot be instantiated – its methods and fields
 are static.
\end_layout

\begin_layout Standard
To give you a better view of this class, its documentation was split into
 sub-sections:
\end_layout

\begin_layout Subsection
Changing the default character converter
\end_layout

\begin_layout Standard
The field 
\family typewriter
charConverter
\family default
 keeps a reference to a character converter that will be used by default.
 You may change it by setting another character converter of your choice.
\end_layout

\begin_layout Standard
You may also use the method 
\family typewriter
setDefaultConverter(String name)
\family default
, which searches for a character converter by its name, and makes it the
 default by changing the 
\family typewriter
charConverter
\family default
 field.
\end_layout

\begin_layout Subsection
Conversion between String and basic types
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toDouble(String
\begin_inset space ~
\end_inset

s) Converts the given string to 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toInt(String
\begin_inset space ~
\end_inset

s) Converts the given string to 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toLong(String
\begin_inset space ~
\end_inset

s) Converts the given string to 
\family typewriter
long
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toLong(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix) Converts the given string to 
\family typewriter
long
\family default
 in the given radix, which must be between 2 and 16.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(boolean
\begin_inset space ~
\end_inset

b) Converts the given boolean to a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(char
\begin_inset space ~
\end_inset

c) Converts the given 
\family typewriter
char
\family default
 to a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(double
\begin_inset space ~
\end_inset

d) Converts the given 
\family typewriter
double
\family default
 to a string, formatted in scientific notation.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(double
\begin_inset space ~
\end_inset

val,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

decimalCount) Converts the given 
\family typewriter
double
\family default
 to a string, formatted with the given number of decimal places.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(int
\begin_inset space ~
\end_inset

i) Converts the given 
\family typewriter
int
\family default
 to a string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(long
\begin_inset space ~
\end_inset

l) Converts the given 
\family typewriter
long
\family default
 to a string using base 10.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix) Converts the given 
\family typewriter
long
\family default
 to a string in the given radix, which must be between 2 and 16.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString(String
\begin_inset space ~
\end_inset

doubleValue,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n) Formats the given string as a 
\family typewriter
double
\family default
, rounding with 
\family typewriter
n
\family default
 decimal places.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
unsigned2hex(int
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

places) Converts the given unsigned integer to hexadecimal using the given
 number of places (up to 8).
\end_layout

\begin_layout Subsection
Character, String and StringBuffer utilities
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appendPath(String
\begin_inset space ~
\end_inset

path1,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

path2) Concatenates two strings, ensuring there's a single slash between
 them.
 Removes extra slashes or backslashes if necessary.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
digitOf(char
\begin_inset space ~
\end_inset

ch,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix) Returns the value of the digit stored as 
\family typewriter
char
\family default
 in the specified radix, which must be between 2 and 16.
 This method only handles the standard ASCII table.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dup(char
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Returns a string filled with the given 
\family typewriter
char
\family default
 and size equals to 
\family typewriter
count
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
forDigit(int
\begin_inset space ~
\end_inset

digit,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix) Returns the given digit in the specified radix, which must be between
 2 and 16.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBreakPos(FontMetrics
\begin_inset space ~
\end_inset

fm,StringBuffer
\begin_inset space ~
\end_inset

sb,int
\begin_inset space ~
\end_inset

start,int
\begin_inset space ~
\end_inset

width,boolean
\begin_inset space ~
\end_inset

doWordWrap) Finds the best position to break the line with the given width,
 respecting word-wrap option and line endings (
\family typewriter

\backslash
n
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode(StringBuffer
\begin_inset space ~
\end_inset

sb) Returns the hash code of the string stored by this 
\family typewriter
StringBuffer
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The class 
\family typewriter
StringBuffer
\family default
 does not have a method that returns its hash code, so you would have to
 first create a 
\family typewriter
String
\family default
 from the 
\family typewriter
StringBuffer
\family default
 to get its hash code, like this:
\end_layout

\begin_layout Plain Layout

\family typewriter
int hashCode = sb.toString.hashCode();
\end_layout

\begin_layout Plain Layout

\family typewriter
Convert.hashCode()
\family default
 calculates the
\family typewriter
 StringBuffer
\family default
's hash code directly, without using an intermediary 
\family typewriter
String
\family default
 object, resulting in better performance and memory usage.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
insertAt(StringBuffer
\begin_inset space ~
\end_inset

sb,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

pos,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

c) Inserts the given 
\family typewriter
char
\family default
 at the specified position in the 
\family typewriter
StringBuffer
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
insertLineBreak(int
\begin_inset space ~
\end_inset

maxWidth,
\begin_inset space ~
\end_inset

FontMetrics
\begin_inset space ~
\end_inset

fm,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text) Returns a new string which is a copy of the given text with line breaks,
 placed based on the 
\family typewriter
maxWidth
\family default
 and 
\family typewriter
fm
\family default
 arguments.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Very useful method to help you keep your application's interface cross-platform.
 It can be used to insert line breaks on strings passed to message boxes
 or list boxes.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
numberOf(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

c) Returns the number of occurrences of the specified 
\family typewriter
char
\family default
 in the given string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
replace(String
\begin_inset space ~
\end_inset

source,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

from,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

to) Searches the string source for occurrences of the string 
\family typewriter
from
\family default
, replacing them by the string 
\family typewriter
to
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tokenizeString(String
\begin_inset space ~
\end_inset

input,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

delim) Tokenizes the given string using the given char as separator.
 The return is a string array with size equal to the number of tokens.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tokenizeString(String
\begin_inset space ~
\end_inset

input,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

delim) Same as the above, but uses a 
\family typewriter
String
\family default
 instead of a 
\family typewriter
char
\family default
 as separator.
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never use this method with 1 character length strings, like:
\end_layout

\begin_layout Plain Layout

\family typewriter
String[] tokens = Convert.tokenizeString(input, 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

);
\end_layout

\begin_layout Plain Layout
Use the previous method instead for better performance:
\end_layout

\begin_layout Plain Layout

\family typewriter
String[] tokens = Convert.tokenizeString(input, '#');
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
toLowerCase(char
\begin_inset space ~
\end_inset

c) Converts the given 
\family typewriter
char
\family default
 to lower case.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toUpperCase(char
\begin_inset space ~
\end_inset

c) Converts the given 
\family typewriter
char
\family default
 to upper case.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
zeroPad(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size) Pads the string, adding zeros at left.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
zeroUnpad(String
\begin_inset space ~
\end_inset

s) Removes left zeros of the string.
\end_layout

\begin_layout Subsection
Arrays
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cloneStringArray(String[]
\begin_inset space ~
\end_inset

strs) Returns a copy of the given string array.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toStringArray(Object[]
\begin_inset space ~
\end_inset

objs) Converts the given object array into a string array, by calling 
\family typewriter
toString()
\family default
 for each object.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
detectSortType(Object
\begin_inset space ~
\end_inset

item) Returns the sort type for the given item sample (which is usually
 the first item of an array).
\end_layout

\begin_layout Standard
Convert provides the quick sort algorithm for array sorting.
\end_layout

\begin_layout Subsubsection*
Constants
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_AUTODETECT
\family default
 Chooses between one of the sort types below based on the first element
 of the array.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_OBJECT
\family default
 The objects are compared by their string representation.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_STRING
\family default
 The array contains 
\family typewriter
String
\family default
 objects, and the sort is case sensitive.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_INT
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents integer values.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_DOUBLE
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents double values.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_DATE
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents a 
\family typewriter
Date
\family default
 object with day, month and year.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_COMPARABLE
\family default
 The array contain comparable objects (objects that implements the 
\family typewriter

\begin_inset Newline newline
\end_inset

Comparable
\family default
 interface).
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_STRING_NOCASE
\family default
 The array contains 
\family typewriter
String
\family default
 objects, and the sort is case insensitive, which is slower than case sensitive
 sorting.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last) Applies the quick sort algorithm to the elements of the given array,
 sorting in ascending order and sort type equals to 
\family typewriter
SORT_AUTODETECT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sortType) Same as the above method, but you can specify the sort type.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sortType,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

ascending) Same as the above, but you can also choose between sorting in
 ascending or descending order.
\end_layout

\begin_layout Subsection
Other Conversions
\end_layout

\begin_layout FieldList
\labelwidthstring 0
chars2int(String
\begin_inset space ~
\end_inset

fourChars) Converts a creator id or type to 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
int2chars(int
\begin_inset space ~
\end_inset

i) Converts an 
\family typewriter
int
\family default
 to a creator id or type.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
doubleToIntBits(double
\begin_inset space ~
\end_inset

f) Converts the given double to its bit representation in IEEE 754 format,
 using 4 bytes instead of 8 (a conversion to 
\family typewriter
float
\family default
 is applied).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
intBitsToDouble(int
\begin_inset space ~
\end_inset

i) Converts the given IEEE 754 bit representation of a 
\family typewriter
float
\family default
 to a 
\family typewriter
double
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
doubleToLongBits(double
\begin_inset space ~
\end_inset

value) Returns a representation of the specified floating-point value according
 to the IEEE 754 floating-point "double format" bit layout.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
longBitsToDouble(long
\begin_inset space ~
\end_inset

bits) Converts the given bit representation to a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
rol(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bits) Does a 
\family typewriter
rol
\family default
 of 
\family typewriter
n
\family default
 bits in the given 
\family typewriter
long
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
< bits
\family default
.
 Unlike the shift left operator (
\family typewriter
<<
\family default
), bits that would have been lost are reinserted in order at the right.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ror(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bits) Does a 
\family typewriter
ror
\family default
 of 
\family typewriter
n
\family default
 bits in the given 
\family typewriter
long
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
< bits
\family default
.
 Unlike the shift right operator (
\family typewriter
>>
\family default
), bits that would have been lost are reinserted in order at the left.
\end_layout

\begin_layout Section
Settings
\end_layout

\begin_layout Standard
This class provides some preferences from the device configuration and other
 VM settings.
 All settings are read-only, unless otherwise specified.
 Changing their values may cause the VM to crash.
 
\end_layout

\begin_layout Standard

\family typewriter
Settings
\family default
 has the following fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
version Field that represents the version of the TotalCross Virtual Machine.
 The major version is base 100.
 For example, version 1.0 has value 100.
 version 4 has a version value of 400.
 A beta 0.81 VM will have version 81.
 ex: TotalCross = 110 (1.1) and beyond.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
versionStr Field that represents the version in a string form, like "1.36beta".
\end_layout

\begin_layout FieldList
\labelwidthstring 0
buildNumber The current build number.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dateFormat Can be one of the following constants: 
\family typewriter
DATE_MDY
\family default
, 
\family typewriter
DATE_DMY
\family default
, 
\family typewriter
DATE_YMD
\family default
; where D stands for Day, M stands for month, and Y stands for year.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dateSeparator The date character separator.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
weekStart The week day start.
 It ranges from 0 (Sunday) to 6 (Saturday).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
is24Hour 
\family typewriter
true
\family default
 if the time format is the 24 hour format or 
\family typewriter
false
\family default
 if it is in the AM/PM format.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeSeparator The time character separator.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
thousandsSeparator The thousands separator for numbers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
decimalSeparator The decimal separator for numbers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenWidth Field that represents the device's screen width.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenHeight Field that represents the device's screen height.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenWidthInDPI Field that represents the device's screen horizontal pixels
 density, in dots per inch (DPI).
 Note that this value can be incorrect in many devices.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenHeightInDPI Field that represents the device's screen vertical pixels
 density, in dots per inch (DPI).
 Note that this value can be incorrect in many devices.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
screenBPP Field that represents the screen's number of bits per pixel.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
onJavaSE Field that defines if running on Java Standard Edition (i.
 e., on Eclipse, Java in your desktop, or even on an applet in a browser)
 instead of a handheld device.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
romVersion Field that stores the ROM version of the device, like 0x02000000
 or 0x03010000.
 On the desktop, stores the oldest version of the destination platform where
 TotalCross can run.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
platform Field that returns the current platform name.
 The possible values are: 
\family typewriter
JAVA
\family default
, 
\family typewriter
PALMOS
\family default
, 
\family typewriter
WINDOWSCE
\family default
, 
\family typewriter
POCKETPC
\family default
, 
\family typewriter
WINDOWSMOBILE
\family default
, 
\family typewriter
WIN32
\family default
, 
\family typewriter
IPAD
\family default
, 
\family typewriter
LINUX
\family default
, 
\family typewriter
IPHONE
\family default
, 
\family typewriter
BLACKBERRY
\family default
, and 
\family typewriter
ANDROID
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
userName Field that returns the username of the user running the Virtual
 Machine.
 Because of Java's security model, this field is 
\family typewriter
null
\family default
 when checked in a Java applet.
 This field is also 
\family typewriter
null
\family default
 under most Windows CE devices.
 On Windows 32, this has the currently logged in user.
 On Android, iOS, Palm OS, and BlackBerry, it is also 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appSettingsBin Application defined settings, stored as a byte array.
 If you set the value of this field to something other than 
\family typewriter
null
\family default
, the VM will save it when exiting and load it when restarting.
 On Palm OS, the value is stored in the unsaved preferences database, which
 is not backed up during hot-sync.
 On the desktop, a file named 
\family typewriter
settings4<application id>.pdb
\family default
 stores the 
\family typewriter
appSettingsBin
\family default
 for the current running TotalCross program.
 On Windows 32 and Windows CE, this data is saved in the registry.
 Use this to save small amount of data, up to 2 or 4 kb maximum.
 This property is saved only at the application's exit; you can force an
 update by calling 
\family typewriter
Settings.refresh()
\family default
.
 Here's a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (Settings.appSettingsBin == null})
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	add(new Label("empty"),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	ByteArrayStream bas = new ByteArrayStream(100);
\end_layout

\begin_layout Plain Layout

	DataStream ds = new DataStream(bas);
\end_layout

\begin_layout Plain Layout

	ds.writeDouble(1234.567);
\end_layout

\begin_layout Plain Layout

	Settings.appSettingsBin = bas.getCopy();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ByteArrayStream bas = new ByteArrayStream(Settings.appSettingsBin);
\end_layout

\begin_layout Plain Layout

	DataStream ds = new DataStream(bas);
\end_layout

\begin_layout Plain Layout

	double d = ds.readDouble();
\end_layout

\begin_layout Plain Layout

	add(new Label("d = "+Convert.toString(d,3)),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	Settings.appSettingsBin = null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
appSettings Application defined settings.
 If you set the value of this field to something other than 
\family typewriter
null
\family default
, the VM will save it when exiting and load it when restarting.
 This is stored in the same way as the previous property.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appSecretKey Application defined secret key.
 Similar to the above property.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
applicationId The application's ID.
 MUST BE CHANGED IN THE STATIC INITIALIZER! Used by the deployer and by
 the virtual machine.
 On Palm OS, all data created is assigned to an application id.
 So when a program is uninstalled, all of its data is also removed from
 device.
 On Android, when the single package option is passed to 
\family typewriter
tc.Deploy
\family default
 (
\family typewriter
/p
\family default
), the application's package is changed to 
\family typewriter
totalcross.app<application id>
\family default
.
 On BlackBerry, it is used to define the folder where the application is
 stored.
 It must have 4 letters or digits, and the first character must be a letter.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
uiStyle Field that stores the current user interface style.
 It must be set by calling 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

setUIStyle()
\family default
.
 The values can be 
\family typewriter
PalmOS
\family default
, 
\family typewriter
WinCE
\family default
, 
\family typewriter
Flat
\family default
, 
\family typewriter
Vista
\family default
, and 
\family typewriter
Android
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
daylightSavings Field that represents if the device is in daylight savings
 mode.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeZone Field that represents the timezone used for this device.
 This is the number of hours away from GMT (e.
 g.: for Brazil it will return -3).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
virtualKeyboard 
\family typewriter
true
\family default
 if this handheld has a virtual keyboard, i.
 e., like the soft input panel in windows CE devices.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dataPath Specifies the directory where the files should be read/written.
 Used on the desktop when:
\end_layout

\begin_layout Enumerate
Running under Windows 32 VM.
 Can be specified anywhere.
 
\end_layout

\begin_layout Enumerate
Running under JDK, as application (java.exe).
 Can also be specified with the 
\family typewriter
/dataPath 
\family default
commandline parameter.
 
\end_layout

\begin_layout Standard
Some warnings: 
\end_layout

\begin_layout Enumerate
If this member is not 
\family typewriter
null
\family default
, any paths specified for the file are replaced by this path.
\end_layout

\begin_layout Enumerate
Slashes are normalized by the VM.
\end_layout

\begin_layout Enumerate
The path existence is not verified on Windows 32.
\end_layout

\begin_layout Enumerate
Changing this member also changes the place where local libraries are loaded
 (global libraries are loaded when the VM starts, before the application
 is initialized).
 So, before loading any library, change this member back to 
\family typewriter
null
\family default
 (unless the library is also in the 
\family typewriter
dataPath
\family default
).
 
\end_layout

\begin_layout Enumerate
The system ensures that the datapath ends with a slash, if you don't put
 one.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
romSerialNumber Field that represents the ROM serial number for this device.
 
\begin_inset Newline newline
\end_inset


\series bold
Important
\series default
: don't rely only on this information to uniquely identify a device! Its
 very easy to change this number, and it won't be available in all devices.
 It will contain 
\family typewriter
null
\family default
 if unavailable, such as some Palm OS 5 devices, like Treo 6xx.
 
\begin_inset Newline newline
\end_inset


\series bold
Note
\series default
: this was correctly tested; you can ensure that your Palm OS device has
 or not a serial number pressing App/Info/Version: the serial number will
 appear in the top; if nothing appears, it means that the device doesn't
 have a serial number.
 If it appears but nothing is returned from here, it means that the device
 has a non-standard function that retrieves the serial number, and thus
 we don't support it.
 On Android 3.0 or greater it will have the serial number; On Androids 1.x
 and 2.x it will have a consistent number that MAY be the same across resets,
 but has no relation to the real serial number.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showSecrets Field that represents if the PDA has a password and the user
 choosen to hide the secret records (via the Apps/Security/Current Privacy).
 Returns 
\family typewriter
true
\family default
 in all other cases.
 Specific for Palm OS (the other devices do not let the user hide records).
 This can be used to let the operating system do the login for a program
 that requires privacy.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keypadOnly Field that represents if this device has a keypad only (old BlackBerr
y devices only).
 On such devices, presses in the 1-9 and *# pops up the 
\family typewriter
Keypad
\family default
 class (used in phones without alpha keys).
 You can set 
\family typewriter
keypadOnly
\family default
 to enable/disable the the 
\family typewriter
Keypad
\family default
 popup.
 The disabling occurs everytime a non-digit is pressed.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
keyboardFocusTraversable Defines if the arrow keys will be used to change
 the focus using the keyboard.
 Note that some controls will behave differently.
 It will be 
\family typewriter
true
\family default
 for pen less devices, and it may be changed if your application wants to
 use navigation keys to change the focus between the controls.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deviceId Field that represents a device id that can be used to identify
 the device's name.
 For Palm OS devices, see: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.mobilegeographics.com/dev/devices.php"

\end_inset

 and 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://homepage.mac.com/alvinmok/palm/codenames.html"

\end_inset

.
 For Windows CE devices, it will have the device's name.
 For Windows 32 VM, it will have the computer name.
 On iOS devices it will have the model identifier.
 If the device can't be identified, it will contain 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vmPath The main path used to derive 
\family typewriter
appPath
\family default
 and also to store TotalCross global files.
 This is a read-only property: changing it will have no effect.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appPath The path from where the application is running from.
 On Palm OS devices, it will be 
\family typewriter
null
\family default
.
 This is the default location where the files are created.
 This is a read-only property: changing it will have no effect.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
closeButtonType Set it at the application's static initializer.
 If set to 
\family typewriter
MINIMIZE_BUTTON
\family default
, replaces the ok button on Windows CE devices, which closes the application,
 by the x one, which just minimizes the application.
 The ok closes the application, and the x minimizes it.
 By default, it is 
\family typewriter
CLOSE_BUTTON
\family default
, which closes the application.
 On BlackBerry, if this is set to 
\family typewriter
CLOSE_BUTTON
\family default
, the application is closed when the END key is pressed; otherwise, it is
 sent to background (minimized).
 The default behavior is sending the application to background (set to 
\family typewriter
MINIMIZE_BUTTON
\family default
).
 It cans also be 
\family typewriter
NO_BUTTON
\family default
, which will remove the x/ok button from screen on Windows CE devices.
 On Windows 32, the x button will still be visible, but clicking on it will
 not close the application.
 If the device does not support removing the button, it will change to a
 
\family typewriter
MINIMIZE_BUTTON
\family default
, which is the default on CE devices.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isFullScreen Set it at the application's static initializer.
 Makes the application full screen.
 Only a simple assignment to 
\family typewriter
true
\family default
 is supported; you cannot check the platform nor any other attribute of
 this class because the static initializer is called BEFORE this class has
 its fields set.
 Also, some platforms set it at deploying time.
 Note that Android applications are always full screen.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fullScreenPlatforms Set this to a list of platforms that will set the fullscreen
 mode.
 If this member is 
\family typewriter
null
\family default
, all platforms will have full screen set to the 
\family typewriter
isFullScreen
\family default
 member.
 You can use any separator.
 The only platform that does not work with this is Java.
 You must provide a string like the one above, concatenating the platform
 strings in a single line.
 Using a 
\family typewriter
StringBuffer
\family default
 or anything else may result in incorrect results.
 Here's a sample, to use full screen on Windows devices (but not Windows
 desktop): 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Settings.isFullScreen = true;
\end_layout

\begin_layout Plain Layout

	Settings.fullScreenPlatforms = Settings.WINDOWSCE + "," + Settings.WINDOWSMOBILE;
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
appVersion Set it at the application's static initializer.
 Defines the current application's version, which will be applied to the
 deployed files.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
companyInfo Set it at the application's static initializer.
 Defines the company's information, which is used in some installations.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
companyContact Set it at the application's static initializer.
 Defines the user's or company's contact email, which is used in some installati
ons.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appDescription Set it at the application's static initializer.
 Defines the application's description, which is used in some installations.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appLocation Set it at the application's static initializer.
 Defines the application's location, which is used in some installations.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
appCategory Set it at the application's static initializer.
 Defines the application's category, which is used in some installations.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
activationServerURI Set it at the application's static initializer.
 Specifies a URI to a WebService to be used by the VM activation process.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
activationServerNamespace Set it at the application's static initializer.
 Specifies a namespace for the WebService provided by the user.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showDesktopMessages Set to 
\family typewriter
false
\family default
 to hide all messages that are sent to the console when running on the desktop.
 Note that doing so may hide important messages! Do it with caution.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
nvfsVolume Field that represents the number of the hidden volume (flash
 memory), or -1 if the device does not have it or if its not a Palm OS device.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
imei Field that represents the smartphone IMEI (if this device is a GSM,
 UMTS or IDEN smartphone), or 
\family typewriter
null
\family default
 if there's none.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
esn Field that represents the smartphone ESN (if this device is a CDMA smartphon
e) or 
\family typewriter
null
\family default
 if there's none.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
iccid Field that represents the serial number of the GSM chip or 
\family typewriter
null
\family default
 if there's none.
 Works for Windows Mobile and Android.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
dontCloseApplication If set to 
\family typewriter
true
\family default
, the application will ignore the event "Close application" issued by the
 operating system.
 This is specially useful to avoid that an incoming call exits the application
 on Palm OS.
 You must provide a way to terminate the application by calling the 
\family typewriter
exit()
\family default
 method.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
geographicalFocus When directional keys are used to change focus, the next
 control to receive focus will be determined based on their physical location
 on the screen.
 Also, when 
\family typewriter
geographicalFocus
\family default
 is 
\family typewriter
true
\family default
, the highlight/action key model will not be used.
 Instead, controls will be highlighted and given focus immediately.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
multipleInstances Setting this field to 
\family typewriter
true
\family default
 allows the execution of multiple instances of the same application.
 When the application is started, it first checks if there is a running
 instance of the same application.
 If so, the running instance is moved to the foreground and the starting
 application exits.
 It only works on Java, Windows 32, and Windows CE.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
circularNavigation Set to 
\family typewriter
false
\family default
 to disable the default circular navigation when using the arrows: it will
 stop at the first or the last item.
 It applies to: 
\family typewriter
ListBox
\family default
, 
\family typewriter
MenuBar
\family default
, 
\family typewriter
ComboBoxEditable
\family default
, 
\family typewriter
Grid
\family default
, 
\family typewriter
MenuBarDropDown
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gcCount Number of times that the GC (garbage collector) ran.
 Updated by the VM during the application execution.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gcTime How much time the GC took in all runs.
 Updated by the VM during the application execution.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
chunksCreated Number of memory chunks (blocks of memory that store 
\family typewriter
Object
\family default
s) created.
 Updated by the VM during the application execution.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastInteractionTime Time when the user last interacted with the device using
 the keyboard, pen, trackball, etc.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showMemoryMessagesAtExit Set this flag to 
\family typewriter
false
\family default
 (default is 
\family typewriter
true
\family default
) to don't display the memory errors when the program exits.
 It is highly recommended that you keep this flag on while debugging your
 programs, but you may not want to let it on when deploying your application
 to your costumers.
 Note that the log messages will still be dumped to the console.
 The possible errors are: 
\end_layout

\begin_layout Itemize
Memory error: out of memory when allocating.
 Usually an 
\family typewriter
OutOfMemoryError
\family default
 will be also thrown.
\end_layout

\begin_layout Itemize
Memory leak: memory was not freed properly.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showMousePosition Shows the mouse position in the Window's title when running
 as a Java application.
 This greatly helps the creation of 
\family typewriter
UIRobot
\family default
's user interface unit tests (using absolute coordinates to simulate the
 events).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deviceRobotSpecialKey Makes the generation of user interface tests much
 easier by using the built-in User Interface Robot.
 To enable it on the device, you must assign a special key that will open
 the interface.
 To enable it on the desktop (Java), you must press control+1.
 For example, if you want to set the 
\family typewriter
SpecialKeys.FIND
\family default
 to be the one that will open the 
\family typewriter
UIRobot
\family default
, do: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.interceptSpecialKeys(new int[]{SpecialKeys.FIND});
\end_layout

\begin_layout Plain Layout

Settings.deviceRobotSpecialKey = SpecialKeys.FIND; 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
showDebugTimestamp Set to 
\family typewriter
false
\family default
 to don't display the timestamp before each 
\family typewriter
Vm.debug()
\family default
 output.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
timeZoneStr Textual description of the time zone currently used by the device.
 This value is completely platform dependent, and may be localized for the
 platform current settings.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fingerTouch Defines platforms that the touchscreen is used MOSTLY with the
 finger.
 We say mostly because there are special pens that can be used with iPhone;
 however, we consider this an exception, not the rule.
 Currently this value is 
\family typewriter
true
\family default
 for iPhone and Android platforms, and the BlackBerry Storm.
 
\begin_inset Newline newline
\end_inset

When 
\family typewriter
fingerTouch
\family default
 is 
\family typewriter
true
\family default
, all controls that can scroll, like 
\family typewriter
ListBox
\family default
, 
\family typewriter
Grid
\family default
,
\begin_inset Newline newline
\end_inset


\family typewriter
ScrollContainer
\family default
, 
\family typewriter
MultiEdit
\family default
, etc, will have the flick and drag enabled and the 
\family typewriter
ScrollBar
\family default
 will be replaced by 
\family typewriter
ScrollPosition
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
touchTolerance Defines a touch tolerance to find the closest control.
 Used in 
\family typewriter
fingerTouch
\family default
 devices.
 You can disable it setting this property to 0.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fadeOtherWindows Default 
\family typewriter
fadeOtherWindows
\family default
 value used in the 
\family typewriter
totalcross.ui.dialog
\family default
 windows.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
enableWindowTransitionEffects Set to 
\family typewriter
true
\family default
 to enable the transition effects when a window is shown and hidden.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
debugEvents Set to 
\family typewriter
true
\family default
 to debug all events that are received at 
\family typewriter
Window._postEvent()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
activationId READ-ONLY unique identifier available for registered applications
 after the TotalCross VM is activated.
 Value defaults to "NOT AVAILABLE" when running on DEMO.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vibrateMessageBox Set to 
\family typewriter
true
\family default
 to enable the vibration when a 
\family typewriter
MessageBox
\family default
 appears on screen (only on device).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
disableScreenRotation Set to 
\family typewriter
true
\family default
 to disable screen rotation.
 Works only on Java.
 If you need this feature on the device, override the 
\family typewriter
screenResized()
\family default
 method in your 
\family typewriter
MainWindow
\family default
 and add something like: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void screenResized()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (Settings.isLandscape())
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// make sure that the MessageBox takes the whole screen
\end_layout

\begin_layout Plain Layout

		MessageBox mb = new MessageBox("Attention","This program must be run in
 portrait mode.
\backslash
nPlease rotate the device.",null)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			public void setRect(int x, int y, int w, int h)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				super.setRect(x,y,Settings.screenWidth,Settings.screenHeight);
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

		mb.transitionEffect = TRANSITION_NONE;
\end_layout

\begin_layout Plain Layout

		mb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

		while (Settings.isLandscape())
\end_layout

\begin_layout Plain Layout

			pumpEvents();
\end_layout

\begin_layout Plain Layout

		mb.unpop();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		super.screenResized();
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
unmovableSIP Set to 
\family typewriter
true
\family default
 to move an 
\family typewriter
Edit
\family default
 or 
\family typewriter
MultiEdit
\family default
 to the top of the screen if the application is running on a platform that
 does not support moving the Soft Input Panel to the top.
 Otherwise, the SIP (Soft Input Panel) will be placed on top of the 
\family typewriter
Edit
\family default
.
 You must set this in the 
\family typewriter
MainWindow
\family default
's constructor, never in the static block.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deviceFontHeight The size in pixels of the device's system font.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
moveCursorToEndOnFocus Set to 
\family typewriter
true
\family default
 to put the cursor at the end of the 
\family typewriter
Edit
\family default
 and 
\family typewriter
MultiEdit
\family default
 when focus was set to the control (default is at the start).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SIPBottomLimit The limit that will make the Soft Input Panel be placed at
 bottom.
 If the control's absolute rect is < this value, the SIP will stay at the
 bottom of the screen (otherwise, it will be moved to the top).
 Before TotalCross 1.3, this value used to be the half of the screen, but
 since in some new Windows Mobile the SIP is very tall (specially in landscape
 mode), we added this field so you can change it if desired.
 For example, to set to 5 times the font's height, do: 
\family typewriter
Settings.SIPBottomLimit = 5 * fmH;
\family default
 Setting it to -1 (default value) will use half the current screen height.
 This field is used in Windows CE devices only.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
uiAdjustmentsBasedOnFontHeight Set to 
\family typewriter
true
\family default
 to make the extra adjustment values used in the relative positioning be
 a percentage of the control's font height.
 In modern devices, a single pixel can have different sizes in inches (or,
 in other words, the devices have different screen densities).
 So, something like 
\family typewriter
PREFERRED+4
\family default
 in a 320x480 device with 160 DPI (DIPS PER INCH - or pixels per inch) will
 have the half size of a device with the same resolution but 320 DPI.
 Since the font sizes change according to the DPI and not the resolution,
 its good to change the relative positioning to use a percentage of the
 font's height instead of absolute pixels.
 By setting this flag to true will make the adjustment a PERCENTAGE of the
 font's height.
 So, you can use something like 
\family typewriter
PREFERRED+50
\family default
 (50% of font's height), 
\family typewriter
SAME+150
\family default
 (150% of font's height), and so on.
 It is possible to disable the adjustment for a single 
\family typewriter
Control
\family default
, 
\family typewriter
Container
\family default
, or 
\family typewriter
Window
\family default
, using 
\family typewriter
Control.
 uiAdjustmentsBasedOnFontHeightIsSupported
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
useNewFont Change to 
\family typewriter
true
\family default
 to use the new font added in version 1.3.
 The main difference between the old and the new fonts is that the new one
 was generated INSIDE an Android emulator, thus, it uses the Android's True
 Type Font engine, which is far better than the Java's engine, used to generate
 the old font.
 Thus, the new font has a better appearance, and its also a bit smaller
 than the old font (the new height is about 2 below the old height, so if
 you used 20 for the old font, you should use 22 for the new one).
 To have your application's font optimzed for all platforms, start by using
 the new font.
 Android's default font size is computed based on the new font.
 Using the old font on Android will result in less-than optimal results
 on Android devices.
 The standard VM installation files includes both new and old font files.
 However, if you use the 
\family typewriter
tc.Deploy
\family default
 option that generates a single package (
\family typewriter
/p
\family default
), only the choosen font will be packaged.
 You must change this property at the application's static initializer.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

static
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Settings.useNewFont = true;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
sendPressEventOnChange Set to 
\family typewriter
true
\family default
 to post a 
\family typewriter
PRESSED
\family default
 event when an item is programatically selected or changed.
 Works with the following controls: 
\family typewriter
Edit
\family default
, 
\family typewriter
MultiEdit
\family default
, 
\family typewriter
Check
\family default
, 
\family typewriter
Radio
\family default
, 
\family typewriter
ComboBox
\family default
, 
\family typewriter
ListBox
\family default
, 
\family typewriter
SpinList
\family default
.
 Usually this event only occurs when the user selects an item, not when
 you call 
\family typewriter
setSelectedItem
\family default
/
\family typewriter
Index()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
resizableWindow Set to 
\family typewriter
true
\family default
 to make the program's window resizable on Windows and desktop.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
windowSize Defines the window size when running on a desktop computer (the
 default is 240x320).
 Must be set in the static initializer.
 If used, the window will be centered on screen with the given resolution.
 It can have the values: 
\family typewriter
WINDOWSIZE_320X480
\family default
, 
\family typewriter
WINDOWSIZE_480X640
\family default
, and 
\family typewriter
WINDOWSIZE_600X800
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
windowFont Defines the window font size when running on a desktop computer.
 Must be set in the static initializer.
\end_layout

\begin_layout Standard
This class just have a few methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isWindowsDevice() Returns 
\family typewriter
true
\family default
 if the current platform is Windows Mobile or Pocket PC.
 Note that Windows Desktop (aka WIN32) returns 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isIOS() Returns 
\family typewriter
true
\family default
 if this is an iPad or an iPhone.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
refresh() Refresh some fields that may have been updated since the program
 started.
 The currently refreshed fields are: 
\family typewriter
daylightSavings
\family default
, 
\family typewriter
timeZone
\family default
, and 
\family typewriter
timeZoneStr
\family default
.
 Also saves the 
\family typewriter
appSettings
\family default
 properties, which otherwise is saved only at program's end.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isLandscape() Returns 
\family typewriter
true
\family default
 if the device is currently in landscale (
\family typewriter
screenWidth > screenHeight
\family default
).
 
\end_layout

\begin_layout Section
Vm
\end_layout

\begin_layout Standard

\family typewriter
Vm
\family default
 contains various system-level methods.
 This class contains methods to copy arrays, obtain a timestamp, sleep,
 and get platform and version information, among many other things.
 
\end_layout

\begin_layout Standard
It has the following field:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
disableDebug Set to 
\family typewriter
true
\family default
 to disable 
\family typewriter
Vm.debug()
\family default
 message output.
 Note that the method calls will still remain, and can slowdown your program.
 Note also that 
\family typewriter
Vm.warning()
\family default
 is not affected by this flag.
\end_layout

\begin_layout Standard
The methods are described below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
arrayCopy(Object
\begin_inset space ~
\end_inset

srcArray,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

srcStart,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

dstArray,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

dstStart,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length) Copies the elements of one array (
\family typewriter
srcArray
\family default
) to another array (
\family typewriter
dstArray
\family default
).
 This method returns 
\family typewriter
true
\family default
 if the copy is successful.
 It will return 
\family typewriter
false
\family default
 if either array is 
\family typewriter
null
\family default
 or 
\family typewriter
length
\family default
 is less than zero.
 If the 
\family typewriter
length
\family default
 parameter would cause the copy to read or write past the end of one of
 the arrays, an index out of range error will occur.
 If 
\family typewriter
false
\family default
 is returned then no copying has been performed.
 
\family typewriter
srcStart
\family default
 is the the starting position in the source array and 
\family typewriter
dstStart
\family default
 is the the starting position in the destination array.
 It throws an 
\family typewriter
ArrayStoreException
\family default
 if the source and destination array are not compatible.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTimeStamp() Returns a time stamp in milliseconds.
 The time stamp is the time in milliseconds since the program started.
 The maximum time stamp value is (1 << 30) which represents near 14 days
 of continuous use, and when it is reached, the timer will reset to 0 and
 will continue counting from there.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTime(Time
\begin_inset space ~
\end_inset

t) Sets the device time to the given arguments.
 Note that in some systems, the millis field is ignored.
 Some devices require that you add 
\family typewriter
Settings.timeZone
\family default
.
 Does not work on Android, which does not allow to do this programatically.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
exitAndReboot() Reboots the device.
 This is the equivalent of a warm boot (or soft reset).
 Calling this method terminates the program, closes all open files, calls
 
\family typewriter
MainWindow.onExit()
\family default
 and, finaly, resets the device.
 The implementation on JDK just exits the program: there's no reboot at
 all.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
exec(String
\begin_inset space ~
\end_inset

command,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

args,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

launchCode,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

wait) Executes a command.
 
\begin_inset Newline newline
\end_inset

As an example, the following call could be used to run the command 
\family typewriter
scandir /p mydir
\family default
 on Java, Windows 32, or Windows CE: 
\family typewriter

\begin_inset Newline newline
\end_inset

int result = Vm.exec("scandir", "/p mydir", 0, true);
\begin_inset Newline newline
\end_inset


\family default
To install a cab file on Windows Mobile, you can use:
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("wceload.exe", fullPathToCabFile, 0, true);
\begin_inset Newline newline
\end_inset


\family default
However, trying to update the program itself or the vm will close the program.
 So, update it at last.
 
\begin_inset Newline newline
\end_inset

This example executes the Scribble program on Palm OS: 
\family typewriter

\begin_inset Newline newline
\end_inset

Vm.exec("Scribble", null, 0, false);
\begin_inset Newline newline
\end_inset


\family default
This example executes the web clipper program on Palm OS, telling it to
 display a web page by using 
\family typewriter
launchCode
\family default
 54 (
\family typewriter
CmdGoToURL
\family default
):
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("Clipper", "http://www.yahoo.com", 54, true);
\begin_inset Newline newline
\end_inset


\family default
The 
\family typewriter
args
\family default
 parameter passed to this method is the arguments string to pass to the
 program being executed.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
launchCode
\family default
 parameter is only used on Palm OS.
 On Palm OS, it is the launch code value to use when the VM calls 
\family typewriter
SysUIAppSwitch()
\family default
.
 If 0 is passed, the default launch code (
\family typewriter
CmdNormalLaunch
\family default
) is used to execute the program.
 
\begin_inset Newline newline
\end_inset

The 
\family typewriter
wait
\family default
 parameter passed to this method determines whether to execute the command
 asynchronously.
 If 
\family typewriter
false
\family default
, then the method will return without waiting for the command to complete
 execution.
 If 
\family typewriter
true
\family default
, the method will wait for the program to finish executing and the return
 value of the method will be the value returned from the application on
 all platforms except for Palm OS, wehere only a few headless applications
 can be called with 
\family typewriter
wait
\family default
 being 
\family typewriter
true
\family default
.
 
\begin_inset Newline newline
\end_inset


\series bold
Note
\series default
: this method kills all running threads if the wait parametes is 
\family typewriter
false
\family default
.
 
\begin_inset Newline newline
\end_inset

To run another TotalCross program on Windows CE devices, use: 
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("
\backslash

\backslash
TotalCross
\backslash

\backslash
Path
\backslash

\backslash
Program.exe", null, 0, false);
\family default
 
\begin_inset Newline newline
\end_inset

Here's a sample of how to run the Internet Explorer on Windows CE:
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("
\backslash

\backslash
windows
\backslash

\backslash
iexplore.exe","about:blank",0,false);
\begin_inset Newline newline
\end_inset


\family default
You cannot pass 
\family typewriter
null
\family default
 nor 
\family typewriter
""
\family default
 in the args, or you'll get error 87.
 IExplore requires a page to open; in this case, we open the blank page.
\begin_inset Newline newline
\end_inset

To run another TotalCross program on Palm OS devices, use: 
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("ProgName", null, 0, false);
\family default
  
\begin_inset Newline newline
\end_inset

In other words, you must call the program's executable.
 Note that on Palm OS, the program's name is the name of the 
\family typewriter
.prc
\family default
 appended by the 
\family typewriter
_
\family default
 character.
 For example, to launch UIGadgets, you must pass 
\family typewriter
UIGadgets_
\family default
 as the command.
\begin_inset Newline newline
\end_inset

When calling a TotalCross program, you can pass a command line parameter
 to the calling application, just placing the parameters in the proper argument.
 It can be retrieved with 
\family typewriter

\begin_inset Newline newline
\end_inset

getCommandLine()
\family default
 method from the 
\family typewriter
MainWindow
\family default
.
 
\begin_inset Newline newline
\end_inset

On some platforms, the caller application must be quit by calling 
\family typewriter
exit()
\family default
.
 
\begin_inset Newline newline
\end_inset

On Windows 2000 and beyond, if you don't pass the full path to the file,
 it is searched in the current PATH environment variable.
 The command must contain only the 
\family typewriter
.exe
\family default
 name, and all the other arguments must be in the 
\family typewriter
args
\family default
 parameter.
 For example, the following code uses the CMD to open a file with the proper
 editor:
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("cmd.exe", "/c start C:
\backslash

\backslash
WINNT
\backslash

\backslash
DirectX.log", 0, false);
\begin_inset Newline newline
\end_inset


\family default
Important notes about path separators:
\begin_inset Newline newline
\end_inset

• We always tell to use / as the path separator.
 
\family typewriter
Vm.exec()
\family default
 must be used differently of the other places, because you don't pass only
 paths in the 
\family typewriter
args
\family default
 parameter, pass other things too.
 So, when you use a path in 
\family typewriter
File
\family default
, we convert the 
\family typewriter
/
\family default
 to the target separator (
\family typewriter

\backslash

\family default
 or 
\family typewriter
/
\family default
), but in 
\family typewriter
Vm.exec()
\family default
 we can't do that, for example, changing 
\family typewriter
/c start
\family default
 to 
\family typewriter

\backslash
c start
\family default
 will make the execution fail.
 So, you'll have to choose the right separator in the parameters.
 
\begin_inset Newline newline
\end_inset

• Make sure that, on Windows, the paths and parameters use 
\family typewriter

\backslash

\backslash

\family default
, not 
\family typewriter
/
\family default
 as path separator, or the command will not run.
 
\begin_inset Newline newline
\end_inset

If you're using 
\family typewriter
/cmd
\family default
 and the command fails, change 
\family typewriter
/c
\family default
 option to 
\family typewriter
/k
\family default
, which will keep the open window instead of closing it, so you can see
 the error cause.
 
\begin_inset Newline newline
\end_inset

On BlackBerry, the command must be a module name.
 For instance, you can open TotalCross programs, just providing its module
 (
\family typewriter
.cod
\family default
) name.
 The command below launchs a URL:
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("net_rim_bb_browser_daemon",
\begin_inset Newline newline
\end_inset

"http://www.google.com/search?hl=en&source=hp&q=abraham+lincoln",0,
\begin_inset Newline newline
\end_inset

true);
\begin_inset Newline newline
\end_inset


\family default
On Android, you can launch an application, an URL at the browser, execute
 a shell command, or install an 
\family typewriter
.apk
\family default
:
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("cmd","logcat -d -f /sdcard/error.log -v time *:I",0,true);
\begin_inset Newline newline
\end_inset


\family default
creates the adb report.
 Useful to get errors.
 Note that you must wait for the file to be created, since the wait parameter
 does not work, like 
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout FieldList
\labelwidthstring 0

File f = new File("/sdcard/error.log");
\end_layout

\begin_layout FieldList
\labelwidthstring 0

while (!f.exists())
\end_layout

\begin_layout FieldList
\labelwidthstring 0

	Vm.sleep(500);
\end_layout

\end_inset


\family typewriter
Vm.exec("url","http://www.google.com/search?hl=en&source=hp&q
\begin_inset Newline newline
\end_inset

=abraham+lincoln",0,true);
\family default

\begin_inset Newline newline
\end_inset

launches a url.
 
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("totalcross.app.uigadgets","UIGadgets",0,false);
\family default

\begin_inset Newline newline
\end_inset

launches another TotalCross' application.
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("com.android.calculator2","Calculator",0,true);
\family default

\begin_inset Newline newline
\end_inset

runs the Calculator program.
\begin_inset Newline newline
\end_inset


\family typewriter
Vm.exec("/sdcard/myapp.apk",null,0,false);
\family default

\begin_inset Newline newline
\end_inset

calls the 
\family typewriter
.apk
\family default
 installation tool.
 To access the card on Android devices, prefix the path with 
\family typewriter
/sdcard
\family default
.
 Be sure that the sdcard is NOT MOUNTED, otherwise your application will
 not have access to it.
\family typewriter

\begin_inset Newline newline
\end_inset

Vm.exec("viewer","file:///sdcard/files/chlorine-bogusInfo.txt", 0,
\begin_inset Newline newline
\end_inset

true);
\family default

\begin_inset Newline newline
\end_inset

uses an internal viewer to show the 
\family typewriter
.txt
\family default
 file to the user (here, stored in the sdcard, but could be anywhere).
 Also accepts HTM(L) and JPG files.
\family typewriter

\begin_inset Newline newline
\end_inset

Vm.exec("viewer","/sdcard/Download/handbook.pdf",0,true);
\family default

\begin_inset Newline newline
\end_inset

opens a 
\family typewriter
.pdf
\family default
.
 Note: you must have a 
\family typewriter
.pdf
\family default
 reader installed; search for the free adobe reader in your favorite store.
\begin_inset Newline newline
\end_inset

To be able to find what's the class name of a program you want to launch,
 install it on the Android Emulator (which is inside the Android SDK) and
 run the Dev Tools / Package Browser.
 Then click on the package, and click in the desired Activities button.
 The command parameter for 
\family typewriter
Vm.exec()
\family default
 is the process description, and the 
\family typewriter
args
\family default
 parameter is the activitie's name.
 Note, however, that there's no guarantee that the program will be available
 in a real device.
\begin_inset Newline newline
\end_inset

On Android, if you're calling a TotalCross program, the wait parameter is
 ignored (and defaults to false).
\begin_inset Newline newline
\end_inset

When calling this method, usually 0 is returned if no error occured, or
 a system error code.
 -999 means that the file was not found.
 On Android, 0 is always returned.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setAutoOff(boolean
\begin_inset space ~
\end_inset

enabled) Enables or disables device automatic turn-off, which happens after
 a period of inactivity of the device.
 If you disable the auto-off, the original auto-off time will be restored
 automatically when the program exits.
 Keeping the device always on is desired only when you're working with sockets.
 Use it carefully, because it drains the battery.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sleep(int
\begin_inset space ~
\end_inset

millis) Causes the VM (or the current thread, if called from it) to pause
 execution for the given number of milliseconds.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
safeSleep(int
\begin_inset space ~
\end_inset

millis) Causes the VM (or the current thread, if called from it) to pause
 execution for aproximately the given number of milliseconds.
 This method does not block the user interface engine, as 
\family typewriter
Vm.sleep()
\family default
 does, since it keeps calling 
\family typewriter
Window.pumpEvents()
\family default
.
 So, if you rotate the screen during a 
\family typewriter
Vm.sleep()
\family default
, the rotation is blocked; but during a 
\family typewriter
Vm.safeSleep()
\family default
, the rotation occurs normally.
 Button presses and other user interface operation also occurs normally
 during this method.
 Obviously, if you call 
\family typewriter
Vm.safeSleep(100)
\family default
 and a screen rotation (or any other event) occurs, this method will take
 to return much more than 100 ms.
 This method only makes sense for sleeps above 500 ms, unless you're calling
 it from a loop (which is reasonable to keep calling it), and should not
 be called from threads.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
vibrate(int
\begin_inset space ~
\end_inset

millis) Vibrates the device for the specified number of milliseconds.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFreeMemory() Returns the free memory on the device.
 Returns a maximum of 2 GB free, even if the device has more than that.
 On Java and Windows 32, the result might be not reasonable after some operation
s because of the virtual memory usage.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
gc() Calls the Garbage Collector.
 Usually, this isn't necessary; the 
\family typewriter
gc()
\family default
 is called everytime there is no more memory to allocate, but you may call
 it before running a memory-consuming routine.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
interceptSpecialKeys(int[]
\begin_inset space ~
\end_inset

keys) Specify which special keys to intercept; use the constants available
 in 
\family typewriter
SpecialKeys
\family default
 or pass device-specific constants, which can be retrieved calling 
\family typewriter
Vm.showKeyCodes(true)
\family default
.
 Note that the HOME key cannot be intercepted on Android due to OS restrictions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isKeyDown(int
\begin_inset space ~
\end_inset

key) Gets the current keys being pressed.
 You must set which keys you want to receive notification with the 
\family typewriter
interceptSpecialKeys()
\family default
 method.
 Note that you can use this method to verify if more than one key is pressed
 at once, just keep pooling with this method to see when a state has changed.
 If you just want to intercept the key with a single press, handle it in
 the 
\family typewriter
onEvent()
\family default
 method, with a 
\family typewriter
KeyEvent
\family default
 event.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
debug(String
\begin_inset space ~
\end_inset

s) Sends a text, followed by a line feed, to: 
\begin_inset Newline newline
\end_inset

• Palm OS: the 
\family typewriter
DebugConsole
\family default
 file in the NVFS volume.
\begin_inset Newline newline
\end_inset

• Windows CE / 32: the 
\family typewriter
DebugConsole.txt
\family default
 file at the current application's folder.
 
\begin_inset Newline newline
\end_inset

• Blackberry: the event logger, which can be accessed using alt+LGLG, and
 
\family typewriter
DebugConsole.txt
\family default
.
\begin_inset Newline newline
\end_inset

• iPhone: the 
\family typewriter
DebugConsole.txt
\family default
 file in the application's folder.
 
\begin_inset Newline newline
\end_inset

• Java SE: the 
\family typewriter
System.err
\family default
 console.
 All strings are preceeded with the current time stamp.
\begin_inset Newline newline
\end_inset

• Android: the 
\family typewriter
DebugConsole.txt
\family default
 or the logging window throught ADB, which can be viewed by calling 
\family typewriter

\backslash
TotalCrossSDK
\backslash
etc
\backslash
tools
\backslash
android
\backslash
debug_console.bat
\family default
.
 The last approach will only show something after passing 
\family typewriter
ALTERNATIVE_DEBUG
\family default
 to this method.
 Otherwise, all debugged strings will go to the file.
\begin_inset Newline newline
\end_inset

You can delete the debug memo/txt file passing the 
\family typewriter
ERASE_DEBUG
\family default
, a constant string declared in this class.
 E.g.: 
\family typewriter
Vm.debug(Vm.ERASE_DEBUG);
\family default
.
 
\begin_inset Newline newline
\end_inset

Note: if you're debugging a string that contains 
\family typewriter

\backslash
0
\family default
 in it, all chars after the first 
\family typewriter

\backslash
0
\family default
 are ignored.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
alert(String
\begin_inset space ~
\end_inset

s) Shows an alert IMMEDIATELY on screen.
 It uses the sytem message box to show the alert, not the 
\family typewriter
MessageBox
\family default
 class.
 Showing an alert from Palm OS threads may reset the device.
 
\begin_inset Newline newline
\end_inset

Note that unicode characters are not displayed on alerts.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
warning(String
\begin_inset space ~
\end_inset

s) This function can be used to show permanent warnings.
 It was created because 
\family typewriter
Vm.debug()
\family default
 is, in theory, just for debugging.
 Some TotalCross classes display warnings to the user, and are not debug
 (i.
 e., temporary) messages.
 It just calls 
\family typewriter
Vm.debug("Warning! "+s)
\family default
, so it differs from it only in a semanthical way.
 
\begin_inset Newline newline
\end_inset

Note: you cannot use this function with 
\family typewriter
ERASE_DEBUG
\family default
; it won't work.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardCopy(String
\begin_inset space ~
\end_inset

s) Copies the specific string to the clipboard.
 Does not work on Android (it has no clipboard).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
clipboardPaste() Gets the last string from the clipboard.
 if none, returns 
\family typewriter
""
\family default
.
 Does not work on Android (it has no clipboard).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFile(String
\begin_inset space ~
\end_inset

name) Returns a byte array of a file contained in the same 
\family typewriter
.tcz
\family default
/
\family typewriter
.pdb
\family default
/
\family typewriter
.apk
\family default
/
\family typewriter
.deb
\family default
/
\family typewriter
.cod
\family default
 where this one resides, or in some attached library (or JAR, if application
 is running in a browser).
 The returned array is a fake pointer; does NOT point directly to the file
 (a new buffer is created to store the contents).
 In this example the TotalCross deployer will insert the 
\family typewriter
.txt
\family default
 file into the program's 
\family typewriter
.tcz
\family default
/
\family typewriter
.pdb
\family default
/
\family typewriter
.apk
\family default
/
\family typewriter
.deb
\family default
/
\family typewriter
.cod
\family default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

byte[] b = Vm.getFile("textfiles/About.txt");
\end_layout

\begin_layout Plain Layout

if (b != null)
\end_layout

\begin_layout Plain Layout

	new MessageBox("About", new String(b, 0, b.length)).popup(); 
\end_layout

\end_inset

The parameter 
\family typewriter
name
\family default
 is the name of the file, exactly as shown by 
\family typewriter
tc.Deploy
\family default
 in the output window.
 On the desktop it is case insensitive, while on the device it is CASE SENSITIVE.
 The method will return 
\family typewriter
null
\family default
 if the file is not found.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRemainingBattery() Returns the percentage of the remaining battery life
 of this device.
 In systems that can have an auxiliary battery, it will return the sum of
 the main and the auxiliary battery, but this sum will always be limited
 to 100%.
 On the desktop, it will always return 100.
 Note that in some OSes, when on the cradle, the returned value may be 100%
 even when charging.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
tweak(int
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

set) Tweak some parameters of the virtual machine.
 Note that these parameters are only available on the device, NOT when running
 as Java.
 Also, the configuration is not persisted: you must set this every time
 you run the program.
 Each tweak must be made separately; they are NOT bit masks.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.tweak(Vm.TWEAK_AUDIBLE_GC,true);
\end_layout

\begin_layout Plain Layout

Vm.tweak(Vm.TWEAK_DUMP_MEM_STATS,true); 
\end_layout

\end_inset

The possible parameters are:
\family typewriter

\begin_inset Newline newline
\end_inset

TWEAK_AUDIBLE_GC
\family default
 Each time the garbage collector runs, it will issue a beep.
\begin_inset Newline newline
\end_inset


\family typewriter
TWEAK_DUMP_MEM_STATS 
\family default
When the program ends, it will dump the memory status of the program with
 the following information: 
\begin_inset Newline newline
\end_inset

• Times 
\family typewriter
gc()
\family default
 was called: number of times the garbage collector was called.
 
\begin_inset Newline newline
\end_inset

• Total GC time: total time in milisseconds that the GC took.
 
\begin_inset Newline newline
\end_inset

• Chunks created: number of chunks (block of memory used to store objects,
 each one with 65500 bytes).
\begin_inset Newline newline
\end_inset

• Max allocated: maximum memory allocated.
\begin_inset Newline newline
\end_inset


\family typewriter
TWEAK_MEM_PROFILER 
\family default
Computes the maximum memory in use between two consecutive calls.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.debug("P Starting profiler for xxxx"); 
\end_layout

\begin_layout Plain Layout

Vm.tweak(Vm.TWEAK_MEM_PROFILER,true); // now run the program during some time
\end_layout

\begin_layout Plain Layout

Vm.tweak(Vm.TWEAK_MEM_PROFILER,false);
\end_layout

\begin_layout Plain Layout

Vm.debug("P Stopping profiler for xxxx"); 
\end_layout

\end_inset

When it starts, it prints the currently used memory.
 When you set it off, it will dump the currently used memory (if different
 of the maximum), and then the maximum memory used between the two calls.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

P Now allocated: 40852408 // printed when turning on
\end_layout

\begin_layout Plain Layout

P Now allocated: 1137060 // printed when turning off
\end_layout

\begin_layout Plain Layout

P Max allocated: 40868844 // printed when turning off
\end_layout

\end_inset

All profiler messages are prefixed with 
\family typewriter
P
\family default
 in the debug console, because it makes easy to filter them.
 
\begin_inset Newline newline
\end_inset


\family typewriter
TWEAK_DISABLE_GC
\family default
 Disables the Garbage Collector.
 This can greatly decrease the time to load some things, but note that you
 must re-enable it later, otherwise, the system will run out of memory quickly.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.tweak(TWEAK_DISABLE_GC,true);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Vm.tweak(TWEAK_DISABLE_GC,false); // the gc is automatically called here
 
\end_layout

\end_inset

The parameter 
\family typewriter
set 
\family default
indicates if the passed parameter is to be set (
\family typewriter
true
\family default
) or unset (
\family typewriter
false
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getStackTrace(Throwable
\begin_inset space ~
\end_inset

t) Returns the given throwable stack trace as a string.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showKeyCodes(boolean
\begin_inset space ~
\end_inset

on) Set to 
\family typewriter
true
\family default
 to popup an alert for each key pressed.
 This is useful for you to discover key codes that may be intercepted with
 
\family typewriter
Vm.interceptSpecialKeys()
\family default
.
 Note that this will probably block the application and you will have to
 provide a button to exit from it or just reset the device.
 
\begin_inset Newline newline
\end_inset

On Windows CE, the key 91 is always displayed when a hotkey is pressed,
 so the VM will silently ignore it.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
turnScreenOn(boolean
\begin_inset space ~
\end_inset

on) Turns the screen on or off, but keeps the device running.
 This greatly improves battery performance.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
printStackTrace() Prints the stack trace to the debug console file.
 Implemented as: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	throw new Exception("Stack trace");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	e.printStackTrace();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
preallocateArray(Object
\begin_inset space ~
\end_inset

sample,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length) This method pre-allocates space for an array of objects with the
 given length.
 It can reduce the number of calls to GC when allocating big arrays.
 If the total size (
\family typewriter
Object size * length
\family default
) is small, calling this method is useless and will not result in any performanc
e gain.
 You can always measure how the GC affects your program by doing this: 
\begin_inset Newline newline
\end_inset

This is a sample that pre-allocates space for a 
\family typewriter
ListContainer
\family default
, taken from the 
\family typewriter
PopupMenu
\family default
 class: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.preallocateArray(new ListContainer.Item(layout), itemCount); 
\end_layout

\end_inset

This method does nothing on BlackBerry and Java SE.
 
\end_layout

\begin_layout Part
INPUT & OUTPUT
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
The purpose of this part is to teach you how to use the classes in the 
\family typewriter
totalcross.io
\family default
 package.
 The classes that will be covered in this tutorial are outlined below:
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.PortConnector
\family default
: used to send and receive bytes via Serial Cradle, USB, IrComm, and Bluetooth.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.File
\family default
: used to create files and manage directories.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.ByteArrayStream
\family default
: a resizable buffer that can be used to feed data to a stream or to store
 data coming from a stream.
 It can be used to emulate a virtual stream.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.DataStream
\family default
 (and 
\family typewriter
DataStreamLE
\family default
): used to read/write primitive types and strings in Big Endian (default)
 or Little Endian format.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.Stream
\family default
: is the main class of all classes inside the 
\family typewriter
totalcross.io
\family default
 package.
 It can be viewed as a generic stream where data can flow in and out of
 the device.
 All classes inside package 
\family typewriter
totalcross.io
\family default
 extend this class, and most classes receive a 
\family typewriter
totalcross.io.Stream
\family default
 in their constructor parameter.
 This allows you to combine different streams to meet your needs.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.gps.GPS 
\family default
retrieves GPS coordinates.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.RadioDevice
\family default
 provides access to the device's radios and information about their status.
\end_layout

\begin_layout Chapter
Stream
\end_layout

\begin_layout Standard

\family typewriter
Stream
\family default
 is an abstract class that serves as the base class for all classes that
 handles I/O operations.
 It defines the interface and the basic behavior that all its subclasses
 must implement.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Closes this stream, releasing any resources associated to it.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Tries to read 
\family typewriter
count
\family default
 bytes from this stream to the given byte array 
\family typewriter
buf
\family default
, beginning from the position 
\family typewriter
start
\family default
.
 Returns the number of bytes actually read.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Tries to write 
\family typewriter
count
\family default
 bytes to this stream from the given byte array 
\family typewriter
buf
\family default
, beginning from the position 
\family typewriter
start
\family default
.
 Returns the number of bytes actually written.
\end_layout

\begin_layout Standard
These three methods may throw an 
\family typewriter
IOException
\family default
, which usually means that something out of our control went wrong, preventing
 the method to be executed.
\end_layout

\begin_layout Standard

\family typewriter
Stream
\family default
 subclasses usually throw more exceptions that extends 
\family typewriter
IOException
\family default
 to denote more specific problems and allow you to properly handle the situation
, like 
\family typewriter
FileNotFoundException
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
Streams
\family default
 subclasses can be divided into two main groups:
\end_layout

\begin_layout Itemize
Classes that actually perform I/O operations, like 
\family typewriter
File
\family default
 or 
\family typewriter
Socket
\family default
.
\end_layout

\begin_layout Itemize
Classes that wrap a stream, providing features or operations that can be
 applied to any other stream, like 
\family typewriter
DataStream
\family default
 or 
\family typewriter
BufferedStream
\family default
.
\end_layout

\begin_layout Standard
We'll first look into this last group, which provides easier and more efficient
 ways of reading and writing data.
\end_layout

\begin_layout Chapter
DataStream/DataStreamLE
\end_layout

\begin_layout Standard

\family typewriter
DataStream
\family default
 is a wrapper that you can place around any stream such as a 
\family typewriter
File
\family default
, 
\family typewriter
Socket
\family default
, or 
\family typewriter
ByteArrayStream
\family default
, which allows you to read and write TotalCross' primitive data types and
 objects, like 
\family typewriter
int
\family default
s, 
\family typewriter
long
\family default
s, 
\family typewriter
double
\family default
s, and 
\family typewriter
String
\family default
s, in a simple and standard way.
 
\end_layout

\begin_layout Standard
Although TotalCross internally uses the little endian format, the 
\family typewriter
DataStream
\family default
 class uses the big endian format - the standard Java format.
 To read and write using the little endian format, you must use the 
\family typewriter
DataStreamLE
\family default
 class instead.
\end_layout

\begin_layout Itemize

\family typewriter
DataStream
\family default
 has only one constructor:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
DataStream(Stream
\begin_inset space ~
\end_inset

stream) Creates a data stream which wraps the given stream.
\end_layout

\end_deeper
\begin_layout Standard
Handling primitive data types:
\end_layout

\begin_layout Itemize

\family typewriter
byte
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readByte() Reads a 
\family typewriter
byte
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeByte(byte
\begin_inset space ~
\end_inset

by) Writes a 
\family typewriter
byte
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readUnsignedByte() Reads an unsigned 
\family typewriter
byte
\family default
, returning its value as an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeByte(int
\begin_inset space ~
\end_inset

by) Writes an unsigned 
\family typewriter
byte
\family default
, which is the first byte from the given 
\family typewriter
int
\family default
, which value should be between 0 and 255.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
boolean
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readBoolean() Reads a byte as a 
\family typewriter
boolean
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBoolean(boolean
\begin_inset space ~
\end_inset

bool) Writes a 
\family typewriter
boolean
\family default
 as a byte.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
char
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readChar() Reads two bytes as a 
\family typewriter
char
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeChar(char
\begin_inset space ~
\end_inset

c) Writes a 
\family typewriter
char
\family default
 as two bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
short
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readShort() Reads two bytes as a 
\family typewriter
short
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readUnsignedShort() Reads two bytes as an unsigned 
\family typewriter
short
\family default
, returning its value as an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeShort(int
\begin_inset space ~
\end_inset

i) Writes a 
\family typewriter
short
\family default
 as two bytes.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
There's only one method to write 
\family typewriter
short
\family default
, which receives an integer.
 It may be used to write signed and unsigned 
\family typewriter
short
\family default
s.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
int
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readInt() Reads four bytes as an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeInt(int
\begin_inset space ~
\end_inset

i) Writes an 
\family typewriter
int
\family default
 as four bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
long
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readLong() Reads eight bytes as a 
\family typewriter
long
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeLong(long
\begin_inset space ~
\end_inset

l) Writes a 
\family typewriter
long
\family default
 as eight bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
float
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readFloat() Reads four bytes as a 
\family typewriter
float
\family default
 in IEEE 754 format, returning its value as a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeFloat(double
\begin_inset space ~
\end_inset

f) Writes a 
\family typewriter
float
\family default
 as four bytes in IEEE 754 format.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
double
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
readDouble() Reads eight bytes as a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeDouble(double
\begin_inset space ~
\end_inset

d) Writes a 
\family typewriter
double
\family default
 as eight bytes.
\end_layout

\end_deeper
\begin_layout Standard
Handling 
\family typewriter
char
\family default
 arrays:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readChars() Reads an array of 
\family typewriter
char
\family default
s, where its length is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65,535 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len) Writes an array of 
\family typewriter
char
\family default
s, placing its length in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65,535 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBigChars() Reads an array of 
\family typewriter
char
\family default
s, where its length is stored in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2,147,483,647 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBigChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len) Writes an array of 
\family typewriter
char
\family default
s, placing its length in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2,147,483,647 characters).
\end_layout

\begin_layout Standard
Handling 
\family typewriter
String
\family default
s:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readString() Reads a 
\family typewriter
String
\family default
, where its length is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65,535 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeString(String
\begin_inset space ~
\end_inset

s) Writes a 
\family typewriter
String
\family default
, placing its length in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65,535 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBigString() Reads a 
\family typewriter
String
\family default
, where its length is stored in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2,147,483,647 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBigString(String
\begin_inset space ~
\end_inset

s) Writes a 
\family typewriter
String
\family default
, placing its length in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2,147,483,647 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readCString() Reads a C-style (null terminated) string.
 (no implicit limit).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeCString(String
\begin_inset space ~
\end_inset

s) Writes a C-style (null terminated) string.
 (no implicit limit).
\end_layout

\begin_layout Standard
Handling ASCII strings:
\end_layout

\begin_layout Standard
These methods are used to read and write strings comprised of only ASCII
 
\family typewriter
char
\family default
s – each character is cast from/to byte, and requires 1 byte instead of
 2 bytes.
 Make sure your strings have only characters between the ASCII range (0-255),
 because characters outside this range will not be properly handled.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readSmallString() Reads a small string, where its length is stored in the
 first byte as an unsigned byte (limited to 255 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeSmallString(String
\begin_inset space ~
\end_inset

s) Writes a small string, placing its length in the first byte as an unsigned
 byte (limited to 255 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readFixedString(int
\begin_inset space ~
\end_inset

length) Reads a fixed length string (limited to +2,147,483,647 characters).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeFixedString(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

pad) Writes a fixed length string (limited to +2,147,483,647 characters).
 If the given string is longer than the given length, it is truncated; If
 shorter, it is padded with the given 
\family typewriter
char
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeFixedString(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length) Same as the above, but shorter strings are padded with spaces.
\end_layout

\begin_layout Standard
Handling 
\family typewriter
String
\family default
 arrays:
\end_layout

\begin_layout Standard
The methods may be used to handle 
\family typewriter
String
\family default
 arrays, and both should be used together.
 This is because the size of the array is stored in the first two bytes
 as an unsigned 
\family typewriter
short
\family default
, before the very first 
\family typewriter
String
\family default
 (e.g.
 if you write several strings with 
\family typewriter
writeString()
\family default
, you cannot use 
\family typewriter
readStringArray()
\family default
 to read them, and vice-versa).
\end_layout

\begin_layout Standard
It's important to notice these methods handle 
\family typewriter
Strings
\family default
 like the 
\family typewriter
readString()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

writeString()
\family default
 methods, so the current character encoding will be used and their length
 stored as an unsigned 
\family typewriter
short
\family default
, therefore, the 
\family typewriter
String
\family default
 array cannot contain a 
\family typewriter
String
\family default
 with more than 65,535 characters.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readStringArray() Reads an array of 
\family typewriter
String
\family default
s, where its size is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeStringArray(String[]
\begin_inset space ~
\end_inset

v) Writes an array of 
\family typewriter
String
\family default
s, placing its size in the first two bytes as an unsigned 
\family typewriter
short
\family default
.
\end_layout

\begin_layout Standard
Handling 
\family typewriter
Object
\family default
s (
\family typewriter
Storable
\family default
):
\end_layout

\begin_layout Standard

\family typewriter
Object
\family default
s that implements the interface 
\family typewriter
Storable,
\family default
 may have its internal state persisted or retrieved directly using the following
 methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readObject() Reads an 
\family typewriter
Object
\family default
 which implements the 
\family typewriter
Storable
\family default
 interface and was written using 
\family typewriter
writeObject()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeObject(Storable
\begin_inset space ~
\end_inset

s) Writes a 
\family typewriter
Storable
\family default
 
\family typewriter
Object
\family default
.
\end_layout

\begin_layout Standard
Utility methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getStream() Returns the stream attached to this 
\family typewriter
DataStream
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pad(int
\begin_inset space ~
\end_inset

n) Pads the stream writing 
\family typewriter
n
\family default
 bytes with value 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
skip(int
\begin_inset space ~
\end_inset

n) Skips reading the next 
\family typewriter
n
\family default
 bytes in the stream (only forward!).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

buf) Same as 
\family typewriter
readBytes(buf, 0, buf.length)
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf) Same as 
\family typewriter
writeBytes(buf, 0, buf.length)
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
As a general rule, strings and arrays with 
\family typewriter
null
\family default
 value are persisted as zero sized strings and arrays (e.g.
 a string persisted with 
\family typewriter
writeString(null)
\family default
 is read as 
\family typewriter
“”
\family default
 - a zero sized string, which is not a 
\family typewriter
null
\family default
 value).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Chapter
ByteArrayStream
\end_layout

\begin_layout Standard

\family typewriter
ByteArrayStream
\family default
 is a 
\family typewriter
Stream
\family default
 that has an internal growable byte array, and it is commonly used as a
 buffer.
 
\end_layout

\begin_layout Standard
In I/O operations, usually it's faster and/or less resource consuming to
 send larger chunks of data at once, instead of sending several small chunks
 of data.
 You may use a byte array stream as a buffer and wait until it reaches a
 minimum size performing any actual I/O operation.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Socket s = new Socket(host, 8080); // connect to our host
\end_layout

\begin_layout Plain Layout

PortConnector pc = new PortConnector(0, 9600); // open a serial connection
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(512); // length 512
\end_layout

\begin_layout Plain Layout

bas.readFully(s, 10, 0); /* reads from the given stream (our socket) until
 the maximum number of retries is reached, in this case, 10 times.
 */
\end_layout

\begin_layout Plain Layout

int available = bas.available();
\end_layout

\begin_layout Plain Layout

if (available > 0) // did we receive anything?
\end_layout

\begin_layout Plain Layout

	pc.writeBytes(bas.getBuffer(), 0, available); /* yes! Let's send the data
 over the serial connection.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This difference is easily noticeable when dealing with external connections,
 like socket or port connector, but don't forget their operations usually
 have a time limit (timeout), that must be adjusted according to your connection
 speed and the amount of data you want to be able to read or write in a
 single I/O operation.
 Using a low timeout to send or receive large amounts of data may cause
 problems.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may also use a byte array stream with data stream to ensure you received
 enough data before handling it.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Socket s = new Socket(host, 8080); // connect to our host
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(256); // length 256
\end_layout

\begin_layout Plain Layout

bas.readFully(s, 5, 0); /* reads from the given stream (our socket) until
 the maximum number of retries is reached, in this case, 5 times.
 */
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(bas); /* the DataStream wraps the ByteArrayStream
 instead of the Socket.
 */
\end_layout

\begin_layout Plain Layout

int value;
\end_layout

\begin_layout Plain Layout

if (bas.available() >= 4) // do we have at least 4 bytes available?
\end_layout

\begin_layout Plain Layout

	value = ds.readInt(); // yes! Then we can read an int from the buffer.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The byte array stream is usually used as a read-only or write-only buffer,
 because its internal cursor is advanced every time a read or write operation
 is performed.
 However, you may use methods like 
\family typewriter
setPos()
\family default
, 
\family typewriter
reset()
\family default
, 
\family typewriter
mark()
\family default
 and 
\family typewriter
skipBytes()
\family default
 to navigate through the buffer and be able to perform read and write operations
 on the same buffer.
\end_layout

\begin_layout Standard
Like a 
\family typewriter
Vector
\family default
, 
\family typewriter
ByteArrayStream
\family default
 expands its internal buffer dynamically as needed (at a 20% rate).
\end_layout

\begin_layout Standard

\family typewriter
ByteArrayStream
\family default
 has two constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ByteArrayStream(byte[]
\begin_inset space ~
\end_inset

buffer) Creates a byte array stream, using the given byte array, which may
 not be empty, as the internal buffer.
 More often used to create read-only buffers.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ByteArrayStream(int
\begin_inset space ~
\end_inset

size) Creates a byte array stream, with a newly created (empty) internal
 byte array of the given size.
 More often used to create write-only buffers.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Although the internal buffer is a private field, you may create a byte array
 stream with your own byte array or use methods like 
\family typewriter
getBuffer()
\family default
 and 
\family typewriter
setBuffer()
\family default
 to have a reference for this field.
 But you can't set the internal buffer to 
\family typewriter
null
\family default
 or change its size without also updating its length and reseting its cursor
 position.
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBuffer() Returns a reference to the internal buffer.
 The actual length of the buffer may differ from the current buffer size.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setBuffer(byte[
\family typewriter
]
\family default

\begin_inset space ~
\end_inset


\family typewriter
buffer)
\family default
 Assigns the given byte array as the internal buffer, reseting its current
 position and updating its size.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toByteArray() Returns a byte array, which is a copy of the contents of the
 internal buffer.
\end_layout

\begin_layout Standard
Methods inherited from 
\family typewriter
Stream
\family default
:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Copies 
\family typewriter
count
\family default
 bytes from this byte array stream's buffer to the given byte array, starting
 at position 
\family typewriter
start
\family default
.
 The contents of the buffer are not changed, but its cursor is moved 
\family typewriter
count
\family default
 positions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Copies 
\family typewriter
count
\family default
 bytes from the given byte array, starting at position 
\family typewriter
start
\family default
, to this byte array stream's buffer, expanding it if necessary.
 The internal cursor is moved 
\family typewriter
count
\family default
 positions.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Does nothing.
 The byte array stream does not encapsulate an actual handler for I/O operations
, so there's no nothing to be done.
\end_layout

\begin_layout Standard
Manipulating the internal array:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
count() Returns the current cursor position in the buffer – the number of
 bytes read in read-only, or the number of bytes written in a write-only.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
available() Returns the number of bytes available for reading or writing
 from the current cursor position (marked position of the buffer – current
 cursor position).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
mark() Marks the current position as the buffer size and the cursor position
 to 0, so you may read from the buffer without going past the number of
 bytes actually available for reading.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset() Resets the cursor position to 0 and sets the mark with the actual
 array size.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reuse() Shifts the bytes starting at the current position to the first position
 of the buffer – this way you may reuse the buffer without exceeding the
 buffer limits, which would make the buffer grow and consume more memory.
 This method also returns the number of bytes shifted, which may be used
 to move the cursor to the end of it and reuse the buffer without overwriting
 the shifted bytes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
skipBytes(int
\begin_inset space ~
\end_inset

count) Moves the cursor 
\family typewriter
count
\family default
 bytes from the current position.
 A positive value moves the cursor forward, while a negative value moves
 the cursor backwards.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This method 
\emph on
does not
\emph default
 throw an exception if the given argument exceeds the buffer bounds; instead,
 it returns -1.
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPos(int
\begin_inset space ~
\end_inset

newPos) Sets cursor position to the given value (which should be between
 0 and the position marked as the end of the buffer).
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This method 
\emph on
does not
\emph default
 check if the given value is valid, so make sure you're using it correctly.
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSize(int
\begin_inset space ~
\end_inset

newSize,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

copyOldData) Resizes the internal buffer if the given size is greater than
 the position marked as the end of the buffer.
 If 
\family typewriter
copyOldData
\family default
 is 
\family typewriter
true
\family default
, it also copies the contents of the current buffer to the new buffer, starting
 from 0 to the current cursor position.
 If the given size if equals or smaller than the marked position of the
 buffer, nothing is changed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readFully(Stream
\begin_inset space ~
\end_inset

inputStream,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

retryCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bufSize) Resets this byte array stream and reads the maximum amount of data
 available from the given stream, marking the last position used as the
 end of the buffer.
 The argument 
\family typewriter
retryCount
\family default
, if greater than 0, specifies the number of times the method should try
 to read data from the stream before returning.
 It will always try to read data at least once, even if 
\family typewriter
retryCount
\family default
 is not a positive value.
 This is specially useful for streams that handle external connections,
 like 
\family typewriter
Socket
\family default
 or 
\family typewriter
PortConnector
\family default
; you may specify 1 or any lower value for other streams, like 
\family typewriter
File
\family default
 or 
\family typewriter
PDBFile
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Be careful when using this method with streams like file.
 It may read the whole file at once, resulting in a great loss of performance
 and resources (the buffer may be resized several times).
 In the worst scenario, the device will run out of memory and the application
 will be halted.
 In this case, you should check the size of the stream before using 
\family typewriter
readFully()
\family default
.
\end_layout

\begin_layout Itemize
The argument 
\family typewriter
bufSize
\family default
 specifies a minimum size for the internal buffer – therefore, if its value
 is equals or lower than the size of the buffer, it is not resized (i.e.
 you cannot use it to shrink the buffer).
 Otherwise, the buffer will be resized to match the given value.
\begin_inset Newline newline
\end_inset

Please notice, the buffer will still grow if necessary, regardless of the
 
\family typewriter
bufSize
\family default
 value.
 So you cannot use it to limit the amount of data read, and you may specify
 a value 0 or lower if you do not wish to define a minimum size – this will
 not prevent its automatic resize.
\end_layout

\begin_layout Itemize
The byte array stream is reseted at the beginning of 
\family typewriter
readFully()
\family default
, so you can't use it in a loop as a buffer for a stream, you must use the
 argument 
\family typewriter
retryCount
\family default
 instead.
\end_layout

\begin_layout Itemize
Calling the method reset before 
\family typewriter
readFully()
\family default
 is pointless, since this is already done by 
\family typewriter
readFully()
\family default
.
\end_layout

\begin_layout Itemize
After 
\family typewriter
readFully()
\family default
 finishes reading to the internal buffer, it marks the current cursor position
 and sets the cursor to the first position of the array, so you may read
 from the buffer without going past the number of bytes actually available
 for reading.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Chapter
File
\end_layout

\begin_layout Standard
Being able to persist and retrieve data is very important for any application
 – and also a difficult task when you're dealing with different platforms
 and OS versions, each one with your own features and flaws.
\end_layout

\begin_layout Standard
The 
\family typewriter
File
\family default
 class was designed to allow you to browse and manipulate the file system
 – with its directories and archives – of any supported device in a transparent
 and reliable manner.
\end_layout

\begin_layout Standard
A 
\family typewriter
File
\family default
 object represents an archive or a directory of the device's file system,
 stored either on its non-volatile memory or in a memory card inserted on
 the device.
\end_layout

\begin_layout Standard
When creating a new 
\family typewriter
File
\family default
 object, you may specify the open mode using one of the following constants:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
DONT_OPEN The path argument denotes either a directory or an archive that
 may not exist.
 The given path is stored but the file isn't actually accessed (i.e.
 no resource is locked to manipulate the file).
\begin_inset Newline newline
\end_inset

This mode may be used to perform operations that do not require the allocation
 of any resources, or to manipulate directories.
 In fact, it is the only mode that allows directory manipulation.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Files created with mode 
\family typewriter
DONT_OPEN
\family default
 don't need to be closed since there are no resources to be released, but
 you can call the 
\family typewriter
close()
\family default
 method anyway.
 However, calling the 
\family typewriter
close()
\family default
 method twice for the same 
\family typewriter
File
\family default
 object (i.e.
 trying to close a file that was already closed) throws an 
\family typewriter
IOException
\family default
 regardless of the file open mode used.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
CREATE The given path denotes an archive that may not exist.
 If the archive does not exists, it is created and opened with read and
 write access, otherwise, it justs opens the existing file with read and
 write access.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
READ_WRITE The given path denotes an archive to be opened with read and
 write access.
 The archive must exists, otherwise a 
\family typewriter
FileNotFoundException
\family default
 is thrown.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Use this mode when you want to manipulate an archive only if it already
 exists - don't forget to catch and handle the 
\family typewriter
FileNotFoundException
\family default
.
 This is more efficient than creating a file object in 
\family typewriter
DONT_OPEN
\family default
 mode to check if the file exists and is not a directory.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
CREATE_EMPTY The given path denotes an archive that may not exist.
 If the archive exists, it is replaced by an empty one, otherwise, a new
 one is created.
 Either way, the archive is opened with read and write access.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
READ_ONLY Works only for files, must not be used for folders.
 With this mode it is possible to access an already opened file in any mode
 on all platforms except on Palm OS.
 All the other modes are exclusive with each other except on Android, iOS,
 and Linux.
 Obvioulsy it is not possible to write in the file using this mode.
 
\end_layout

\begin_layout Standard
File constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
File(String
\begin_inset space ~
\end_inset

path,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

slot) Creates a 
\family typewriter
File
\family default
 object with the given path, using the given mode (which should be one of
 the above constants) and the specified slot.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
File(String
\begin_inset space ~
\end_inset

path,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode) Creates a 
\family typewriter
File
\family default
 object with the given path, using the given mode (which should be one of
 the above constants) and the last available slot.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
File(String
\begin_inset space ~
\end_inset

path) Creates a 
\family typewriter
File
\family default
 object with the given path, using the 
\family typewriter
DONT_OPEN
\family default
 mode and the last available slot.
\end_layout

\begin_layout Standard
When creating a new file, you may start the path using the alias 
\family typewriter
device/
\family default
, which evaluates to the platform's base user directory: 
\end_layout

\begin_layout Itemize
Palm OS and Windows CE - 
\family typewriter
/
\family default
 (root) 
\end_layout

\begin_layout Itemize
BlackBerry - 
\family typewriter
/store/home/user/
\family default
 
\end_layout

\begin_layout Itemize
Java - 
\family typewriter
/
\family default
 (current directory) 
\end_layout

\begin_layout Itemize
Windows 32 - 
\family typewriter
/
\family default
 (root of the current drive) 
\end_layout

\begin_layout Itemize
iPhone - 
\family typewriter
/private/var/
\family default
 (root of the big partition) 
\end_layout

\begin_layout Itemize
Android - 
\family typewriter
/data/data/totalcross.app.<main class name> 
\family default
or
\family typewriter
 /data/data/
\begin_inset Newline newline
\end_inset

totalcross.app.<application id>
\family default
 if using single package 
\end_layout

\begin_layout Standard
The alias is ALWAYS relative to the built in storage, regardless of the
 value passed to the argument slot.
 On iOS and Android, if you don't specify a path, the file will be open
 in 
\family typewriter
device/
\family default
.
 
\end_layout

\begin_layout Standard
The argument slot specifies the index of the storage media to be used only
 for Palm OS.
 This parametes is ignored on all other platforms.
 Usually the value used will be 1, which defaults to the device's internal
 non-volatile memory.
\end_layout

\begin_layout Standard
If the device has one or more slots for external storage medias (e.g.
 MM Cards and SD Cards), you may access them using a value greater than
 1 (e.g.
 if the device has one slot for a memory card, you may address it using
 the value 2).
\end_layout

\begin_layout Standard
You may also use the value -1 to access the storage media of higher index
 (i.e.
 1 if no external media is available, 2 if one external media is available,
 and so on...).
 0, the internal memory, MUST NOT be used, because it will cause a device
 reset.
 
\end_layout

\begin_layout Standard
This may vary on some Palm devices, so use prefer using the
\family typewriter
 Settings.nvfsVolume
\family default
 property.
 You can find the available slots using this code: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i = 0; i < 10; i++) 
\end_layout

\begin_layout Plain Layout

	if (File.isCardInserted(i)) 
\end_layout

\begin_layout Plain Layout

		add(new Label("found " + i), LEFT, AFTER);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To access the card in Android devices, prefix the path with 
\family typewriter
/sdcard
\family default
.
 Be sure that the card is NOT MOUNTED (being used by the desktop), otherwise
 your application will not have access to it.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Always use 
\family typewriter
/
\family default
 (slash) as the file separator, and never the 
\family typewriter

\backslash

\family default
 (backslash), regardless of the target platform.
 Although the 
\family typewriter
File
\family default
 constructor should be able to handle both slashes and backslashes right
 now, the backslash support may be removed in the future to increase performance.
 Besides, the slash is TotalCross' official file separator, so you'd better
 get used to it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depending on the target file type (directory or archive) and the used open
 mode, some methods may not be used, or have a different behavior.
 Using a method under the wrong circumstances will result in an 
\family typewriter
IOException
\family default
.
\end_layout

\begin_layout Standard
To clarify, we'll split the 
\family typewriter
File
\family default
 methods into the four categories below:
\end_layout

\begin_layout Itemize
Archive and directory methods – May be used with any file, regardless of
 the type and the open mode.
\end_layout

\begin_layout Itemize
Directory only methods – Can only be used with directories.
\end_layout

\begin_layout Itemize
Archive only methods – Can only be used with open archives (cannot be used
 with archives created in 
\family typewriter
DONT_OPEN
\family default
).
\end_layout

\begin_layout Itemize
Behavior depends on the file type – May be used with any file, but the method
 implementation and result depends on the file type.
\end_layout

\begin_layout Standard
Archive and Directory methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
exists() Returns 
\family typewriter
true
\family default
 if the file exists and 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isDir() Returns 
\family typewriter
true
\family default
 if and only if the file exists and is a directory, returning 
\family typewriter
false
\family default
, otherwise.
 To check if a file is an archive, you must test if the file is not a directory
 and if the file exists.
 Obviously this method should only be used in mode 
\family typewriter
DONT_OPEN
\family default
, since it will always return 
\family typewriter
false
\family default
 in any other mode.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getParent() Returns a new 
\family typewriter
File
\family default
 object that references this file's parent directory, or 
\family typewriter
null
\family default
 if this file does not have a parent directory.
 The new file object is created in 
\family typewriter
DONT_OPEN
\family default
 mode.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
rename(String
\begin_inset space ~
\end_inset

path) Renames the file with the given path.
\begin_inset Newline newline
\end_inset

This operation closes the 
\family typewriter
File
\family default
 object, so you should not perform any operations after a rename.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
delete() Removes the file from the file system.
 If the file is a directory, it must be empty, otherwise an 
\family typewriter
IOException
\family default
 will be thrown.
 If the file does not exists, a 
\family typewriter
FileNotFoundException
\family default
 is thrown.
\begin_inset Newline newline
\end_inset

This operation closes the file object, so you should not perform any operations
 after a delete.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Closes this 
\family typewriter
File
\family default
 object, releasing any resources held by this object.
 Trying to close a 
\family typewriter
File
\family default
 object twice (e.g.
 calling 
\family typewriter
close()
\family default
 twice, or 
\family typewriter
rename()
\family default
 and 
\family typewriter
close()
\family default
) results in an 
\family typewriter
IOException
\family default
.
\begin_inset Newline newline
\end_inset

This operation closes the 
\family typewriter
File
\family default
 object, so you should not perform any operations after a close.
\end_layout

\begin_layout Standard
Directory only methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
createDir() Creates the directory named by this path, including any necessary
 but nonexistent parent directories.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
listFiles() Returns an array of strings denoting the files in this directory.
\end_layout

\begin_layout Standard
Archive only methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

off,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len) Attempts to read 
\family typewriter
len
\family default
 bytes from the file into the given byte array, starting at the array's
 position 
\family typewriter
off
\family default
.
 Returns the number of bytes actually read.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

off,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len) Attempts to write 
\family typewriter
len
\family default
 bytes to the file from the given byte array, starting at the array's position
 
\family typewriter
off
\family default
.
 Returns the number of bytes actually written.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
flush() Flushes the stream, forcing any buffered bytes to be written on
 the file.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setPos(int
\begin_inset space ~
\end_inset

pos) Moves the file pointer for read and write operations to the given position.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAttributes() Gets this file attributes, returning the attributes constants
 ORed together (more information below).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setAttributes(int
\begin_inset space ~
\end_inset

attr) Sets this file attributes with the given attributes constants ORed
 together (more information below).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTime(byte
\begin_inset space ~
\end_inset

whichTime) Gets the time for the given time type constant (more information
 below).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTime(byte
\begin_inset space ~
\end_inset

whichTime,
\begin_inset space ~
\end_inset

Time
\begin_inset space ~
\end_inset

time) Sets the time for the given time type constant (more information below).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSize(int
\begin_inset space ~
\end_inset

newSize) Sets the size of this file.
 If 
\family typewriter
newSize
\family default
 is greater than the current size, the file is resized to the given size,
 otherwise the file is truncated, discarding all bytes from the position
 
\family typewriter
newSize
\family default
 to the current end of file.
\end_layout

\begin_layout Standard
Behavior depends on the file type:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSize() If the file is the root directory, returns the amount of free
 space available on this file system.
 If the file is an open archive, returns its size.
 If the file is neither the root directory nor an open archive, an 
\family typewriter
IOException
\family default
 is thrown.
\end_layout

\begin_layout Section
File attributes
\end_layout

\begin_layout Standard
As shown above, you may use the methods 
\family typewriter
getAttributes()
\family default
 and 
\family typewriter
setAttributes()
\family default
 to retrieve or change the attributes of an archive (these operations are
 not supported for directories) with the following constants:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ATTR_ARCHIVE Often used to mark an archive for backup or removal.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ATTR_HIDDEN Hidden files are usually not listed on the file system.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ATTR_READ_ONLY Archives marked as read only cannot open with write access.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ATTR_SYSTEM Archives marked as system are normally used only by the OS,
 and should not be changed by the user.
\end_layout

\begin_layout Standard
However, these attributes are not supported by all platforms, and although
 you are not required to write platform specific code, you must be aware
 that you should not rely on certain attributes when writing cross-platform
 applications.
\end_layout

\begin_layout Standard
Below you can see the archive attributes support for each platform:
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Win32 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
WinCE Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
PalmOS Full support, but the usage of the 
\family typewriter
ATTR_READ_ONLY
\family default
 constant is not advised.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Files in Palm OS must be opened with write access to have their attributes
 changed, therefore, you cannot change the attributes of a read only file,
 because you're not allowed to open it with write access.
 A read only file cannot be changed, moved or deleted, only reading is allowed.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring BlackBerry0
BlackBerry Supports only 
\family typewriter
ATTR_HIDDEN
\family default
 and 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
iOS Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Android Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Linux Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Section
File times
\end_layout

\begin_layout Standard
Usually a file has three attributes which represents its creation time,
 the last time it was accessed and the last time it was modified.
 TotalCross provides the following constants to be used with the methods
 
\family typewriter
setTime()
\family default
 and 
\family typewriter
getTime()
\family default
 to retrieve and change these attributes:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TIME_CREATED Used to get or set the file's creation time.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TIME_ACCESSED Used to get or set the time the file was last accessed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TIME_MODIFIED Used to get or set the time the file was last modified.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
TIME_ALL Used to set all of the above times with the same value.
\end_layout

\begin_layout Standard
Unfortunately these operations are not fully supported by all platforms,
 so you must be aware that you should not rely on these values when writing
 cross-platform applications.
\end_layout

\begin_layout Standard
Below you can see the times attributes support for each platform:
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Win32 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
WinCE Supports only 
\family typewriter
TIME_MODIFIED
\family default
 if the file is stored on the device's non-volatile memory.
 If the file is stored in an external FAT storage, it also supports 
\family typewriter
TIME_CREATED
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
PalmOS Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
BlackBerry Supports only 
\family typewriter
TIME_MODIFIED
\family default
 with 
\family typewriter
getTime()
\family default
 – you may retrieve the time the file was last modified with 
\family typewriter
getTime()
\family default
, but you cannot change it with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
iOS Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Android Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Linux Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Chapter
GPS
\end_layout

\begin_layout Standard

\family typewriter
GPS
\family default
 is a class that retrieves GPS coordinates read from the COM (or Bluetooth,
 or IR) port on Palm OS.
 Windows Mobile, Android, BlackBerry, and iOS use the native API instead
 of reading from the COM port.
 This class only retrieves data updating the internal fields.
 If you want to display that data, you may use the 
\family typewriter
GPSView
\family default
 class.
 
\end_layout

\begin_layout Standard
If the GPS fails connecting to the satellites, and the phone has signal,
 you can use the cell tower location as a rough location.
 The precision varies between 50m to 3km, depending on the phone location.
 In this case, you can get the latitude and longitude using 
\family typewriter
CellInfo.toCoordinates()
\family default
.
 
\end_layout

\begin_layout Standard
On Android, don't forget to turn on the GPS, going to Settings / Security
 & Location / Enable GPS satellites.
 The other platforms may require that as well.
\end_layout

\begin_layout Section
GPS class
\end_layout

\begin_layout Standard
The 
\family typewriter
GPS
\family default
 class has two constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPS() Constructs a GPS control, opening a default port using 9600 bps.
 Already prepared for PIDION scanners.
 It automatically scans the Windows CE registry searching for the correct
 GPS COM port.
 Under Windows Mobile and Android, uses the internal GPS api.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPS(PortConnector
\begin_inset space ~
\end_inset


\family typewriter
sp)
\family default
 Constructs a GPS control with the given serial port.
 Don't use this constructor on Android or Windows Mobile.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PortConnector sp = new PortConnector(PortConnector.BLUETOOTH, 9600);
\end_layout

\begin_layout Plain Layout

sp.setReadTimeout(500);
\end_layout

\begin_layout Plain Layout

gps = new GPS(sp); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following fields are useful for fetching GPS data:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
location Stores the location - latitude on first index (0) and longitude
 on second index (1).
 On low signal, it contains the value 
\family typewriter
INVALID
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
direction Stores the direction in degrees from the North.
 On low signal, it contains the value 
\family typewriter
INVALID
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
velocity Stores the speed in knots.
 On low signal, it contains the value 
\family typewriter
INVALID
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
satellites Number of satellites in view.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lastFix Stores the time of the last updated.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
messageReceived The retrieved message, or 
\family typewriter
null
\family default
 on Windows Mobile and Android.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
pdop The last PDOP (Dilution of Precision), if any.
 On low signal, it contains the value 
\family typewriter
INVALID
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
lowSignalReason The reason for the low signal, if 
\family typewriter
retrieveGPSData()
\family default
 returned 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout Standard
The class has the following useful methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getWinCEGPSCom() Returns the Windows CE GPS COM port, which can be used
 to open a 
\family typewriter
PortConnector
\family default
.
 The return is a string like "COM3", or 
\family typewriter
null
\family default
 if no keys with GPS were found under 
\family typewriter
HKLM
\backslash
Drivers
\backslash
 BuildIn
\family default
.
 Sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (Settings.isWindowsDevice() && (com = GPS.getWinCEGPSCom()) != null)
\end_layout

\begin_layout Plain Layout

	sp = new PortConnector(Convert.chars2int(com), 9600, 7, PortConnector.PARITY_EVEN
, 1);
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
stop() Closes the underlying 
\family typewriter
PortConnector
\family default
 or native api.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLatitude() Returns the latitude (
\family typewriter
location[0]
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getLongitude() Returns the longitude (
\family typewriter
location[1]
\family default
).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toCoordinate(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

dir) Returns the coordinate of the given string in coordinate format and
 direction, which can be 
\family typewriter
S
\family default
 (South), 
\family typewriter
W
\family default
 (West), 
\family typewriter
E
\family default
 (East), or 
\family typewriter
N
\family default
 (North).
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toCoordinateGGMMSS(String
\begin_inset space ~
\end_inset

coord,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

dir) The same as above but returns the coordinate in the format 
\family typewriter
degrees:minutes:seconds
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
retrieveGPSData() Call this method to retrieve the data from the GPS.
 If there is low signal, it will return 
\family typewriter
false
\family default
.
\end_layout

\begin_layout Standard
Here is an example of GPS usage:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

new Thread()   
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public void run()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		gps = new GPS();
\end_layout

\begin_layout Plain Layout

		for (int i = 0; i < 60*2 && gps.location[0] == 0; i++) // wait 60s
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.safeSleep(500);
\end_layout

\begin_layout Plain Layout

			try
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				gps.retrieveGPSData();
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			catch (Exception eee)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				eee.printStackTrace();
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}.start(); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
GPSView class
\end_layout

\begin_layout Standard
This control displays the GPS coordinates read, using the 
\family typewriter
GPS
\family default
 class to show the values on labels.
 You can use the 
\family typewriter
GPS
\family default
 class standalone if you wish.
 The field 
\family typewriter
gps
\family default
 is the class used to retrieve the GPS coordinates.
 One way to use this class is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(gps = new GPSView(1000),LEFT,TOP); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
GPSView
\family default
 has four constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPSView() Constructs a 
\family typewriter
GPSView
\family default
 using a read interval of 2 seconds.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPSView(int
\begin_inset space ~
\end_inset

readInterval) Constructs a 
\family typewriter
GPSView
\family default
 using the given read interval in milliseconds.
 A 
\family typewriter
ControlEvent.PRESSED
\family default
 is posted each time the 
\family typewriter
TRIGGERED
\family default
 event occurs.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPSView(PortConnector
\begin_inset space ~
\end_inset

sp,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

readInterval) Constructs a 
\family typewriter
GPSView
\family default
 using the given 
\family typewriter
PortConnector
\family default
 and read interval.
 On Android and Windows Mobile, you should use one of the other constructors.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GPSView(GPS
\begin_inset space ~
\end_inset

gps,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

readInterval) Constructs a 
\family typewriter
GPSView
\family default
 using the given 
\family typewriter
GPS
\family default
 and read interval as input.
 
\end_layout

\begin_layout Standard
The useful methods are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
stop() Removes the timer and stops the GPS.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
retrieveGPSData() Retrieves the GPS data and updates the fields with it.
\end_layout

\begin_layout Section
GoogleMaps class
\end_layout

\begin_layout Standard
Shows a Google Maps viewer on a separate window.
 Internet connection is required.
 Currently works on Android and iOS only.
 Pressing back returns to the application on Android.
 On iPhone you must do a double-click on the home button to open the task
 manager to return to your application.
 This class only has a default constructor and a method, which is described
 below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
showAddress(String
\begin_inset space ~
\end_inset

address,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

showSatellitePhotos) Shows the given address in a separate window.
 If you want to show your current location, you will have to turn the GPS
 on, get the coordinates and pass to this method.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
address
\family default
 parameter is the address to show (e.
 g.
 
\family typewriter
"rua tonelero 10, copacabana, rio de janeiro, brasil"
\family default
, or 
\family typewriter
"22030,brasil"
\family default
).
 The address is resolved and its latitude and logitude coordinates are retrieved.
 You must be careful with the address given, be sure to make some tests
 before.
 If you want to pass the lat/lon coordinates, pass them in the form: 
\family typewriter
"@lat,lon"
\family default
 (e.
 g.: 
\family typewriter
"@-22.966000,-43.185000"
\family default
).
 Note that, due to Android's restrictions, only the first 6 decimal digits
 in the coordinates are used.
 Passing an empty string will make the engine search for a valid "last known
 position".
 If there's no such position, it will return 
\family typewriter
false
\family default
.
 
\begin_inset Newline newline
\end_inset

If 
\family typewriter
showSatellitePhotos == true
\family default
, an image of the satellite is combined with the map.
 May require more bandwidth and Internet resources.
\begin_inset Newline newline
\end_inset

The method returns 
\family typewriter
true
\family default
 if the map was shown; 
\family typewriter
false
\family default
, otherwise.
 
\family typewriter
false
\family default
 is often returned when there's no Internet connection.
\end_layout

\begin_layout Chapter
RadioDevice
\end_layout

\begin_layout Standard
This class provides access to the device's radios and information about
 their status.
 This class is fully functional on Windows CE based devices version 4.2 and
 later.
 All methods are static.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isSupported(int
\begin_inset space ~
\end_inset

type) Determines if the provided radio type is supported by the device.
 The possible types are 
\family typewriter
WIFI
\family default
, 
\family typewriter
PHONE
\family default
, or 
\family typewriter
BLUETOOTH
\family default
.
\begin_inset Newline newline
\end_inset

Fully functional on Windows CE and Android devices.
 BlackBerry supports only 
\family typewriter
WIFI
\family default
, always returning 
\family typewriter
false
\family default
 for other types.
 Always return 
\family typewriter
false
\family default
 on other platforms.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getState(int
\begin_inset space ~
\end_inset

type) Retrieves the current state of the provided radio.
\begin_inset Newline newline
\end_inset

Currently works only on Windows CE, Android devices, and BlackBerry.
 However, it will always return 
\family typewriter
RADIO_STATE_DISABLED
\family default
 for 
\family typewriter
BLUETOOTH
\family default
 on BlackBerry.
 Always return
\begin_inset Newline newline
\end_inset


\family typewriter
RADIO_STATE_DISABLED
\family default
 on the other platforms.
 The other possible return is
\begin_inset Newline newline
\end_inset


\family typewriter
RADIO_STATE_ENABLED
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setState(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

state) Change the state of the provided radio.
 Fully functional on Windows CE and Android devices.
 BlackBerry supports only 
\family typewriter
WIFI
\family default
.
 Does nothing on other platforms.
 
\end_layout

\begin_layout Part
COMPRESSION
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
This section covers the usage of classes that handle data compression, inflating
 compressed data or deflating uncompressed data using streams.
\end_layout

\begin_layout Chapter
CompressedStream
\end_layout

\begin_layout Standard
Abstract class used as the basis for compression filters, such as 
\family typewriter
ZLibStream
\family default
 and 
\family typewriter
GZipStream
\family default
.
 It is the base class for stream filters that perform data compression and
 decompression.
\end_layout

\begin_layout Standard
Instances of subclasses of 
\family typewriter
CompressedStream
\family default
 cannot be used for both read and write operations.
 At the object creation, you MUST choose if the new object is going to be
 used either for reading or writing compressed data, by passing one of the
 following constants to the class constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
DEFLATE Used to create a stream for data compression.
 In this mode, you may ONLY use write operations, that is, you may NOT use
 the method 
\family typewriter
readBytes()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
INFLATE Used to create a stream for data decompression.
 In this mode, you may ONLY use read operations, that is, you may NOT use
 the method 
\family typewriter
writeBytes()
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Subclasses of 
\family typewriter
CompressedStream
\family default
 that implements algorithms with different levels of compression, should
 always use a constant default value for data compression.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also notice that closing a compressed stream (using its 
\family typewriter
close()
\family default
 method) DOES NOT affect the underlying stream (the stream passed to the
 constructor).
 To also close the underlying stream, you must call its own 
\family typewriter
close()
\family default
 method after closing the compressed stream.
\end_layout

\begin_layout Standard
The methods for reading and writing bytes are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Attempts to read 
\family typewriter
count
\family default
 bytes to the given byte array 
\family typewriter
buf
\family default
, starting from offset 
\family typewriter
start
\family default
.
 This method should be used only for reading compressed data from the original
 stream, returning uncompressed data on the give byte array.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Attempts to write 
\family typewriter
count
\family default
 bytes from the given byte array 
\family typewriter
buf
\family default
, starting from offset 
\family typewriter
start
\family default
.
 This method should be used only for compressing the contents of the given
 byte array and writing the compressed data to the original stream.
 
\end_layout

\begin_layout Chapter
ZLibStream
\end_layout

\begin_layout Standard
Subclass of 
\family typewriter
CompressedStream
\family default
 that implements data compression using the zlib algorithm.
\end_layout

\begin_layout Standard
It uses its super class methods and has the following constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZLibStream(Stream
\begin_inset space ~
\end_inset

stream,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode) Creates a 
\family typewriter
ZLibStream
\family default
 object that may be used to read compressed data from the given stream,
 or to write compressed data to the given stream.
 The mode must be either 
\family typewriter
DEFLATE
\family default
 or 
\family typewriter
INFLATE
\family default
.
 
\end_layout

\begin_layout Quote
“zlib is designed to be a free, general-purpose, legally unencumbered --
 that is, not covered by any patents - lossless data-compression library
 for use on virtually any computer hardware and operating system.
 The zlib data format is itself portable across platforms.
\begin_inset Quotes erd
\end_inset

 - 
\begin_inset CommandInset href
LatexCommand href
target "http://www.zlib.net/"

\end_inset


\end_layout

\begin_layout Chapter
GZipStream
\end_layout

\begin_layout Standard
Subclass of 
\family typewriter
CompressedStream
\family default
 that implements data compression using the gzip algorithm.
\end_layout

\begin_layout Standard
It uses its super class methods and has the following constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
GZipStream(Stream
\begin_inset space ~
\end_inset

stream,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode) Creates a 
\family typewriter
GZipStream
\family default
 object that may be used to read compressed data from the given stream,
 or to write compressed data to the given stream.
 The mode must be either 
\family typewriter
DEFLATE
\family default
 or 
\family typewriter
INFLATE
\family default
.
 
\end_layout

\begin_layout Quote
“gzip (GNU zip) is a compression utility designed to be a replacement for
 compress.
 Its main advantages over compress are much better compression and freedom
 from patented algorithms.
 It has been adopted by the GNU project and is now relatively popular on
 the Internet.” - 
\begin_inset CommandInset href
LatexCommand href
target "http://www.gzip.org/"

\end_inset


\end_layout

\begin_layout Chapter
ZipStream 
\end_layout

\begin_layout Standard
This class implements a stream filter for reading and writing files in the
 ZIP file format.
 Currently supports only compressed entries.
\end_layout

\begin_layout Standard
It has the following constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZipStream(RandomAccessStream
\begin_inset space ~
\end_inset

stream,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode) Creates a new ZIP stream that may be used to read compressed data
 from the given stream, or to write compressed data to the given stream.
 It's mode is 
\family typewriter
DEFLATE
\family default
 or 
\family typewriter
INFLATE
\family default
.
 
\end_layout

\begin_layout Standard
It has the 
\family typewriter
CompressedStream
\family default
 methods and the following ones:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
available() Returns 0 after EOF has reached for the current entry data,
 otherwise always return 1.
 Programs should not count on this method to return the actual number of
 bytes that could be read without blocking.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getNextEntry() Reads the next ZIP file entry and positions the stream at
 the beginning of the entry data.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
putNextEntry(ZipEntry
\begin_inset space ~
\end_inset

entry) Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data.
 Closes the current entry if still active.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
closeEntry() Closes the current ZIP entry and positions the stream for reading
 (
\family typewriter
INFLATE
\family default
) or writing (
\family typewriter
DEFLATE
\family default
) the next entry.
 
\end_layout

\begin_layout Chapter
ZipEntry
\end_layout

\begin_layout Standard
The 
\family typewriter
ZipEntry
\family default
 class is used to represent a ZIP file entry.
 It has two constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZipEntry(String
\begin_inset space ~
\end_inset

name) Creates a new zip entry with the specified name.
 It will throw a 
\family typewriter
NullPointerException
\family default
 if the entry name is 
\family typewriter
null
\family default
 and an 
\family typewriter
IllegalArgumentException
\family default
 if the entry name is longer than 
\family typewriter
0xFFFF
\family default
 bytes.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZipEntry(ZipEntry
\begin_inset space ~
\end_inset

e) Creates a new zip entry with the fields taken from the specified zip
 entry.
 
\end_layout

\begin_layout Standard
The class methods are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getName() Returns the name of the entry.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setTime(long
\begin_inset space ~
\end_inset

time) Sets the entry modification time in number of milliseconds since the
 epoch.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTime() Returns the modification time in number of milliseconds since
 the epoch of the entry, or -1 if not specified.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setSize(long
\begin_inset space ~
\end_inset

size) Sets the uncompressed size of the entry data.
 It will throw an 
\family typewriter
IllegalArgumentException
\family default
 if the specified size is less than 0 or greater than 
\family typewriter
0xFFFFFFFF
\family default
 bytes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getSize() Returns the uncompressed size of the entry data, or -1 if not
 known.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCompressedSize(long
\begin_inset space ~
\end_inset

csize) Sets the size of the compressed entry data.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCompressedSize() Returns the size of the compressed entry data, or -1
 if not known.
 In the case of a stored entry, the compressed size will be the same as
 the uncompressed size of the entry.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setCrc(long
\begin_inset space ~
\end_inset

crc) Sets the CRC32 checksum of the uncompressed entry data.
 It will throw an
\begin_inset Newline newline
\end_inset


\family typewriter
IllegalArgumentException
\family default
 if the specified CRC32 value is less than 0 or greater than 
\family typewriter
0xFFFFFFFF
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getCrc() Returns the CRC32 checksum of the uncompressed entry data, or -1
 if not known.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setMethod(int
\begin_inset space ~
\end_inset

method) Sets the compression method for the entry, which must be 
\family typewriter
STORED
\family default
 or 
\family typewriter
DEFLATED
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMethod() Returns the compression method of the entry, or -1 if not specified.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setExtra(byte[]
\begin_inset space ~
\end_inset

extra) Sets the optional extra field data for the entry.
 It will throw an 
\family typewriter
IllegalArgumentException
\family default
 if the length of the specified extra field data is greater than 
\family typewriter
0xFFFF
\family default
 bytes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getExtra() Returns the extra field data for the entry, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setComment(String
\begin_inset space ~
\end_inset

comment) Sets the optional comment string for the entry.
 It will throw an 
\family typewriter
IllegalArgumentException
\family default
 if the length of the specified comment string is greater than 
\family typewriter
0xFFFF
\family default
 bytes.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getComment() Returns the comment string for the entry, or 
\family typewriter
null
\family default
 if none.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
isDirectory() Returns 
\family typewriter
true
\family default
 if this is a directory entry.
 A directory entry is defined to be one whose name ends with a 
\family typewriter
/
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() Returns a string representation of the ZIP entry.
 This is just the name as returned by 
\family typewriter
getName()
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hashCode() Returns the hash code value for this entry.
 This is just the hash code of the name returned by 
\family typewriter
getName()
\family default
.
 
\end_layout

\begin_layout Chapter
ZipFile
\end_layout

\begin_layout Standard
This class represents a ZIP file.
 It has the following constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ZipFile(String
\begin_inset space ~
\end_inset

name) Creates a ZIP file with the given name.
\end_layout

\begin_layout Standard
It also has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Closes the ZIP file.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
entries() Returns all the ZIP entries as a 
\family typewriter
ZipEntry
\family default
 array.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getEntry(String
\begin_inset space ~
\end_inset

name) Returns the ZIP entry which has the given name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getEntryStream(String
\begin_inset space ~
\end_inset

name) Returns a stream to fetch data from the ZIP entry which has the given
 name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getName() Returns the ZIP file name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
size() Returns the ZIP file size.
\end_layout

\begin_layout Chapter
ZLib
\end_layout

\begin_layout Standard
Utility class that provides static methods to perform full stream compression
 and decompression using the zlib algorithm.
\end_layout

\begin_layout Standard
It has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out) Deflates the given stream 
\family typewriter
in
\family default
 with the specified compression level, writing the result to the given stream
 
\family typewriter
out
\family default
.
 Compressed data will be generated in zlib format using the default strategy
 and the default compression level.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

compressionLevel) Deflates the given stream 
\family typewriter
in
\family default
 with the specified compression level, writing the result to the given stream
 
\family typewriter
out
\family default
.
 Compressed data will be generated in zlib format using the default strategy.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

compressionLevel,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

strategy,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

noWrap) Deflates the given stream 
\family typewriter
in
\family default
 using the specified strategy and compression level, writing the result
 to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
nowrap == true
\family default
 then the zlib header and checksum fields will not be used in order to support
 the compression format used in both gzip and pkzip.
 
\end_layout

\begin_deeper
\begin_layout Standard
The
\family typewriter
 
\family default
compression Level
\family typewriter
 
\family default
value must be between -1 and 9, where:
\end_layout

\begin_layout Itemize
-1: Default compression level.
\end_layout

\begin_layout Itemize
0: Storage only, no compression.
\end_layout

\begin_layout Itemize
1 – 9: Defines nine levels of compression, being 1 the less efficient (also
 the fastest) and 9 the most efficient (also the slowest).
 
\end_layout

\begin_layout Standard
You may also use one of the constants below:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
NO_COMPRESSION Constant for compression level 0.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BEST_SPEED Constant for compression level 1.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
BEST_COMPRESSION Constant for compression level 9.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
DEFAULT_COMPRESSION Constant for the platform's default compression level
 (usually 5 or 6), same as -1.
\end_layout

\begin_layout Standard
The compression strategy value must be one of the following:
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
DEFAULT_STRATEGY
\family default
 Default compression strategy.
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
FILTERED
\family default
 Compression strategy best used for data consisting mostly of small values
 with a somewhat random distribution.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0

\family typewriter
HUFFMAN_ONLY
\family default
 Compression strategy for Huffman coding only.
 
\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn) Attempts to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out) Attempts to fully read the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 It's equivalent to the calling of the above method passing the value -1
 for 
\family typewriter
sizeIn
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

noWrap) Attempts to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
 If the parameter 
\family typewriter
noWrap == true
\family default
 then the zlib header and checksum fields will not be used.
 This provides compatibility with the compression format used by both gzip
 and pkzip.
 
\begin_inset Newline newline
\end_inset

Note: When using the 
\family typewriter
noWrap
\family default
 option it is also necessary to provide an extra "dummy" byte as input.
 This is required by the zlib native library in order to support certain
 optimizations.
 
\end_layout

\begin_layout Chapter
GZip
\end_layout

\begin_layout Standard
Utility class that provides static methods to perform full stream compression
 and decompression using the gzip algorithm.
 The GZip algorithm is provided with the ZLib library.
 
\end_layout

\begin_layout Standard
It has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out) Deflates the given stream 
\family typewriter
in
\family default
 writing the result to the given stream 
\family typewriter
out
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn) Attempts to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out) Attempts to fully read the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 It's equivalent to the calling the above method passing the value -1 for
 
\family typewriter
sizeIn
\family default
.
\end_layout

\begin_layout Standard
The classes ZLib and GZip interface is almost identical, the only difference
 is that you may specify the desired compression level when deflating with
 ZLib.
\end_layout

\begin_layout Chapter
Checksum 
\end_layout

\begin_layout Standard
Abstract class to compute a data checksum used by checked input/output streams.
 A data checksum can be updated by one byte or with a byte array.
 After each update the value of the current checksum can be returned by
 calling 
\family typewriter
getValue()
\family default
.
 The complete checksum object can also be reset so it can be used again
 with new data.
 
\end_layout

\begin_layout Standard
This class only has a public default constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getValue() Returns the data checksum computed so far.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset() Resets the data checksum as if no update was ever called.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(int
\begin_inset space ~
\end_inset

bval) Adds one byte to the data checksum.
 The higher bytes of the integer are ignored.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

off,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len) Adds part of the byte array to the data checksum.
 
\end_layout

\begin_layout Chapter
Adler32 
\end_layout

\begin_layout Standard
Computes an Adler-32 checksum for a stream of data.
 An Adler-32 checksum is not as reliable as a CRC32 checksum, but a lot
 faster to compute.
 
\end_layout

\begin_layout Standard
The specification for Adler-32 may be found in RFC 1950 (ZLIB Compressed
 Data Format Specification version 3.3).
 
\end_layout

\begin_layout Standard
From that document: 
\end_layout

\begin_layout Standard
"ADLER32 (Adler-32 checksum) This contains a checksum value of the uncompressed
 data (excluding any dictionary data) computed according to Adler-32 algorithm.
 This algorithm is a 32-bit extension and improvement of the Fletcher algorithm,
 used in the ITU-T X.224 / ISO 8073 standard.
 
\end_layout

\begin_layout Standard
Adler-32 is composed of two sums accumulated per byte: 
\family typewriter
s1
\family default
 is the sum of all bytes, 
\family typewriter
s2
\family default
 is the sum of all 
\family typewriter
s1
\family default
 values.
 Both sums are done modulo 65521.
 
\family typewriter
s1
\family default
 is initialized to 1, 
\family typewriter
s2
\family default
 to zero.
 The Adler-32 checksum is stored as 
\family typewriter
s2*65536 + s1
\family default
 in most-significant-byte first (network) order." 
\end_layout

\begin_layout Standard
"8.2.
 The Adler-32 algorithm 
\end_layout

\begin_layout Standard
The Adler-32 algorithm is much faster than the CRC32 algorithm yet still
 provides an extremely low probability of undetected errors.
 
\end_layout

\begin_layout Standard
The modulo on unsigned long accumulators can be delayed for 5552 bytes,
 so the modulo operation time is negligible.
 If the bytes are 
\family typewriter
a
\family default
, 
\family typewriter
b
\family default
, 
\family typewriter
c
\family default
, the second sum is 
\family typewriter
3a + 2b + c + 3
\family default
, and so is position and order sensitive, unlike the first sum, which is
 just a checksum.
 That 65521 is prime is important to avoid a possible large class of two-byte
 errors that leave the check unchanged (the Fletcher checksum uses 255,
 which is not prime and which also makes the Fletcher check insensitive
 to single byte changes 
\family typewriter
0 <-> 255
\family default
) .
\end_layout

\begin_layout Standard
The sum 
\family typewriter
s1
\family default
 is initialized to 1 instead of zero to make the length of the sequence
 part of 
\family typewriter
s2
\family default
, so that the length does not have to be checked separately (any sequence
 of zeroes has a Fletcher checksum of zero)."
\end_layout

\begin_layout Standard
This class extends the class 
\family typewriter
Checksum
\family default
.
 It has a public default constructor, which creates a new instance of the
 
\family typewriter
Adler32
\family default
 class.
 The checksum starts off with a value of 1.
\end_layout

\begin_layout Standard
It has all methods of the 
\family typewriter
Checksum
\family default
 class and the following one:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

buffer) Updates the checksum with all the bytes taken from the given array.
 
\end_layout

\begin_layout Chapter
CRC232
\end_layout

\begin_layout Standard
Computes CRC32 data checksum of a data stream.
 The actual CRC32 algorithm is described in RFC 1952 (GZIP file format specifica
tion version 4.3).
 It can be used to get the CRC32 over a stream if used with checked input/output
 streams.
 It extends the abstract class 
\family typewriter
Checksum
\family default
.
 All the methods of 
\family typewriter
Adler32
\family default
 are avaiable for this class, except that they are used for a CRC32.
\end_layout

\begin_layout Part
DESKTOP SYNCHRONIZATION
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
TotalCross provides a Synchronization API to develop conduits, which are
 TotalCross desktop applications that automatically synchronize files from
 your device to your computer and vice-versa.
\end_layout

\begin_layout Standard
Since the conduit is actually a TotalCross application, you won't have to
 write a conduit for each device you want to support.
 However, there are a few limitations:
\end_layout

\begin_layout Itemize
Conduits can only be used on Windows 2000 and above, because currently this
 is the only desktop OS supported.
\end_layout

\begin_layout Itemize
Currently the synchronization API only supports WinCE and PalmOS devices.
\end_layout

\begin_layout Itemize
Its functionality is based on the desktop synchronization software provided
 for your target device, so you're required to have it installed on your
 desktop.
 The right synchronization software depends on the desktop OS and the target
 device OS, as listed below:
\end_layout

\begin_deeper
\begin_layout Itemize
WinCE device and Windows Vista or Seven – requires Windows Mobile Device
 Center version 6.0 and above.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember: The Windows Mobile Device Center is fully compatible only with
 Windows Mobile 2003 devices and later.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
WinCE device and Windows 2000 or XP – requires Microsoft ActiveSync.
 The version 4.5.0 works with most devices, but some devices may require another
 specific version.
\end_layout

\begin_layout Itemize
PalmOS device and Windows – requires the Palm Desktop with the HotSync Manager
 6.0.1.
 The conduit may work with other versions of the HotSync Manager, but the
 version 6.0.1 is recommended.
\end_layout

\end_deeper
\begin_layout Standard
A conduit is usually triggered by the desktop synchronization software under
 a specific circumstance.
 Its behavior is slightly different depending on the target device:
\end_layout

\begin_layout Itemize
WinCE – The conduit is executed whenever a device is connected to the desktop
 and recognized by the Microsoft ActiveSync or the Windows Mobile Device
 Center.
 No extra interaction is required.
\end_layout

\begin_layout Itemize
PalmOS – The conduit is executed during the HotSync operation, which must
 be started by the user.
\end_layout

\begin_layout Chapter
Conduit usage
\end_layout

\begin_layout Standard
A conduit is usually not executed directly by the user, instead, it is registere
d to be executed when a specific event occurs.
\end_layout

\begin_layout Standard
The 
\family typewriter
Conduit
\family default
 class already implements methods to register, unregister or configure a
 conduit, that are executed by invoking the conduit executable from the
 command line passing the desired parameter:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00
/rp Registers this conduit for PalmOS devices.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00
/up Unregisters this conduit for PalmOS devices.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00
/rw Registers this conduit for WinCE devices.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00
/uw Unregisters this conduit for WinCE devices.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00
/c Shows the configuration panel (if available) for this conduit.
\end_layout

\begin_layout Standard
For example, to register the PainterConduit sample to retrieve the image
 created with the Painter sample for a PalmOS device:
\end_layout

\begin_layout Standard

\family typewriter
PainterConduit.exe /rp
\end_layout

\begin_layout Standard
To unregister:
\end_layout

\begin_layout Standard

\family typewriter
PainterConduit.exe /up
\end_layout

\begin_layout Part
NET
\end_layout

\begin_layout Chapter
Socket
\end_layout

\begin_layout Standard
The 
\family typewriter
Socket
\family default
 class allows you to open TCP/IP connections from your device.
 To be able to establish a connection with a particular server, both the
 server and the device must be connected to a common network (e.g.
 a local network that connects your computers and devices, or the Internet).
\end_layout

\begin_layout Standard
A 
\family typewriter
Socket
\family default
 object denotes a client-server connection over a network using the TCP/IP
 protocol, where the device acts as a client, which connects to a specific
 server port.
\end_layout

\begin_layout Standard
The 
\family typewriter
Socket
\family default
 class does not provide many methods besides the ones inherited from 
\family typewriter
Stream
\family default
.
 After creating a socket, you'll usually just perform read and write operations,
 closing the socket after you're done.
\end_layout

\begin_layout Standard
However, streams that handle remote connections are more likely to fail
 due to hardware and communication problems, so we shouldn't handle socket
 operations the same way we do with file operations.
\end_layout

\begin_layout Standard
In TotalCross, socket's read and write operations are blocking with a timeout
 – that means that socket methods will block the thread until the operation
 is completed, or the timeout for the operation is reached.
 If the operation is completed, the method returns immediately, regardless
 of the amount of time left.
 Otherwise, the method will just return the amount of data processed.
\end_layout

\begin_layout Standard
It's important to notice that no exception is thrown if the method times
 out.
 This is just a way to prevent your thread from being blocked indefinitely
 because of communication problems.
 You may just keep executing the same method until it finishes processing
 all the data.
\end_layout

\begin_layout Standard

\family typewriter
Socket
\family default
 constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

noLinger) Creates a new socket that attempts to establish a connection by
 looking up the given host and performing the 3 way TCP/IP handshake.
 The argument 
\family typewriter
port
\family default
 specifies the server port to connect to, while 
\family typewriter
timeout
\family default
 specifies the timeout for this operation in milliseconds.
 The argument 
\family typewriter
noLinger
\family default
 indicates if a socket upon close should shutdown the connection immediately
 or check for any server response before closing.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout) Same as the above, but uses the default value 
\family typewriter
false
\family default
 for the argument 
\family typewriter
noLinger
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port) Same as the above, but uses the default value 1500 (milliseconds)
 for the argument 
\family typewriter
timeout
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

params) Opens a socket with additional parameters.
 Each parameter is specified in a 
\family typewriter
key=value
\family default
 form and separated by a 
\family typewriter
;
\family default
 from the next parameter.
 For example: 
\family typewriter
p1=v1;p2=v2
\family default
.
 On BlackBerry, the following parameters are valid: 
\family typewriter
apn=[value]
\family default
, 
\family typewriter
apnuser=[value]
\family default
, 
\family typewriter
apnpass=[value]
\family default
, 
\family typewriter
directtcp=[true | false]
\family default
, and 
\family typewriter
nolinger=[true | false]
\family default
.
 On Palm OS devices, the only valid parameter is 
\family typewriter
nolinger=[true | false]
\family default
.
 If 
\family typewriter
true
\family default
, the socket is closed immediately, and no ack is waited from the server.
 Note that this must be done for the very first socket creation per application.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You cannot open a socket before the main event loop.
 In other words, you cannot open a socket in the app's constructor, but
 you can in the 
\family typewriter
initUI()
\family default
 method.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The socket general behavior, including the timeout for read and write operations
, are stored in the following public fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readTimeout The timeout value for read operations.
 Its default value is 
\family typewriter
Socket.DEFAULT_READ_TIMEOUT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeTimeout The timeout value for write operations.
 Its default value is 
\family typewriter
Socket.DEFAULT_WRITE_TIMEOUT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
refreshBeforeEachRead If set to 
\family typewriter
true
\family default
, the status of all connections will be checked and closed connections will
 be reopened before each read/write operation.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This field is ONLY used on PalmOS devices.
 It is simply ignored on other platforms.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usually you should not worry about the read and write timeouts.
 The default values will be fine in most cases.
 However, you may increase the timeout value if you experience problems
 with slow connections.
\end_layout

\begin_layout Standard
Reducing the timeout value is usually a bad idea.
 If your device has a high speed connection, the read and write methods
 should also be fast and return before the timeout is reached.
 However, reducing the timeout value won't give you any benefit, and may
 even decrease your program performance.
\end_layout

\begin_layout Standard
Methods for read and write operations:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readBytes(byte[]
\begin_inset space ~
\end_inset

buf) Attempts to read enough bytes from this socket to fill the given buffer.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readLine() Attempts to read a line of text from this socket.
 A line is a sequence of characters delimited by any character lower than
 blank.
 This method correctly handles newlines with 
\family typewriter

\backslash
n
\family default
 or 
\family typewriter

\backslash
r
\backslash
n
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf) Attempts to write the contents of the given buffer to this socket.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeBytes(String
\begin_inset space ~
\end_inset

s) Attempts to write the given string to this socket.
\end_layout

\begin_layout Standard
Except for the method 
\family typewriter
readLine()
\family default
, the methods above are just available for convenience and may be replaced
 by read/write calls inherited from 
\family typewriter
Stream
\family default
.
 This has a cost however - using these methods increases the number of method
 calls for each read/write operation by one (they actually just call the
 
\family typewriter
Stream
\family default
 methods).
 If your application makes heavy use of sockets, you may avoid using these
 methods to improve its performance.
\end_layout

\begin_layout Chapter
ServerSocket
\end_layout

\begin_layout Standard
This class implements server sockets.
 A server socket waits for requests to come in over the network.
 It may then accept the incoming TCP/IP connection and perform some operation
 based on that request, possibly returning a result to the requester.
\end_layout

\begin_layout Standard

\family typewriter
ServerSocket
\family default
 constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ServerSocket(int
\begin_inset space ~
\end_inset

port) Attempts to open a server socket at the specified port number.
 By default, the maximum number of simultaneous connections allowed is 
\family typewriter
DEFAULT_BACKLOG
\family default
 and the default timeout for accept is 
\family typewriter
DEFAULT_SOTIMEOUT
\family default
, and the server is not bound to any specific local address.
 The port number must be between 0 and 65535.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout) Same as the above, but you may also specify the timeout value,
 in milliseconds, for the accept operation.
 This value must be a positive value, or 0 to wait forever.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

addr) Same as the above, but you may also specify a local address, which
 the server should bind to.
 If the argument 
\family typewriter
addr
\family default
 has a 
\family typewriter
null
\family default
 value, it is ignored and the server is not bind to any address.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backlog,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

addr) Same as the above, but you may also specify the maximum number of
 simultaneous connections allowed with the argument backlog, which must
 have a positive value.
\end_layout

\begin_layout Standard
You may retrieve the address and port values of this 
\family typewriter
ServerSocket
\family default
 with 
\family typewriter
getHost()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

getLocalPort()
\family default
.
\end_layout

\begin_layout Standard
After creating a server socket, you may use the method 
\family typewriter
accept()
\family default
 to wait for incoming connections.
 This method blocks the thread for the amount of time specified by the timeout
 value passed to the constructor, returning a 
\family typewriter
null
\family default
 value when the timeout is over, or until a connection request is received
 and accepted, returning a socket instance representing the new connection.
\end_layout

\begin_layout Standard
The returned object is always a valid 
\family typewriter
Socket
\family default
 instance, that may be used to transfer data between this server and the
 client that requested the connection, and that should be closed when no
 longer needed.
\end_layout

\begin_layout Standard
You should never use blocking operations on threads handling events and/or
 the graphical interface, otherwise the user won't be able to interact with
 the application.
 Take a look at the source code of the sample ServerSocketTest.
\end_layout

\begin_layout Standard
Finally, you may use the method 
\family typewriter
close()
\family default
 to close this
\family typewriter
 
\family default
server socket, releasing any associated resources.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember to close any sockets associated to this server socket before closing
 it.
 Otherwise all open sockets will throw an 
\family typewriter
IOException
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
SOAP Webservices
\end_layout

\begin_layout Quote
“SOAP Version 1.2 (SOAP) is a lightweight protocol intended for exchanging
 structured information in a decentralized, distributed environment.
 It uses XML technologies to define an extensible messaging framework providing
 a message construct that can be exchanged over a variety of underlying
 protocols.
 The framework has been designed to be independent of any particular programming
 model and other implementation specific semantics.” - Definition from SOAP
 Version 1.2 Part 1: Messaging Framework (Second Edition) - 
\begin_inset CommandInset href
LatexCommand href
name "W3C Recommendation 27 April 2007"
target "http://www.w3.org/TR/2007/REC-soap12-part1-20070427/#intro"

\end_inset


\end_layout

\begin_layout Standard
Because of its implementation independence, the SOAP protocol is widely
 used on the implementation of Web Services.
\end_layout

\begin_layout Section
The SOAP class
\end_layout

\begin_layout Standard
This class represents a SOAP message that, when executed, is sent to the
 server in a HTTP request .
 The server response is then received, processed and the answer made available.
\end_layout

\begin_layout Standard
Before creating a instance of 
\family typewriter
SOAP
\family default
, you may set the following class fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
prefix The prefix string used to start the request.
 Its default value is:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

\family typewriter
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
\begin_inset Newline newline
\end_inset

 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
\begin_inset Newline newline
\end_inset

 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
\end_layout

\begin_layout Plain Layout

\family typewriter
<soapenv:Body>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
suffix The suffix string used to finish the request.
 Its default value is:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
</soapenv:Body>
\end_layout

\begin_layout Plain Layout

\family typewriter
</soapenv:Envelope>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout FieldList
\labelwidthstring 0
debug Changing this value to 
\family typewriter
true
\family default
 enables debug mode, which writes XML parsing information on the DebugConsole
 (or the default error output when running on JDK).
\end_layout

\begin_layout Standard
To create a new 
\family typewriter
SOAP
\family default
 instance, you must use the following constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
SOAP(String
\begin_inset space ~
\end_inset


\family typewriter
mtd,
\family default

\begin_inset space ~
\end_inset


\family typewriter
String
\family default

\begin_inset space ~
\end_inset


\family typewriter
uri)
\family default
 – Creates a new SOAP request where 
\family typewriter
mtd
\family default
 specifies the remote method to be executed, and 
\family typewriter
uri
\family default
 the address of the Web Service.
\end_layout

\begin_layout Standard
After creating a new 
\family typewriter
SOAP
\family default
 object, you may set some of its following instance fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
alternativeReturnTag By default, the XML parser used by SOAP will recognize
 as an answer tag, any tags whose name ends with “result” or “return” (ignoring
 the case).
 This field, if set, specifies an alternative answer tag name, recognizing
 any XML element that ends with the specified value as an answer tag.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The 
\family typewriter
alternativeReturnTag
\family default
 IS CASE SENSITIVE, unlike the SOAP default tag names.
 Also, the 
\family typewriter
alternativeReturnTag
\family default
 does not replace the default values.
 It's just a new value with higher priority over the default ones.
\end_layout

\end_inset


\end_layout

\begin_layout FieldList
\labelwidthstring 0
namespace String that identifies the service's namespace.
 Its default value is: 
\family typewriter
http://schemas.xmlsoap.
 org/soap/
\end_layout

\begin_layout FieldList
\labelwidthstring 0
openTimeout Specifies the connection open timeout value in milliseconds.
 Its default value is defined by the constant 
\family typewriter
DEFAULT_OPEN_TIMEOUT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readTimeout Specifies the connection read timeout value in milliseconds.
 Its default value is defined by the constant 
\family typewriter
DEFAULT_READ_TIMEOUT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
mtd Stores the name of the remote method.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
uri Stores the address to the Web Service.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You may change both the 
\family typewriter
mtd
\family default
 and the 
\family typewriter
uri
\family default
 values before executing the request.
 Although this seems to be pointless, because these values are passed to
 the constructor.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the remote method expects any arguments, you must set them using the
 
\family typewriter
setParam()
\family default
 method.
 However, there are several versions of this method to cover different argument
 types.
 Listing all of them would be pointless, so we'll define a generic type
 that we'll refer as 
\family typewriter
<type>
\family default
, and may be one of the of the following:
\end_layout

\begin_layout Itemize

\family typewriter
int
\end_layout

\begin_layout Itemize

\family typewriter
boolean
\end_layout

\begin_layout Itemize

\family typewriter
double
\end_layout

\begin_layout Itemize

\family typewriter
String
\end_layout

\begin_layout Standard
So, whenever a SOAP method is described like 
\family typewriter
setParam(<type> param)
\family default
, you can safely assume there are four versions of this method, one for
 each type listed above.
 Other type of parameters can be passed using similar methods.
\end_layout

\begin_layout Standard
SOAP methods for parameters setting:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(<type>
\begin_inset space ~
\end_inset

param) Sets the given value in the method's argument order.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(<type>[]
\begin_inset space ~
\end_inset

param) Sets the given array in the method's argument order.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(<type>
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName) Sets the given value in the method's argument order, identifying
 it with the given name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(<type>[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName) Sets the given array in the method's argument order, identifying
 it with the given name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(byte[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName) Sets a byte array in the method's argument order, identifying
 it with the given name.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(String
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramType) Sets a 
\family typewriter
String
\family default
 parameter in the method, identifying it with the given name and specifying
 its type as the given one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setParam(String[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramType) Sets a 
\family typewriter
String
\family default
 array in the method's argument order, identifying it with the given name
 and specifying its type as the given one.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setObjectParam(String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

fieldNames,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

fieldValues) Sets an 
\family typewriter
Object
\family default
 param in the method's argument order, by specifying its name, field names
 and field values.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setObjectArrayParam(String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

fieldNames,
\begin_inset space ~
\end_inset

Vector
\begin_inset space ~
\end_inset

fieldValues) Sets an 
\family typewriter
Object
\family default
 array param in the method's argument order, by specifying its name, field
 names and field values.
\end_layout

\begin_layout Standard
The only thing left to do now is to execute the request and check the service's
 answer:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
execute() This method simply executes the prepared SOAP request.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAnswer() To retrieve the method's answer, you must call this method after
 
\family typewriter
execute()
\family default
.
 The return type of this method is 
\family typewriter
Object
\family default
, but it may return only three different values:
\end_layout

\begin_deeper
\begin_layout FieldList
\labelwidthstring 0
null When the remote method has no return value or the execute failed for
 any reason.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
String When the remote method returns a single value.
 If the expected value is not 
\family typewriter
String
\family default
, you must convert the received 
\family typewriter
String
\family default
 to the right type.
 (e.g.
 if you're expecting an int value, you can use 
\family typewriter
Convert.toInt()
\family default
).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
String[] When the remote method returns an array or an 
\family typewriter
Object
\family default
.
 If the expected value is not a 
\family typewriter
String
\family default
 array, you must convert each value of the array to the right type.
 If it's an object, the array contains its field values.
\end_layout

\begin_layout Standard
The remote method return type is known, so you may just typecast the 
\family typewriter
Object
\family default
 returned by 
\family typewriter
getAnswer()
\family default
 to 
\family typewriter
String
\family default
 or 
\family typewriter
String array
\family default
, converting its values if necessary.
\end_layout

\end_deeper
\begin_layout Chapter
HTTPS / SSL
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
The TotalCross SSL native library is a wrapper library of the great axTLS
 package.
 The axTLS embedded SSL project written by Cameron Rich is a highly configurable
 client/server TLSv1 library designed for platforms with small memory requiremen
ts (see 
\begin_inset CommandInset href
LatexCommand href
target "http://axtls.cerocclub.com.au/index.htm"

\end_inset

 for more details).
\end_layout

\begin_layout Standard
The original package supports Linux, Win32, Solaris & Cygwin.
 The SuperWaba team added support for Palm OS 5.0 and Symbian through an
 integration with the existing TotalCross VM network capabilities.
\end_layout

\begin_layout Standard
This native library adds support for SSL (Secured Sockets Layer) communications
 to secure data transfers between authenticated devices and/or servers.
\end_layout

\begin_layout Section
Security background
\end_layout

\begin_layout Standard
For general information about the features of TLS (Transport Layer Security)
 and its usage, you may read the Wiki page available at 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/Transport_Layer_Security"

\end_inset

.
 If you are lucky, you may even read a good translation in your personal
 language.
\end_layout

\begin_layout Standard
The english version provides a basic protocol description for everyone.
 For those who want to go further, the reference is the TLS protocol version
 1.0 
\begin_inset CommandInset href
LatexCommand href
name "RFC 2246 (http://tools.ietf.org/html/rfc2246)"
target "http://tools.ietf.org/html/rfc2246"

\end_inset

.
\end_layout

\begin_layout Standard
Basically, TLS allows secured and authenticated communication between two
 components generally so-called client & server.
 It relies on X509 certificates, their associated private keys to encrypt
 and associated public keys to decrypt exchanged data.
 The certificates could be self signed or signed by an Authority known as
 CA (Certification Authority) that have to be trusted.
\end_layout

\begin_layout Standard
Insofar the subject of SSL based security is well documented on the web,
 we won't go further in the TLS description and invite people interrested
 in diving more deeply in secured communications to read the plenty of articles,
 books and HOWTOs available on the Internet.
\end_layout

\begin_layout Section
Generating security material
\end_layout

\begin_layout Standard
We will concentrate on the more general deployment of X509 client or server
 certificates signed by a Certification Authority (CA) (see 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/X.509"

\end_inset

 for more details).
 First we will have to create our own CA, that could be replaced by any
 "well known" commercial CA such as Verisign, Thawte, etc.
 if you have the need for a public authority.
\end_layout

\begin_layout Standard
We will use openssl (
\begin_inset CommandInset href
LatexCommand href
target "www.openssl.org"

\end_inset

) as security engine to generate the security material involved in certificate
 based authentication/encryption.
 It's a well spread SSL implementation providing powerfull tools to create
 and manage all kinds of security materials available on many platforms.
\end_layout

\begin_layout Section
Create a private CA
\end_layout

\begin_layout Standard
Generate a self signed certificate that will be used as Certification Authority
 (CA).
 The authority will be valid for 10 years (approx 3650 days).
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
bash$ openssl req -new -x509 -days 3650 -keyout cakey.pem -out cacert.pem
\end_layout

\begin_layout Plain Layout

\family typewriter
Generating a 1024 bit RSA private key
\end_layout

\begin_layout Plain Layout

\family typewriter
.++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
.....++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
writing new private key to 'cakey.pem'
\end_layout

\begin_layout Plain Layout

\family typewriter
Enter PEM pass phrase: xxxxx
\end_layout

\begin_layout Plain Layout

\family typewriter
Verifying - Enter PEM pass phrase: xxxxx
\end_layout

\begin_layout Plain Layout

\family typewriter
-----
\end_layout

\begin_layout Plain Layout

\family typewriter
You are about to be asked to enter information that will be incorporated
 into your certificate request.
\end_layout

\begin_layout Plain Layout

\family typewriter
What you are about to enter is what is called a Distinguished Name or a
 DN.
\end_layout

\begin_layout Plain Layout

\family typewriter
There are quite a few fields but you can leave some blank
\end_layout

\begin_layout Plain Layout

\family typewriter
For some fields there will be a default value,
\end_layout

\begin_layout Plain Layout

\family typewriter
If you enter '.', the field will be left blank.
\end_layout

\begin_layout Plain Layout

\family typewriter
-----
\end_layout

\begin_layout Plain Layout

\family typewriter
Country Name (2 letter code) [AU]:BR
\end_layout

\begin_layout Plain Layout

\family typewriter
State or Province Name (full name) [Some-State]:Rio de Janeiro state
\end_layout

\begin_layout Plain Layout

\family typewriter
Locality Name (eg, city) []:Rio de Janeiro
\end_layout

\begin_layout Plain Layout

\family typewriter
Organization Name (eg, company) [Internet Widgits Pty Ltd]:SuperWaba Ltda
\end_layout

\begin_layout Plain Layout

\family typewriter
Organizational Unit Name (eg, section) []:SuperWaba dev.
 department
\end_layout

\begin_layout Plain Layout

\family typewriter
Common Name (eg, YOUR name) []:SuperWaba Sample CA
\end_layout

\begin_layout Plain Layout

\family typewriter
Email Address []:guich@superwaba.com.br
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first entry is the private key password.
 The private key is used to sign other certificates to assert they are authentic.
 The private key is protected by a password as a further security because
 the CA private key is a main secret that have to be protected.
\end_layout

\begin_layout Standard
Next you will have to fill in X500 attributes describing the certificate
 subject.
 In our case, we enter information describing the SuperWaba CA (Certification
 Authority).
 Any agent trusting this CA, will authenticate certificates that have been
 signed by it through the CA embedded public key.
\end_layout

\begin_layout Standard
We now have two files, 
\family typewriter
cakey.pem
\family default
 containing an encrypted version of the CA private key protected by a password
 and 
\family typewriter
cacert.pem
\family default
 containing an X509 certificate embedding the CA public key that could be
 redistributed.
\end_layout

\begin_layout Standard
Finally, you have to create a text file named 
\family typewriter
ca.srl
\family default
 with the content "00" for certicate signing counting, just execute the
 following command :
\end_layout

\begin_layout Standard

\family typewriter
bash$ echo “00” > ca.srl
\end_layout

\begin_layout Section
Create a client or server X509 certificate
\end_layout

\begin_layout Standard
First, you have to generate a new private key.
 SSL supports unencrypted and aes128/256 encrypted private keys.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl genrsa -aes128 -out mykey.pem 512
\end_layout

\begin_layout Standard
You may replace 
\family typewriter
-aes128
\family default
 by 
\family typewriter
-aes256
\family default
 for a stronger cipher, or remove 
\family typewriter
-aes128
\family default
 at all to generate a private key that is not encrypted.
 When you ask for an encrypted key, you have to enter a password used in
 the ciphering.
 The last option represent the key size in bits, values between 512 and
 4096 bits for a higher security are accepted, but always keep in mind that
 higher security implies longer processing times especially critical on
 embedded devices.
\end_layout

\begin_layout Standard
Next you have to generate a certificate request.
 This file could be transmitted to one of the commercial CA companies for
 signing or could be signed by our previously created private CA.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl req -new -out my.req -key mykey.pem
\end_layout

\begin_layout Standard
Add 
\family typewriter
-x509
\family default
 if you want to generate a self signed certificate if you don't want to
 use a CA at all (in this case, you may name the file 
\family typewriter
mycert.pem
\family default
 rather than 
\family typewriter
my.req
\family default
).
 Insofar, the 
\family typewriter
out
\family default
 file will contain a finalized self-signed certificate rather than a certificate
 request.
\end_layout

\begin_layout Standard
Enter all information describing your client or your server component.
 The certificate request will be stored in the file 
\family typewriter
my.req
\family default
.
\end_layout

\begin_layout Standard
Finally, we will sign the certificate with the CA.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl x509 -CA cacert.pem -CAkey cakey.pem -CAserial ca.srl -req -in
 my.req -out mycert.pem -days 1460
\end_layout

\begin_layout Standard
The 
\family typewriter
cacert.pem
\family default
 is the CA certificate, 
\family typewriter
cakey.pem
\family default
 its above created PEM encrypted private key, 
\family typewriter
my.req
\family default
 is the certificate request file generated previously and 
\family typewriter
mycert.pem
\family default
 is the resulting signed certificate that can be used for authentication
 and encryption during 1460 days (4 years).
\end_layout

\begin_layout Section
Principle of an X509 authentication/encryption
\end_layout

\begin_layout Standard
X509 authentication/encryption is based on public/private key encryption
 that have a great characteristic.
 Indeed, the data ciphered by either key could only be deciphered by the
 other one.
\end_layout

\begin_layout Standard
A software component that has to be authenticated, such as a secured server,
 may now be configured to deliver to any client the previously generated
 certificate (contained in 
\family typewriter
mycert.pem
\family default
).
 It also has to load the associated certificate private key.
 That private key is used to cipher data transmited to the client.
 On the other side, the client uses the public key embedded in the accepted
 server certificate to decipher the data from the server and cipher the
 data to be sent back to the server so that the server can decipher with
 its private key.
 If the client is configured to trust any certificate that have been signed
 by the signing CA, it will be able to authenticate any certificate using
 the CA public key.
\end_layout

\begin_layout Section
SSL features
\end_layout

\begin_layout Standard
The SSL package supports both PEM and DER encrypted materials.
 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "DER (http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules)"
target "http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules"

\end_inset

 is an ASN.1 encoding of information, PEM (http://en.wikipedia.org/wiki/Privacy_Enh
anced_Mail) is a base64 encoding of a DER encoded data with a header "-----BEGIN
 " and a trailer "-----END " followed by a material type name.
 A PEM file may be dencrypted or encrypted with AES128 or AES256 ciphers
 only.
\end_layout

\begin_layout Standard
LiteSSL also supports the pkcs8 encoding that is a private key encryption
 format.
 But it supports only one ciphering algorithm that is PBE-SHA1-RC4-128.
 Here is the commandline to convert a PEM encoded private key into a pkcs8
 encoded format.
 Always use the 
\family typewriter
.p8
\family default
 file suffix to identify the pkcs8 format.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl pkcs8 -topk8 -in mykey.pem -inform PEM -out mykey.p8 
\begin_inset Newline newline
\end_inset

-outform DER -v1 PBE-SHA1-RC4-128
\end_layout

\begin_layout Standard
You will have to enter a password, that will be required to use the private
 key.
\end_layout

\begin_layout Standard
LiteSSL also supports pkcs12 that is a certificate/private key encryption
 format.
 But it supports only one ciphering algorithm that is PBE-SHA1-RC4-128.
 Here is the commandline to convert certificate and its associate encoded
 private key into a pkcs12 encoded format.
 Always use the 
\family typewriter
.p12
\family default
 file suffix to identify the pkcs12 format.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl pkcs12 -export -in server.pem -out server.p12 -name 
\begin_inset Newline newline
\end_inset

"myserver" -inkey server.key -certpbe PBE-SHA1-RC4-128 -keypbe 
\begin_inset Newline newline
\end_inset

PBE-SHA1-RC4-128
\end_layout

\begin_layout Standard
You will have to enter a password, that will be required to use the private
 key embedded in the pkcs12 encoded file.
\end_layout

\begin_layout Section
Restrictions
\end_layout

\begin_layout Standard
The Applet version is implemented on top of SUN's JSSE.
 This TLS implementation has some limitations that prevent the use of some
 security material formats supported by SSL on devices.
 Thus, private keys have to be in pkcs8 format only.
 Moreover, they can't be password protected.
 You have to add the 
\family typewriter
-nocrypt
\family default
 option to the commandline provided above to convert a PEM encoded private
 key to pkcs8 encoding.
\end_layout

\begin_layout Section
SSL usage
\end_layout

\begin_layout Standard
The 
\family typewriter
SSLUtil
\family default
 class provides functions to get information about the TLS stack layer.
\end_layout

\begin_layout Standard
The first class to instantiate is 
\family typewriter
SSLClient
\family default
 or 
\family typewriter
SSLServer
\family default
 (not currently supported).
 This class represents an SSL client or server context both inheriting from
 the 
\family typewriter
SSLCTX
\family default
 class that provides many SSL context common services.
 The main feature concerns the security material loading.
 Use 
\family typewriter
objLoad()
\family default
 to load material from files or memory.
 The arguments of this function are the material type (CA, X509 certificate,
 private keys, etc.), the filename or the memory containing the material,
 and finally a password for private keys loading if they are password based
 encrypted.
\end_layout

\begin_layout Standard
To succeed the handshake with a server, you have to trust its self-signed
 certificate or trust the CA certificate who signed the server's certificate.
 Use 
\family typewriter
objLoad(SSL_OBJ_X509_CACERT, “cacert.pem”, null)
\family default
 to trust the server's signing CA.
 If the server requires client authentication, you will have to send your
 own client certificate.
 Use 
\family typewriter
objLoad(SSL_OBJ_X509_CERT, “mycert.pem”, null)
\family default
 to load your client certificate and 
\family typewriter
objLoad(SSL_OBJ_RSA_KEY, 
\begin_inset Newline newline
\end_inset

“mykey.pem”, “pass”)
\family default
 to load the client certificate associated private key protected by the
 
\family typewriter
pass
\family default
 password.
\end_layout

\begin_layout Standard
Next, you have to call 
\family typewriter
connect()
\family default
 on the context instance to create an SSL instance linked with a previously
 created socket.
 The SSL handshake starts immediatly to try to establish an authenticated/cipher
ed communication.
\end_layout

\begin_layout Standard
The SSL handshake succeeded if it the 
\family typewriter
connect()
\family default
 call returns an SSL instance and the 
\family typewriter
handshakeStatus()
\family default
 function call on that instance returns 
\family typewriter
SSL_OK
\family default
.
 Consequently, you may check the subject of the peer certificate with the
 
\family typewriter
getCertificateDN()
\family default
 call to identify it and the context could be used to write and read ciphered
 data until the “dispose” call terminates the SSL communication.
 The peer receives a protocol alert to signal a link shutdown.
\end_layout

\begin_layout Standard
The SSL write of data returns the amount of bytes written or an error if
 the writing failed.
 The SSL read of data may return 
\family typewriter
SSL_OK
\family default
 that indicates that the read is not yet terminated and may be called again
 to achieve the reading of a block of decipherable data.
\end_layout

\begin_layout Chapter
e-mail
\end_layout

\begin_layout Standard
This chapter describes all classes in the 
\family typewriter
totalcross.net.mail
\family default
 package, which provides support for sending and receiving e-mails.
 
\end_layout

\begin_layout Standard
First you need to configure the SMTP properties: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MailSession session = MailSession.getDefaultInstance();
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_HOST, new Properties.Str("smtp.sample.com")); //
 SMTP host address
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_PORT, new Properties.Int(25)); // unless noticed
 otherwise by the server, SMTP uses port 25
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_USER, new Properties.Str("foo@bar.com")); // usually
 the full e-mail address
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_PASS, new Properties.Str("VerySecurePassword"));
 // e-mail account password 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sending a simple e-mail message:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Message myMessage = new Message(); // our new message
\end_layout

\begin_layout Plain Layout

myMessage.from = new Address("foo@bar.com", "Mr.
 Foo"); // the e-mail address I wan't to be visible to the recipient and
 a personal name.
\end_layout

\begin_layout Plain Layout

myMessage.addRecipient(RecipientType.TO, new Address("someone@somewhere.com",
 null)); // the recipient of the e-mail 
\end_layout

\begin_layout Plain Layout

myMessage.subject = "Testing SMTP with authentication"; // e-mail subject
\end_layout

\begin_layout Plain Layout

myMessage.setText("This is just a test message"); // simple e-mail with plain
 text
\end_layout

\begin_layout Plain Layout

Transport.send(myMessage); // sends our message using the propert Transport
 for this Message, and the properties defined on the default MailSession.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sending an e-mail with attachments: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// text part 
\end_layout

\begin_layout Plain Layout

Part textPart = new Part();
\end_layout

\begin_layout Plain Layout

textPart.setText("Plain text"); // image part
\end_layout

\begin_layout Plain Layout

Part imagePart = new Part();
\end_layout

\begin_layout Plain Layout

File image = new File("/myImage.png", File.READ_WRITE); // keep file open!
\end_layout

\begin_layout Plain Layout

imagePart.setContent(image, "image/png");
\end_layout

\begin_layout Plain Layout

imagePart.fileName = "myImage.png"; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// create the multiparts
\end_layout

\begin_layout Plain Layout

Multipart multipart = new Multipart();
\end_layout

\begin_layout Plain Layout

multipart.addPart(textPart);
\end_layout

\begin_layout Plain Layout

multipart.addPart(imagePart); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// create the message
\end_layout

\begin_layout Plain Layout

Message myMessage = new Message();
\end_layout

\begin_layout Plain Layout

myMessage.setContent(multipart);
\end_layout

\begin_layout Plain Layout

myMessage.subject = "E-mail with attachment";
\end_layout

\begin_layout Plain Layout

myMessage.from = new Address("from@someone.com", "Someone name");
\end_layout

\begin_layout Plain Layout

myMessage.addRecipient(Message.RecipientType.TO, new Address("to@url.com", "ToMe"));
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Transport.send(myMessage); // send the message
\end_layout

\begin_layout Plain Layout

image.close(); // close the image file AFTER the message is sent
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Receive a message, and open the first one available:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MailSession session = MailSession.getDefaultInstance();
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_HOST, new Properties.Str("pop3.sample.com"));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_PORT, new Properties.Int(110));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_USER, new Properties.Str("foo@bar.com"));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_PASS, new Properties.Str("VerySecurePassword"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Store store = MailSession.getDefaultInstance().getStore("pop3");
\end_layout

\begin_layout Plain Layout

store.connect();
\end_layout

\begin_layout Plain Layout

Folder folder = store.getFolder("INBOX");
\end_layout

\begin_layout Plain Layout

folder.open();
\end_layout

\begin_layout Plain Layout

int messageCount = folder.getMessageCount();
\end_layout

\begin_layout Plain Layout

if (messageCount > 0)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Message msg = folder.getMessage(1);
\end_layout

\begin_layout Plain Layout

	String msgContent = (String) msg.getContent();
\end_layout

\begin_layout Plain Layout

	if (msgContent != null) 
\end_layout

\begin_layout Plain Layout

		new MessageBox(msg.from.address, msgContent).popup();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

folder.close(true);
\end_layout

\begin_layout Plain Layout

store.close();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This package has the following classes:
\end_layout

\begin_layout Section
Address 
\end_layout

\begin_layout Standard
This class represents an Internet e-mail address using the syntax of RFC822.
 Typical address syntax is of the form 
\family typewriter
user@host.domain
\family default
 or 
\family typewriter
Personal Name
\family default
 
\family typewriter
<user@host.domain>
\family default
.
 
\end_layout

\begin_layout Standard
This class has two fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
address The e-mail address, which must have the form shown above.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
personal The name of the user e-mail address.
\end_layout

\begin_layout Standard
This class has just a constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Address(String
\begin_inset space ~
\end_inset

address,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

personal) Creates a new 
\family typewriter
Address
\family default
 object, which represents an Internet e-mail address.
 The address must be in RFC822 format.
 If the given address is 
\family typewriter
null
\family default
 or does not contain the character 
\family typewriter
@
\family default
, an 
\family typewriter
AddressException
\family default
 is thrown.
\end_layout

\begin_layout Standard
This class has just one method, 
\family typewriter
toString()
\family default
, which returns a string representation of an 
\family typewriter
Address
\family default
 object.
 
\end_layout

\begin_layout Section
DataContentHandler 
\end_layout

\begin_layout Standard
This is an abstract class that defines the basic interface for implementations
 of 
\family typewriter

\begin_inset Newline newline
\end_inset

DataContentHandler
\family default
.
 
\end_layout

\begin_layout Section
BinaryContentHandler 
\end_layout

\begin_layout Standard
This class is an implementation of 
\family typewriter
DataContentHandler
\family default
 that handles MIME types handled as base64 encoded byte arrays.
 It also handle streams, reading from the input stream on demand to avoid
 excessive memory load.
 This will usually be slower than reading the whole content of the stream
 to a byte array and using it as the 
\family typewriter
Part
\family default
 content.
 This class just has the default constructor and one method:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeTo(Object
\begin_inset space ~
\end_inset

obj,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

mimeType,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

stream) Writes a binary object in the given stream.
 
\family typewriter
obj
\family default
 must be an instance of 
\family typewriter
Part
\family default
.
 The second parameter is ignored in this method.
\end_layout

\begin_layout Section
TextContentHandler
\end_layout

\begin_layout Standard
This class is an implementation of 
\family typewriter
DataContentHandler
\family default
 that handles textual (not encoded) MIME types.
 This class is similar to the previous one, except for the fact that if
 
\family typewriter
obj
\family default
 is not a 
\family typewriter
Part
\family default
 in the 
\family typewriter
writeTo()
\family default
 method, it will be transformed into a 
\family typewriter
String
\family default
.
\end_layout

\begin_layout Section
DataHandler 
\end_layout

\begin_layout Standard
This class maps a MIME type into an instance of a 
\family typewriter
DataContentHandler
\family default
.
\end_layout

\begin_layout Standard
This class only has a default constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addDataContentHandler(DataContentHandler
\begin_inset space ~
\end_inset

dataContentHandler,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

mimeType) May be used to add an user-defined 
\family typewriter
DataContentHandler
\family default
, associated to a specific MIME type.
 A list of MIME types can be found in 
\begin_inset CommandInset href
LatexCommand href
target "http://www.webmaster-toolkit.com/mime-types.shtml"

\end_inset

.
 
\end_layout

\begin_layout Section
MailSession
\end_layout

\begin_layout Standard
This class is used to store properties used by the messaging API.
 
\end_layout

\begin_layout Standard
The SMTP protocol provider supports the following properties, which may
 be set in the MailSession object.
 The properties are always set as strings; the Type column describes how
 the string is interpreted.
 For example, use 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

props.put("mail.smtp.port", "888"); 
\end_layout

\end_inset

to set the 
\family typewriter
mail.smtp.port
\family default
 property, which is of type 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="30text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.user
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default user name for SMTP.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SMTP Password for the default user name.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.host
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server to connect to.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server port to connect to, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 25.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp .connectiontimeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket connection timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.timeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket I/O timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.from
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Email address to use for SMTP MAIL command.
 This sets the envelope return address.
 Defaults to 
\family typewriter
msg.getFrom()[0]
\family default
 or 
\family typewriter
ConnectionManager.getLocalHost()
\family default
.
 NOTE: 
\family typewriter
mail.smtp.user
\family default
 was previously used for this.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.auth
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, attempt to authenticate the user using the AUTH command.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.starttls .enable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, enables the use of the STARTTLS command (if supported by the server) to
 switch the connection to a TLS-protected connection before issuing any
 login commands.
 Note that an appropriate trust store must be configured so that the client
 will trust the server's certificate.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.starttls .required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, requires the use of the STARTTLS command.
 If the server doesn't support the STARTTLS command, or the command fails,
 the connect method will fail.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.ssl.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server port to connect to when STARTTLS is enabled, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 587.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.ssl .socketFactory.class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, specifies the name of a class that extends the 
\family typewriter
totalcross.net.ssl.SSLSocketFactory
\family default
 class.
 This class will be used to create SMTP SSL sockets.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The POP3 protocol provider supports the following properties, which may
 be set in the 
\family typewriter

\begin_inset Newline newline
\end_inset

MailSession
\family default
 object.
 The properties are always set as strings; the Type column describes how
 the string is interpreted.
 For example, use 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

props.put("mail.pop3.port", "888");
\end_layout

\end_inset

to set the 
\family typewriter
mail.pop3.port
\family default
 property, which is of type 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="30text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.user
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default user name for POP3.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.host
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The POP3 server to connect to.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The POP3 server port to connect to, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 110.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3 .connectiontimeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket connection timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.timeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket I/O timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class only has the default constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getInstance() Creates a new empty 
\family typewriter
MailSession
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDefaultInstance() Returns a static instance of 
\family typewriter
MailSession
\family default
, which may be initialized during the application startup.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getStore(String
\begin_inset space ~
\end_inset

protocol) Get a 
\family typewriter
Store
\family default
 object that implements the specified protocol.
 If an appropriate 
\family typewriter
Store
\family default
 object cannot be obtained, 
\family typewriter
null
\family default
 is returned (if a provider for the given protocol is not found).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getTransport(String
\begin_inset space ~
\end_inset

protocol) Get a 
\family typewriter
Transport
\family default
 object that implements the specified protocol.
 If an appropriate 
\family typewriter
Transport
\family default
 object cannot be obtained, 
\family typewriter
null
\family default
 is returned.
 
\end_layout

\begin_layout Section
Message 
\end_layout

\begin_layout Standard
This class represents a MIME style e-mail message.
 
\end_layout

\begin_layout Standard
It only has a default constructor, which creates a new empty message.
 This class has the following fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
subject The subject of this message.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
uidl Unique ID Listing.
 A POP3 mail server function that assigns a unique number to each incoming
 mail message.
 This allows mail to be left on the server after it has been downloaded
 to the user.
 Both the mail client and the POP server must support this feature.
\end_layout

\begin_layout Standard
The methods are:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addHeader(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

value) Add this value to the existing values for this header name.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addRecipient(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

Address
\begin_inset space ~
\end_inset

address) Add this recipient address to the existing ones of the given type.
 An 
\family typewriter

\begin_inset Newline newline
\end_inset

IllegalArgumentException
\family default
 will be thrown if the given recipient type is not valid and a 
\family typewriter
NullPointerException
\family default
 will be thrown if the given address is 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addRecipients(int
\begin_inset space ~
\end_inset

type,
\begin_inset space ~
\end_inset

Address[]
\begin_inset space ~
\end_inset

addresses) Add these recipient addresses to the existing ones of the given
 type.
 This method will also throw the exceptions explained above.
 Moreover, the array and its elements can't be 
\family typewriter
null
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addFrom(Address[]
\begin_inset space ~
\end_inset

addresses) Add these addresses to the existing "From" attribute.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setFrom(Address
\begin_inset space ~
\end_inset

address) Set the "From" attribute in this 
\family typewriter
Message
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFrom() Returns the "From" attribute.
 The "From" attribute contains the identity of the person(s) who wished
 this message to be sent.
 In certain implementations, this may be different from the entity that
 actually sent the message.
 This method returns 
\family typewriter
null
\family default
 if this attribute is not present in this message.
 It returns an empty array if this attribute is present, but contains no
 addresses.
 In the other cases, it returns an array of addresses.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeTo(Stream
\begin_inset space ~
\end_inset

stream) Writes this message to the given stream, which is typically used
 for sending.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
delete() Mark this message as deleted, removing it from the parent folder.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reply(boolean
\begin_inset space ~
\end_inset

replyToAll) Get a new 
\family typewriter
Message
\family default
 suitable for a reply to this message.
 The new 
\family typewriter
Message
\family default
 will have its attributes and headers set up appropriately.
 Note that this new 
\family typewriter
Message
\family default
 object will be empty, that is, it will not have a "content".
 These will have to be suitably filled in by the client.
 If 
\family typewriter
replyToAll
\family default
 is set, the new 
\family typewriter
Message
\family default
 will be addressed to all recipients of this message.
 Otherwise, the reply will be addressed to only the sender of this message.
 The "Subject" field is filled in with the original subject prefixed with
 "Re:" (unless it already starts with "Re:").
 The reply message will use the same session as this message.
 NOTE: The 
\family typewriter
replyToAll
\family default
 feature is NOT supported yet, messages returned by this method will contain
 only the original sender as recipient.
 
\end_layout

\begin_layout Section
Multipart
\end_layout

\begin_layout Standard

\family typewriter
Multipart
\family default
 is a container that holds multiple body parts.
 
\end_layout

\begin_layout Standard
This class has two constructors:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Multipart() Creates a new 
\family typewriter
Multipart 
\family default
with subtype 
\family typewriter
MIXED
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
Multipart(String
\begin_inset space ~
\end_inset

subType) Creates a new 
\family typewriter
Multipart 
\family default
with subtype 
\family typewriter
MIXED
\family default
 (
\family typewriter
mixed
\family default
) or 
\family typewriter
FORM_DATA
\family default
 (
\family typewriter
form-data
\family default
).
\begin_inset Newline newline
\end_inset

The "multipart/mixed" (and other similar types) media type was explicitly
 designed to formalize the transport of related collections of body entities
 in the same message ...
 the classic use case being email attachments.
 These media types were explicitly designed to be more general, so they
 do not impose any use-case-specific restrictions on things like requiring
 certain headers with certain parameters.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addPart(Part
\begin_inset space ~
\end_inset

part) Adds a MIME body part to this part container.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeTo(Stream
\begin_inset space ~
\end_inset

stream) Output an appropriately encoded byte stream to the given stream,
 which is typically used for sending.
\end_layout

\begin_layout Section
Part
\end_layout

\begin_layout Standard
This class represents a MIME body part, which are contained by 
\family typewriter
Multipart
\family default
 objects.
 
\end_layout

\begin_layout Standard
It has the following fields:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
disposition Defines if this part's content should be inlined in the body
 of the message, or attached as a file.
 Its value MUST be set to either 
\family typewriter
INLINE
\family default
 (default value) or 
\family typewriter
ATTACHMENT
\family default
, using the constants defined by this class.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
fileName File name of the attachment represented by this part (if any).
 If assigned with a non-null value, the field disposition value is ignored
 and the part treated as ATTACHMENT.
 
\end_layout

\begin_layout Standard
This class only has the default constructor and the following methods.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
addHeader(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

value) Add this 
\family typewriter
value
\family default
 to the existing values for this header 
\family typewriter
name
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getContentType() Returns the Content-Type of the content of this part.
 Returns 
\family typewriter
null
\family default
 if the Content-Type could not be determined.
 The MIME typing system is used to name Content-types.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setContent(Object
\begin_inset space ~
\end_inset

content,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

mimeType) A convenience method for setting this part's content with the
 given content MIME type.
 Note that a 
\family typewriter
DataContentHandler
\family default
 class for the specified type should be available, otherwise the content
 will be handled by the 
\family typewriter
BinaryContentHandler
\family default
, which writes the content as a base 64 encoded string.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setContent(Multipart
\begin_inset space ~
\end_inset

multipart) This method sets the given 
\family typewriter
Multipart
\family default
 object as this part's content.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setContent(Object
\begin_inset space ~
\end_inset

content) A convenience method for setting this part's content based on the
 type of the passed object.
\begin_inset Newline newline
\end_inset

If the given object type is 
\family typewriter
Multipart
\family default
, it's MIME type is set to "multipart/mixed".
\begin_inset Newline newline
\end_inset

If the given object type is 
\family typewriter
String
\family default
, it's MIME type is set to "text/plain".
\begin_inset Newline newline
\end_inset

Otherwise, the given object will be handled as "application/octet-stream"
 by the
\begin_inset Newline newline
\end_inset


\family typewriter
BinaryContentHandler
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
setText(String
\begin_inset space ~
\end_inset

text) A convenience method that sets the given 
\family typewriter
totalcross.lang.String
\family default
 as this part's content with a MIME type of "text/plain".
\end_layout

\begin_layout FieldList
\labelwidthstring 0
writeTo(Stream
\begin_inset space ~
\end_inset

stream) Writes this part to the given stream.
 The output is typically an aggregation of the 
\family typewriter
Part
\family default
 attributes and an appropriately encoded byte stream from its 'content'.
 Classes that extends the 
\family typewriter
Part
\family default
 class decide on the appropriate encoding algorithm to be used.
 The received stream is typically used for sending.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getContent() Returns the content of this part.
\end_layout

\begin_layout Section
Folder
\end_layout

\begin_layout Standard

\family typewriter
Folder
\family default
 is an abstract class that represents a folder for mail messages.
 Subclasses implement protocol specific 
\family typewriter
Folder
\family default
s.
\end_layout

\begin_layout Standard
This class doesn't have a public constructor and has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
open() Open this 
\family typewriter
Folder
\family default
.
 This method is valid only on 
\family typewriter
Folder
\family default
s that can contain 
\family typewriter
Message
\family default
s and that are closed.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMessageCount() Get total number of messages in this folder.
 This method can be invoked on a closed folder.
 However, note that for some folder implementations, getting the total message
 count can be an expensive operation involving actually opening the folder.
 In such cases, a provider can choose not to support this functionality
 in the closed state, in which case this method must return -1.
 Clients invoking this method on a closed folder must be aware that this
 is a potentially expensive operation.
 Clients must also be prepared to handle a return value of -1 in this case.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDeleteMessageCount() Get total number of deleted messages in this folder.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMessages() Get all 
\family typewriter
Message
\family default
 objects from this folder.
 Returns an empty array if the folder is empty.
 Clients can use 
\family typewriter
Message
\family default
 objects (instead of sequence numbers) as references to the messages within
 a folder; this method supplies the 
\family typewriter
Message
\family default
 objects to the client.
 Folder implementations are expected to provide light-weight 
\family typewriter
Message
\family default
 objects, which get filled on demand.
 This implementation uses 
\family typewriter
getMessage()
\family default
 to get 
\family typewriter
Message
\family default
 objects from 1 till the message count.
 It returns an array of 
\family typewriter
Message
\family default
 objects.
 If the folder is empty, it returns an empty array.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMessages(int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

end) Get the 
\family typewriter
Message
\family default
 objects for message numbers ranging from start through end, both start
 and end inclusive.
 Note that message numbers start at 1, not 0.
 This implementation uses
\family typewriter

\begin_inset Newline newline
\end_inset

getMessage(index)
\family default
 to obtain the required 
\family typewriter
Message
\family default
 objects.
 Note that the returned array must contain (
\family typewriter
end-start+1
\family default
) 
\family typewriter
Message
\family default
 objects.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMessage(int
\begin_inset space ~
\end_inset

msgNumber) Get the 
\family typewriter
Message
\family default
 object corresponding to the given message number.
 A 
\family typewriter
Message
\family default
 object's message number is the relative position of this message in its
 folder.
 Messages are numbered starting at 1 through the total number of messages
 in the folder.
 Note that the message number for a particular message can change during
 a session if other messages in the folder are deleted and the folder is
 expunged.
 Unlike 
\family typewriter
Folder
\family default
 objects, repeated calls to 
\family typewriter
getMessage()
\family default
 with the same message number will return the same 
\family typewriter
Message
\family default
 object, as long as no messages in this folder have been expunged.
 Since message numbers can change within a session if the folder is expunged,
 clients are advised not to use message numbers as references to messages.
 Use 
\family typewriter
Message
\family default
 objects instead.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getMessage(String
\begin_inset space ~
\end_inset

uidl) Returns a 
\family typewriter
Message
\family default
 using its UIDL.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset() Reset this session, undoing any operations performed over messages
 on this folder during this session.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close(boolean
\begin_inset space ~
\end_inset

b) Close this folder.
 This method is valid only on open folders.
 Its parameter is ignored for this class.
 It might be used by its subclasses.
\end_layout

\begin_layout Section
Pop3Folder
\end_layout

\begin_layout Standard
A POP3 
\family typewriter
Folder
\family default
 (can only be "INBOX").
 
\end_layout

\begin_layout Section
Store
\end_layout

\begin_layout Standard
An abstract class that models a message store and its access protocol, for
 storing and retrieving messages.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Standard
This class doesn't have a public constructor and has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
connect() A generic connect method that takes no parameters.
 Subclasses can implement the appropriate authentication schemes.
 Subclasses that need additional information might want to use some properties
 or might get it interactively.
 Most clients should just call this method to connect to the store.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Close this 
\family typewriter
Store
\family default
 and terminate its connection.
 Any messaging components (
\family typewriter
Folder
\family default
s, 
\family typewriter
Message
\family default
s, etc) belonging to this service are invalid after this store is closed.
 Note that the 
\family typewriter
Store
\family default
 object is closed even if this method terminates abnormally by throwing
 a 
\family typewriter
MessagingException
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFolder(String
\begin_inset space ~
\end_inset

name) Return the 
\family typewriter
Folder
\family default
 object corresponding to the given name.
 In some 
\family typewriter
Store
\family default
s, the name can be an absolute path if it starts with the hierarchy delimiter.
 If not, it is interpreted relative to the 'root' of this namespace.
 
\family typewriter
Folder
\family default
 objects are not cached by the 
\family typewriter
Store
\family default
 object, so invoking this method on the same name multiple times will return
 that many distinct 
\family typewriter
Folder
\family default
 objects.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDefaultFolder() Returns a 
\family typewriter
Folder
\family default
 object that represents the 'root' of the default namespace presented to
 the user by the 
\family typewriter
Store
\family default
.
 
\end_layout

\begin_layout Section
POP3Store
\end_layout

\begin_layout Standard
A POP3 
\family typewriter
Message
\family default
 
\family typewriter
Store
\family default
.
 Contains only one folder, "INBOX".
 This class extends 
\family typewriter
Store
\family default
 with the given difference:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getFolder(String
\begin_inset space ~
\end_inset

name) Only the name "INBOX" is supported.
 If another name is passed, it will return 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Section
Service
\end_layout

\begin_layout Standard
An abstract class that models a messaging service and its access protocol,
 for accessing a mail session.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Standard
This class doesn't have a public constructor and has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
connect() A generic connect method that takes no parameters.
 Subclasses can implement the appropriate authentication schemes.
 Subclasses that need additional information might want to use some properties
 or might get it interactively.
 Most clients should just call this method to connect to the store.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
connect(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

user,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

password) A connect method that receives a host, a port, an user name, and
 its password.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
close() Close this service and terminate its connection.
\end_layout

\begin_layout Section
Transport
\end_layout

\begin_layout Standard
An abstract class that models a message transport which extends 
\family typewriter
Service
\family default
.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Standard
This class doesn't have a public constructor and has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
send(Message
\begin_inset space ~
\end_inset

message) Send a message.
 The message will be sent to all recipient addresses specified in the message,
 using message transports appropriate to each address, as specified on the
 static instance of 
\family typewriter
MailSession
\family default
.
 NOTE: Only SMTP transport is currently supported.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
send(Message
\begin_inset space ~
\end_inset

message,
\begin_inset space ~
\end_inset

MailSession
\begin_inset space ~
\end_inset

session) The same as above except that it uses the given instance of 
\family typewriter
MailSession
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sendMessage(Message
\begin_inset space ~
\end_inset

message) Sends a message.
\end_layout

\begin_layout Section
SMTPTransport 
\end_layout

\begin_layout Standard
This class implements the 
\family typewriter
Transport
\family default
 abstract class using SMTP for message submission and transport.
 It also doesn't have a public constructor.
 
\end_layout

\begin_layout Standard
It has the same methods of its superclasses (
\family typewriter
Service
\family default
 and 
\family typewriter
Transport
\family default
) and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
connect(Socket
\begin_inset space ~
\end_inset

connection) Connects to a socket to start a mail session.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
readServerResponse() Returns a number representing the server response.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
issueCommand(String
\begin_inset space ~
\end_inset

cmd,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

expect) Issues a command to the server and checks if its response is the
 expected one.
 If not, a 
\family typewriter
MessagingException
\family default
 is thrown.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
simpleCommand(String
\begin_inset space ~
\end_inset

command) Issues a command but doesn't check if the response is as expected.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
supportsExtension(String
\begin_inset space ~
\end_inset

ext) If 
\family typewriter
ext == "STARTTLS"
\family default
, it will return if it supports TLS (Transport Layer Security).
 Otherwise, it will return 
\family typewriter
false
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getRequireStartTLS() Returns if a TLS is required or not.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
startTLS() Issue the 
\family typewriter
STARTTLS
\family default
 command and switch the socket to TLS mode if it succeeds.
 
\end_layout

\begin_layout Section
SMTPSSLTransport
\end_layout

\begin_layout Standard
This class implements the 
\family typewriter
Transport
\family default
 abstract class using SMTP for message submission and transport over secure
 sockets.
 It extends 
\family typewriter
SMTPTransport
\family default
.
 
\end_layout

\begin_layout Part
PHONE
\end_layout

\begin_layout Chapter
Dial
\end_layout

\begin_layout Standard
Used to dial a number in a smartphone.
 A single listener can receive messages from the system informing the current
 status.
 Currently works on Windows CE, BlackBerry, Android, and iOS.
 It is not possible to complete a call if there is no chip.
 On Android and iOS, the application goes to background and another window
 is opened.
 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Dial
\family default
 has the field 
\family typewriter
listener
\family default
, which is a 
\family typewriter
Dial.Listener
\family default
, a listener that will receive events informing the actual status of the
 dialing.
 The class that implements it must have the method 
\family typewriter
dialStatusChange()
\family default
.
\end_layout

\begin_layout Standard
This class only has a default constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
number(String
\begin_inset space ~
\end_inset

number) Dials the given number.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
hangup() Hangs up a running call.
 Does not work on Android.
 
\end_layout

\begin_layout Chapter
SMS
\end_layout

\begin_layout Standard
Class used to send and receive SMS messages.
 Currently supports Windows CE and Blackberry only.
 
\end_layout

\begin_layout Standard
It only has the default constructor and two public methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
send(String
\begin_inset space ~
\end_inset

destination,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

message) Sends the given message to the destination.
 The 
\family typewriter
destination
\family default
 is the number to send to and the 
\family typewriter
message
\family default
 may have the unicode characters stripped on some phones.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
receive() Blocks until a message becomes available.
 You may want to call this from within a thread, otherwise your program
 will block forever.
 
\begin_inset Newline newline
\end_inset

On Windows CE, if you get an error 0x105, there's another program that is
 listening to SMS.
 In this case you will have to close that program.
 Only one program can receive SMS messages at a time.
 All messages that are received are not visualized by the phone's SMS program
 (in other words, if you don't save them, they will be lost).
 
\begin_inset Newline newline
\end_inset

The method returns a string array where the first string contains the number
 and the second string contains the message.
\end_layout

\begin_layout Standard
Both methods may throw an 
\family typewriter
IOException
\family default
.
 For Windows CE errors, refer to
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://msdn.microsoft.com/en-us/library/aa455072.aspx"

\end_inset

.
\end_layout

\begin_layout Part
CRYPTOGRAPHY
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
TotalCross has support to cryptography in the 
\family typewriter
crypto
\family default
 package.
 It has three subpackages:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
cipher Contains the cipher classes that will actually encrypt and decrypt
 data using AES and RSA.
 It has the classes: 
\end_layout

\begin_layout Itemize

\family typewriter
AESCipher
\end_layout

\begin_layout Itemize

\family typewriter
AESKey 
\end_layout

\begin_layout Itemize

\family typewriter
Cipher 
\end_layout

\begin_layout Itemize

\family typewriter
Key 
\end_layout

\begin_layout Itemize

\family typewriter
RSACipher 
\end_layout

\begin_layout Itemize

\family typewriter
RSAPrivateKey 
\end_layout

\begin_layout Itemize

\family typewriter
RSAPublicKey
\end_layout

\begin_layout FieldList
\labelwidthstring 0
digest Implements MD5 and SHA digest algorithms.
 It has the classes: 
\end_layout

\begin_layout Itemize

\family typewriter
Digest 
\end_layout

\begin_layout Itemize

\family typewriter
MD5Digest 
\end_layout

\begin_layout Itemize

\family typewriter
SHA1Digest 
\end_layout

\begin_layout Itemize

\family typewriter
SHA256Digest
\end_layout

\begin_layout FieldList
\labelwidthstring 0
signature Implements PKCS1 signature algorithm.
 It has the classes: 
\end_layout

\begin_layout Itemize

\family typewriter
PKCS1Signature 
\end_layout

\begin_layout Itemize

\family typewriter
Signature 
\end_layout

\begin_layout Chapter
Cipher
\end_layout

\begin_layout Section
Cipher 
\end_layout

\begin_layout Standard
This class provides the functionality of a cryptographic cipher for encryption
 and decryption.
 
\end_layout

\begin_layout Standard
If you get a 
\family typewriter
CryptoException: Illegal key size
\family default
, you must download strong cryptography files AFTER understanding that you
 are elligible to do so as stated in 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://java.sun.com/j2se/1.4.2/jre/README"

\end_inset

 (search for 'Unlimited Strength Java Cryptography Extension' - installation
 instructions are inside that topic).
 
\end_layout

\begin_layout Standard
This class has a default public constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() The same as calling 
\family typewriter
getAlgorithm()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getIV() Returns the initialization vector (IV) in a new buffer.
 This is useful in the case where a random IV was created.
 It returns 
\family typewriter
null
\family default
 if the underlying algorithm does not use an IV, or if the IV has not been
 set yet.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset(int
\begin_inset space ~
\end_inset

operation,
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

key) Initializes this cipher in encryption or decryption mode, without chaining
 or padding.
 If this algorithm requires an initialization vector, it will be generated
 using random values.
 Calling this method will also reset the input data buffer.
 The operation must be 
\family typewriter
OPERATION_ENCRYPT
\family default
 or 
\family typewriter
OPERATION_DECRYPT
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset(int
\begin_inset space ~
\end_inset

operation,
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

chaining) Similar to the above, except that it uses chaining.
 The chaining mode of this cipher must be 
\family typewriter
CHAINING_NONE,
\family default
 
\family typewriter
CHAINING_ECB
\family default
, or 
\family typewriter
CHAINING_CBC
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset(int
\begin_inset space ~
\end_inset

operation,
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

chaining,
\begin_inset space ~
\end_inset

byte[]
\begin_inset space ~
\end_inset

iv) Similar to the above, except that it receives an initialization vector.
 If this algorithm requires an initialization vector and an invalid value
 was supplied, it will be generated using random values.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset(int
\begin_inset space ~
\end_inset

operation,
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

chaining,
\begin_inset space ~
\end_inset

byte[]
\begin_inset space ~
\end_inset

iv,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

padding) Similar to the above, except that it uses padding.
 The padding mode of this cipher must be 
\family typewriter
PADDING_NONE
\family default
, 
\family typewriter
PADDING_PKCS1
\family default
, or 
\family typewriter
PADDING_PKCS5
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(int
\begin_inset space ~
\end_inset

data) Updates the input data that will be processed by this cipher algorithm.
 The data will be accumulated in an input buffer to be processed when 
\family typewriter
getOutput()
\family default
 is finally called.
 This method updates just one byte from the given integer 
\family typewriter
data
\family default
, which is the least significant byte.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data) The same as above, but receiving a byte array instead of just one
 byte.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) The same as above, but has an offset in 
\family typewriter
data
\family default
 where the input data starts and the input data length.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getOutput() Finalizes the encryption or decryption operation (depending
 on how this cipher was initialized) by processing all the accumulated input
 data and returning the result in a new buffer.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAlgorithm() Returns the algorithm name of this cipher.
 In the subclass 
\family typewriter
AESCipher
\family default
, returns 
\family typewriter
AES
\family default
.
 In the 
\family typewriter
RSACipher
\family default
, returns 
\family typewriter
RSA
\family default
.
\end_layout

\begin_layout Standard
There is a sample for the class 
\family typewriter
Cipher
\family default
, its subclasses and auxiliar classes in 
\family typewriter
tc.samples.
 crypto.cipher.CipherTest
\family default
.
 
\end_layout

\begin_layout Section
AESCipher 
\end_layout

\begin_layout Standard
This class implements the AES cryptographic cipher.
 
\end_layout

\begin_layout Standard
The Advanced Encryption Standard (AES) is a specification for the encryption
 of electronic data established by the U.S.
 National Institute of Standards and Technology (NIST) in 2002.
 The algorithm described by AES is a symmetric-key algorithm, meaning the
 same key is used for both encrypting and decrypting the data.
 AES is based on a design principle known as a substitution-permutation
 network, and is fast in both software and hardware.
 More information can be found in 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"

\end_inset

.
\end_layout

\begin_layout Standard
It has a public default constructor and the following public method that
 is not present in its superclass 
\family typewriter
Cipher
\family default
:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBlockLength() Returns the block length (in bytes), or 0 if the underlying
 algorithm is not a block cipher.
\end_layout

\begin_layout Section
RSACipher 
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher.
 It is similar to 
\family typewriter
AESCipher
\family default
.
\end_layout

\begin_layout Standard
RSA is an algorithm for public-key cryptography that is based on the presumed
 difficulty of factoring large integers, the factoring problem.
 RSA stands for Ron Rivest, Adi Shamir and Leonard Adleman, who first publicly
 described it in 1977.
 A user of RSA creates and then publishes the product of two large prime
 numbers, along with an auxiliary value, as their public key.
 The prime factors must be kept secret.
 Anyone can use the public key to encrypt a message, but with currently
 published methods, if the public key is large enough, only someone with
 knowledge of the prime factors can feasibly decode the message.
 Whether breaking RSA encryption is as hard as factoring is an open question
 known as the RSA problem.
 More information can be found in 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/RSA"

\end_inset

.
\end_layout

\begin_layout Section
Key
\end_layout

\begin_layout Standard
This class defines a cryptographic cipher key for type safety.
 
\end_layout

\begin_layout Standard
This class just has a public default constructor.
\end_layout

\begin_layout Section
AESKey 
\end_layout

\begin_layout Standard
This class implements the AES cryptographic cipher key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Standard
It has the following public constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
AESKey(byte[]
\begin_inset space ~
\end_inset

data) Creates a new AESKey object with the given data.
\end_layout

\begin_layout Standard
It has just one method:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getData() Returns a copy of the byte array containing the key data.
\end_layout

\begin_layout Section
RSAPrivateKey 
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher private key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Standard
This class has the following public constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
RSAPrivateKey(byte[]
\begin_inset space ~
\end_inset

e,
\begin_inset space ~
\end_inset

byte[]
\begin_inset space ~
\end_inset

d,
\begin_inset space ~
\end_inset

byte[]
\begin_inset space ~
\end_inset

n) Creates a new 
\family typewriter
RSAPublicKey
\family default
 object, given the public and private exponents and the modulus.
 
\family typewriter
e
\family default
 is a byte array containing the public exponent, 
\family typewriter
d
\family default
 is a byte array containing the private exponent, and 
\family typewriter
n
\family default
 is a byte array containing the modulus.
\end_layout

\begin_layout Standard
This class has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getModulus() Returns a copy of the byte array containing the modulus.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPublicExponent() Returns a copy of the byte array containing the public
 exponent.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPrivateExponent() Returns a copy of the byte array containing the private
 exponent.
\end_layout

\begin_layout Section
RSAPublicKey
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher public key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Standard
This class has the following public constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
RSAPublicKey(byte[]
\begin_inset space ~
\end_inset

e,
\begin_inset space ~
\end_inset

byte[]
\begin_inset space ~
\end_inset

n) Creates a new 
\family typewriter
RSAPublicKey
\family default
 object, given the public exponent and the modulus.
 
\family typewriter
e
\family default
 is a byte array containing the public exponent and 
\family typewriter
n
\family default
 is a byte array containing the modulus.
\end_layout

\begin_layout Standard
This class has the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getModulus() Returns a copy of the byte array containing the modulus.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getPublicExponent() Returns a copy of the byte array containing the public
 exponent.
\end_layout

\begin_layout Chapter
Digest
\end_layout

\begin_layout Section
Digest
\end_layout

\begin_layout Standard
This class provides the functionality of a message digest algorithm.
 
\end_layout

\begin_layout Standard
It has just a public default constructor and the following methods:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() The same as calling 
\family typewriter
getAlgorithm()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAlgorithm() Returns the algorithm name of this message digest.
 It returns 
\family typewriter
MD5
\family default
 if it is a 
\family typewriter
MD5Digest
\family default
, 
\family typewriter
SHA-1
\family default
 if it is a 
\family typewriter
SHA1Digest
\family default
, and 
\family typewriter
SHA-256
\family default
 if it is a 
\family typewriter
SHA256Digest
\family default
.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getBlockLength() Returns the block length (in bytes).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDigestLength() Returns the message digest length (in bytes).
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset() Initializes this message digest.
 Calling this method will also reset the input data buffer.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(int
\begin_inset space ~
\end_inset

data) Similar to 
\family typewriter
Cipher.update(int data) 
\family default
except that 
\family typewriter
getDigest()
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data) Similar to 
\family typewriter
Cipher.update(byte[] data) 
\family default
except that 
\family typewriter
getDigest()
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Similar to 
\family typewriter
Cipher.update(byte[] data, int start, int count) 
\family default
except that 
\family typewriter

\begin_inset Newline newline
\end_inset

getDigest()
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getDigest() Finalizes the message digest operation by processing all the
 accumulated input data and returning the result in a new buffer.
\end_layout

\begin_layout Standard
There is a sample for its subclasses in 
\family typewriter
tc.samples.crypto.digest.DigestTest
\family default
.
\end_layout

\begin_layout Section
MD5Digest 
\end_layout

\begin_layout Standard
This class implements the MD5 message digest algorithm.
 
\end_layout

\begin_layout Standard
It has a public default constructor and extends 
\family typewriter
Digest
\family default
.
\end_layout

\begin_layout Standard
The MD5 Message-Digest Algorithm is a widely used cryptographic hash function
 that produces a 128-bit (16-byte) hash value.
 MD5 has been employed in a wide variety of security applications, and is
 also commonly used to check data integrity.
 
\end_layout

\begin_layout Section
SHA1Digest 
\end_layout

\begin_layout Standard
This class implements the SHA-1 message digest algorithm.
 It is similar to 
\family typewriter
MD5Digest
\family default
.
\end_layout

\begin_layout Standard
In cryptography, SHA-1 is a cryptographic hash function.
 SHA stands for "secure hash algorithm".
 The three SHA algorithms are structured differently and are distinguished
 as SHA-0, SHA-1, and SHA-2.
 SHA-1 is very similar to SHA-0, but corrects an error in the original SHA
 hash specification that led to significant weaknesses.
 The SHA-0 algorithm was not adopted by many applications.
 SHA-2 on the other hand significantly differs from the SHA-1 hash function.
\end_layout

\begin_layout Standard
SHA-1 is the most widely used of the existing SHA hash functions, and is
 employed in several widely used applications and protocols, including TLS
 and SSL, PGP, SSH, S/MIME, and IPsec.
 
\end_layout

\begin_layout Section
SHA256Digest 
\end_layout

\begin_layout Standard
This class implements the SHA-256 message digest algorithm.
 It is similar to 
\family typewriter
MD5Digest
\family default
.
\end_layout

\begin_layout Standard
SHA-256 is part of a family of two similar hash functions with different
 block sizes, known as SHA-256 and SHA-512.
 They differ in the word size; SHA-256 uses 32-bit words where SHA-512 uses
 64-bit words.
 There are also truncated versions of each standardized, known as SHA-224
 and SHA-384.
 All of them are part of the SHA-2.
\end_layout

\begin_layout Chapter
Signature 
\end_layout

\begin_layout Section
Signature
\end_layout

\begin_layout Standard
This class provides the functionality of a signature algorithm for signing
 and verifying.
\end_layout

\begin_layout Standard
This abstract class only has a public default constructor and the following
 methods.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
toString() The same as calling 
\family typewriter
getAlgorithm()
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
reset(int
\begin_inset space ~
\end_inset

operation,
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

key) Initializes this message signature algorithm to sign or verify.
 Calling this method will also reset the input data buffer.
 The parameter 
\family typewriter
operation
\family default
 is the mode, which must be either 
\family typewriter
OPERATION_ SIGN
\family default
 or 
\family typewriter
OPERATION_VERIFY
\family default
.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(int
\begin_inset space ~
\end_inset

data) Similar to 
\family typewriter
Cipher.update(int data) 
\family default
except that 
\family typewriter
sign()
\family default
 or
\family typewriter
 verify(byte[])
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data) Similar to 
\family typewriter
Cipher.update(byte[] data) 
\family default
except that 
\family typewriter
sign()
\family default
 or
\family typewriter
 verify(byte[])
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
update(byte[]
\begin_inset space ~
\end_inset

data,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count) Similar to 
\family typewriter
Cipher.update(byte[] data, int start, int count) 
\family default
except that 
\family typewriter
sign()
\family default
 or
\family typewriter
 verify(byte[])
\family default
 must be called instead of 
\family typewriter
getOutput()
\family default
 for finalizing the process.
\end_layout

\begin_layout FieldList
\labelwidthstring 0
sign() Finalizes the sign operation by processing all the accumulated input
 data and returning the result in a new buffer.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
verify(byte[]
\begin_inset space ~
\end_inset

signature) Finalizes the verify operation by processing all the accumulated
 input data and returning the signature comparison result.
 
\end_layout

\begin_layout FieldList
\labelwidthstring 0
getAlgorithm() Returns the algorithm name of this signature algorithm.
 It returns 
\family typewriter
MD5withRSA
\family default
 if it is a
\begin_inset Newline newline
\end_inset

 
\family typewriter
PKCS1Signature
\family default
 initialized with a 
\family typewriter
MD5Digest
\family default
, 
\family typewriter
SHA1withRSA
\family default
 if it is a 
\family typewriter
PKCS1Signature
\family default
 initialized with a 
\family typewriter
SHA1Digest
\family default
, and 
\family typewriter
SHA256withRSA
\family default
 if it is a 
\family typewriter
PKCS1Signature
\family default
 initialized with a 
\family typewriter
SHA256Digest
\family default
.
 
\end_layout

\begin_layout Section
PKCS1Signature 
\end_layout

\begin_layout Standard
This class implements the PKCS #1 signature algorithm.
 
\end_layout

\begin_layout Standard
It extends 
\family typewriter
Signature
\family default
, has the same public methods and the following public constructor:
\end_layout

\begin_layout FieldList
\labelwidthstring 0
PKCS1Signature(Digest
\begin_inset space ~
\end_inset

digest) Creates a new 
\family typewriter
PKCS1Signature
\family default
 algorithm with the given message digest.
 It will throw a 
\family typewriter
CryptoException
\family default
 if the message digest algorithm is not supported.
 Only 
\family typewriter
MD5Digest
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

SHA1Digest
\family default
, and 
\family typewriter
SHA256Digest
\family default
 are currently supported.
\end_layout

\begin_layout Standard
There is a sample for its use in 
\family typewriter
tc.samples.crypto.signature.SignatureTest
\family default
.
 
\end_layout

\begin_layout Part
BARCODE SCANNER
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
The 
\family typewriter
Scanner
\family default
 class allows the usage of the barcode reader of some of the most popular
 scanners.
\end_layout

\begin_layout Standard
For WinCE, the following devices are supported:
\end_layout

\begin_layout Itemize
SocketScan
\end_layout

\begin_layout Itemize
Symbol
\end_layout

\begin_layout Itemize
Dolphin
\end_layout

\begin_layout Itemize
Intermec
\end_layout

\begin_layout Standard
To use the 
\family typewriter
Scanner
\family default
 class on the device, you must also install the scanner library included
 within the TotalCross SDK, by copying the desired 
\family typewriter
.dll
\family default
 to the TotalCross folder to the device.
\end_layout

\begin_layout Standard
For Palm OS, you may use the Janam devices along with its native WEDGE applicati
on.
\end_layout

\begin_layout Standard
TotalCross also supports the Opticon H16 bluetooth scanner.
\end_layout

\begin_layout Part
OPTIMIZATION TRICKS
\end_layout

\begin_layout Chapterstar
Overview
\end_layout

\begin_layout Standard
The purpose of this small, but highly important chapter, is to teach you
 how to improve your Java application's speed.
\end_layout

\begin_layout Standard
The TotalCross VM has an interpreter, which makes it a little slow for certain
 types of applications.
 It is not feasible to program in the same way for 300MHz (a typical PDA)
 and 3000 MHz processors (a typical desktop).
 By following the tricks presented in this tutorial, you'll be able to improve
 your application's performance.
 
\end_layout

\begin_layout Standard
TotalCross uses the virtual machine of BlackBerry (there's no C development
 kit for it, so we can't build our virtual machine on BlackBerry; instead,
 we only ported the TotalCross classes to run on the top of the RIM Java
 API).
 This is the reason why the BlackBerry timings are different.
 
\end_layout

\begin_layout Standard
These tips and tricks can make a very big difference in speed not only when
 running your program in PDAs, but also on desktop systems.
 Most of them can be used in any Java environment, and are actually referenced
 in other books and tutorials, but others are explicitly TotalCross optimization
 tricks.
\end_layout

\begin_layout Standard
There are some proof timings (measured in microseconds – µ = 1 second /
 1,000,000) near a clock bullet.
 They are always shown per iteration, ie, taken the total time and divided
 by the number or iterations.
 All tests were performed in the following devices:
\end_layout

\begin_layout Itemize
Palm OS: Palm Centro, 312MHz – named Palm
\end_layout

\begin_layout Itemize
Windows Mobile: Toshiba G900, 400MHz – named Win
\end_layout

\begin_layout Itemize
BlackBerry Curve 8330, 312MHz – named BB
\end_layout

\begin_layout Itemize
iPhone 1.1.4, 412MHz – named iPhone
\end_layout

\begin_layout Chapter
The Tricks
\end_layout

\begin_layout Enumerate
Avoid method calls.
 Method calls in TotalCross (and, actually, in any platform or virtual machine)
 are extremely expensive when comparing to in-lined code.
 This is the most important optimization trick and several other tricks
 inherit from this one.
 Lets see some common mistakes that people make:
\end_layout

\begin_deeper
\begin_layout Enumerate
Don't use method calls as the stop condition in for loops (assume 
\family typewriter
v
\family default
 is a 
\family typewriter
Vector
\family default
):
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i =0; i < v.size(); i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 2.0, Win: 1.00, BB: 3.00, iPhone: 5.47
\end_layout

\begin_layout Standard
You can change it in a couple of ways:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int n = v.size();
\end_layout

\begin_layout Plain Layout

for (int i=0; i < n; i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 0.67, Win: 0.40, BB: 1.07, iPhone: 1.47
\end_layout

\begin_layout Standard
...
 if the order of the loop matters, or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=v.size()-1; i >= 0; i--)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 0.67, Win: 0.40, BB: 0.93, iPhone: 1.40
\end_layout

\begin_layout Standard
...
 if the order of the loop doesn't matter.
\end_layout

\begin_layout Standard
The same care can be taken with an array's 
\family typewriter
length
\family default
 property.
 It always takes extra time to get the field, so it's better to assign it
 to a temporary variable and use it in the loop, or use the previous suggestions.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i =0; i < items.length; i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 0.67, Win: 0.47, BB: 3.20, iPhone: 1.53
\end_layout

\end_deeper
\begin_layout Enumerate
Avoid using get and set methods.
 This may go against standard object oriented practices, but in small Java
 devices it is necessary that you avoid this.
 If you have a simple member that is protected or private, and is set and
 get by using something like: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

protected String s;
\end_layout

\begin_layout Plain Layout

public void setS(String newS) {s = newS;}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 1.66, Win: 0.87, BB: 1.06, iPh: 2.65
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String getS() {return s;}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 1.62, Win: 0.86, BB: 1.05, iPhone: 2.76
\end_layout

\begin_layout Standard
It will be better to make the member public and access it directly:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String s;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
direct set (
\family typewriter
s = ...
\family default
): Palm: 0.51, Win: 0.28, BB: 0.67, iPhone: 0.69
\end_layout

\begin_layout Standard
direct get (
\family typewriter
...
 = s
\family default
): Palm: 0.54, Win: 0.31, BB: 0.62, iPhone: 0.82
\end_layout

\begin_layout Standard
Note about final classes: in the first JDK versions (up to 1.1.x), making
 the get/set methods final or making the whole class final would make the
 compiler inline the methods when using the 
\family typewriter
-O
\family default
 compiler option.
 From JDK 1.2.x and beyond this no longer holds true.
 We plan, however, to make the TotalCross' deployer inline methods, thus
 re-allowing the programmer to use get/set methods.
\end_layout

\end_deeper
\begin_layout Enumerate
Any other methods that are used in a loop are good candidates to be inlined
 directly.
 But please have good sense when doing this.
 There's no need to inline all your program in one big block.
 Just make sure you optimize the very inner loop and that's it.
\end_layout

\end_deeper
\begin_layout Enumerate
Avoid using Interfaces.
 If you have an interface that is frequently used (maybe in a loop) in your
 application, change it to an abstract class, if possible.
 This is necessary because interface methods cannot be dynamically bound
 by the VM, thus each method call must be looked up in the methods table
 each time it is called.
 In normal and in abstract classes, the method is looked up only once and
 then its address is bound and used in all subsequent calls.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring abstract classes0
interfaces Palm: 4.11, Win: 2.16, BB: 1.66, iPhone: 8.83
\end_layout

\begin_layout Labeling
\labelwidthstring abstract classes0
abstract
\begin_inset space ~
\end_inset

classes Palm: 1.70, Win: 0.79, BB: 1.53, iPhone: 2.54
\end_layout

\begin_layout Labeling
\labelwidthstring abstract classes0
normal
\begin_inset space ~
\end_inset

classes Palm: 1.70, Win: 0.79, BB: 1.46, iPhone: 2.53
\end_layout

\end_deeper
\begin_layout Enumerate
Use arithmetic shifts instead of power of 2 multiplications.
 For example, 
\family typewriter
x*2
\family default
 can be changed to 
\family typewriter
x<<1
\family default
, 
\family typewriter
x*4 = x<<2
\family default
, etc.
 The same is valid for divisions: 
\family typewriter
x/2 = x>>1
\family default
, 
\family typewriter
x/4 = x>>2
\family default
, etc.
 But be careful: this only works for positive numbers.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
*/
\family default
 Palm: 0.79, Win: 0.58, BB: 1.39, iPhone: 1.02
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
<<>>
\family default
 Palm: 0.63, Win: 0.37, BB: 0.86, iPhone: 0.93
\end_layout

\end_deeper
\begin_layout Enumerate
Use 
\family typewriter
&
\family default
 instead of 
\family typewriter
%
\family default
 (modulus) when possible.
 The situations where this is possible is when you have 
\family typewriter
x%2
\family default
, 
\family typewriter
x%4
\family default
, 
\family typewriter
x%8
\family default
, 
\family typewriter
x%16
\family default
, ..., 
\family typewriter
x%(2
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
n
\end_layout

\end_inset

)
\family default
.
 You can replace it by 
\family typewriter
x&1
\family default
, 
\family typewriter
x&3
\family default
, 
\family typewriter
x&7
\family default
, 
\family typewriter
x&15
\family default
, ..., 
\family typewriter
x&(2
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
n
\end_layout

\end_inset

-1)
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
%
\family default
 Palm: 0.57, Win: 0.48, BB: 1.03, iPhone: 0.76
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
&
\family default
 Palm: 0.49, Win: 0.27, BB: 0.63, iPhone: 0.70
\end_layout

\end_deeper
\begin_layout Enumerate
Use aliases when dealing with an array that stores classes.
 Instead of
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

centerX = pos[i].x;
\end_layout

\begin_layout Plain Layout

centerY = pos[i].y;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 1.15, Win: 0.63, BB: 1.35, iPhone: 1.61
\end_layout

\begin_layout Standard
use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Coord c = pos[i];
\end_layout

\begin_layout Plain Layout

centerX = c.x;
\end_layout

\begin_layout Plain Layout

centerY = c.y;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 1.03, Win: 0.57, BB: 1.18, iPhone: 1.48
\end_layout

\begin_layout Standard
Because each time you access an array position, the VM checks for null pointer
 exceptions, array index out of bounds exceptions, and does a multiply to
 access the memory address, which expends time.
\end_layout

\end_deeper
\begin_layout Enumerate
Use an array (E.g.: 
\family typewriter
String[]
\family default
, 
\family typewriter
int[]
\family default
, etc) instead of 
\family typewriter
Vector
\family default
 (or 
\family typewriter
IntVector
\family default
) when you know in advance the size and it will not grow or shrink.
 Adding elements to 
\family typewriter
Vector
\family default
 require the call of 
\family typewriter
addElement()
\family default
 hundreds of times, which affects performance.
\end_layout

\begin_layout Enumerate
If you need to do lots of 
\family typewriter
String
\family default
 concatenations, use a 
\family typewriter
StringBuffer
\family default
 instead of direct 
\family typewriter
String
\family default
 additions (+).
 This saves time and, especially, memory! It can avoid out of memory errors
 in some situations, specially when parsing text and/or xml.
 When in loop, remember to reuse 
\family typewriter
StringBuffer
\family default
 objects, using 
\family typewriter
StringBuffer.setLength(0)
\family default
.
 But note that when using 
\family typewriter
StringBuffer
\family default
 to concatenate only a few 
\family typewriter
String
\family default
s, there's no performance gain at all.
 In other words, optimize your program to use 
\family typewriter
StringBuffer
\family default
 only when doing things in loops.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String s = "";
\end_layout

\begin_layout Plain Layout

for (int i=0; i < LOOP3; i++) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	s += i;
\end_layout

\begin_layout Plain Layout

	if (n-- == 0)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		n = 100;
\end_layout

\begin_layout Plain Layout

		s = "";
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 126.00, Win: 134.00, BB: 331.40, iPhone: 225.2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=0; i < LOOP3; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sb.append(i);
\end_layout

\begin_layout Plain Layout

	if (n-- == 0)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		n = 100;
\end_layout

\begin_layout Plain Layout

		sb.setLength(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 6.00, Win: 2.40, BB: 70.00, iPhone: 7.00
\end_layout

\begin_layout Standard
From this test, you can see that BlackBerry's garbage collector has a very
 poor performance, and thus, on that platform, you should avoid the creation
 of many objects.
\end_layout

\end_deeper
\begin_layout Enumerate
When using 
\family typewriter
ListBox
\family default
 and 
\family typewriter
ComboBox
\family default
, don't initialize them by calling 
\family typewriter
add()
\family default
 repeatedly.
 Instead, create a new array with the data and assign it directly to the
 
\family typewriter
ListBox
\family default
/
\family typewriter
ComboBox
\family default
 using the constructor that receives an array of 
\family typewriter
Object
\family default
s.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=0; i < 10000; i++)
\end_layout

\begin_layout Plain Layout

	lb.add(Convert.toString(i));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 35.00, Win: 45.60, BB: 212.30, iPhone: 76.60
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String []s = new String[10000];
\end_layout

\begin_layout Plain Layout

for (int i=0; i < 10000; i++)
\end_layout

\begin_layout Plain Layout

	s[i] = Convert.toString(i);
\end_layout

\begin_layout Plain Layout

lb.add(s);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 19.00, Win: 8.80, BB: 132.80, iPhone: 33.10
\end_layout

\end_deeper
\begin_layout Enumerate
Use 
\family typewriter
int
\family default
 instead of 
\family typewriter
long
\family default
 and 
\family typewriter
double
\family default
 whenever possible.
 The 
\family typewriter
long
\family default
 type has to be emulated on 32-bit processors.
 Currently, almost all PDA processors have a math co-processor and thus
 
\family typewriter
double
\family default
 is a quite fast operation, although still slower than 
\family typewriter
int
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
long
\family default
 Palm: 2.04, Win: 3.88, BB: 2.72, iPhone: 1.99
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
double
\family default
 Palm: 1.72, Win: 0.99, BB: 3.58, iPhone: 1.34
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Palm: 0.72, Win: 0.63, BB: 1.52, iPhone: 0.90
\end_layout

\end_deeper
\begin_layout Enumerate
It is always better to use a 
\family typewriter
switch
\family default
/
\family typewriter
case
\family default
 instead of lots of 
\family typewriter
if
\family default
s/
\family typewriter
else
\family default
s.
 Even if the code isn't called much, a 
\family typewriter
switch
\family default
/
\family typewriter
case
\family default
 makes the code cleaner (like the suggested approach for the 
\family typewriter
onEvent()
\family default
 method – see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Event-Handling"

\end_inset

).
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
if/else Palm: 0.84, Win: 0.48, BB: 1.19, iPhone: 1.23
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
switch Palm: 0.72, Win: 0.43, BB: 1.04, iPhone: 1.20
\end_layout

\end_deeper
\begin_layout Enumerate
When using (
\family typewriter
Int
\family default
)
\family typewriter
Vector
\family default
 and (
\family typewriter
Int
\family default
)
\family typewriter
Hashtable
\family default
 and you have an estimate of the final size, construct it with that estimated
 size and not with the default constructor, to avoid buffer reallocation.
 Each time you add an element and the vector is filled, it allocates a new
 buffer 20% larger than the current one and copies all the contents to it,
 thus spending time and memory.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring starting from 10000000 
starting
\begin_inset space ~
\end_inset

from
\begin_inset space ~
\end_inset

10 Palm: 5.00, Win: 2.4, BB: 43.60, iPhone: 7.30
\end_layout

\begin_layout Labeling
\labelwidthstring starting from 10000000 
starting
\begin_inset space ~
\end_inset

from
\begin_inset space ~
\end_inset

10000 Palm: 3.00, Win: 1.7, BB: 16.90, iPhone: 6.30
\end_layout

\end_deeper
\begin_layout Enumerate
When using 
\family typewriter
String.indexOf()
\family default
, use the method that receives an 
\family typewriter
int
\family default
 value instead of the one that receives a 
\family typewriter
String
\family default
 value if the String being searched has a length of one 
\family typewriter
char
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Palm: 3.42, Win: 1.64, BB: 18.05, iPhone: 4.98
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
String
\family default
 Palm: 3.94, Win: 1.90, BB: 56.74, iPhone: 6.08
\end_layout

\end_deeper
\begin_layout Enumerate
Use aliases when accessing objects that are accessible by methods.
 For example, instead of:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

db.getResizeRecord().restartRecord(index);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

db.getResizeRecord().endRecord();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ResizeRecord rs = db.getResizeRecord();
\end_layout

\begin_layout Plain Layout

rs.restartRecord(index);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

rs.endRecord();
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Use the arithmetic shortcuts like 
\family typewriter
x+=y
\family default
, 
\family typewriter
x-=y
\family default
, 
\family typewriter
x*=y
\family default
, 
\family typewriter
x/=y
\family default
, 
\family typewriter
x&=y
\family default
, etc, instead of 
\family typewriter
x=x+y
\family default
, 
\family typewriter
x=x-y
\family default
, 
\family typewriter
x=x*y
\family default
, etc.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
x
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

x+y
\family default
 Palm: 0.53, Win: 0.27, BB: 0.70, iPhone: 0.71
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
x
\begin_inset space ~
\end_inset

+=
\begin_inset space ~
\end_inset

y
\family default
 Palm: 0.37, Win: 0.22, BB: 0.45, iPhone: 0.57
\end_layout

\end_deeper
\begin_layout Enumerate
Use local variables whenever possible, instead of instance variables, specially
 when they are used in loops.
 For example:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Test
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int loopVar;
\end_layout

\begin_layout Plain Layout

	public void testLoop()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		for (loopVar = 0; loopVar < 1000; loopVar++)
\end_layout

\begin_layout Plain Layout

			...
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead, make 
\family typewriter
loopVar
\family default
 a local variable inside the 
\family typewriter
testLoop()
\family default
 method, moving it to inside the method.
\end_layout

\begin_layout Labeling
\labelwidthstring instance variable0
instance
\begin_inset space ~
\end_inset

variable Palm: 0.92, Win: 0.46, BB: 1.03, iPhone: 1.25
\end_layout

\begin_layout Labeling
\labelwidthstring instance variable0
local
\begin_inset space ~
\end_inset

variable Palm: 0.40, Win: 0.22, BB: 0.49, iPhone: 0.57
\end_layout

\begin_layout Standard
Another trick is to create a local copy of a class variable in the method
 when it is used in a loop.
 For instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

StringBuffer sb = new StringBuffer(1024);
\end_layout

\begin_layout Plain Layout

public void processSomething()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	StringBuffer sb = this.sb;
\end_layout

\begin_layout Plain Layout

	sb.setLength(0);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
When iterating over a 
\family typewriter
String
\family default
, be careful to choose the correct approach for the target platform.
 Not always the best approach for one platform is also the best for the
 others.
 In this case, you have three choices: iterate using 
\family typewriter
charAt()
\family default
, iterate over the 
\family typewriter
char
\family default
 array provided by 
\family typewriter
toCharArray()
\family default
, or iterate over the byte array provided by 
\family typewriter
getBytes()
\family default
.
 The last two approaches increase the memory usage because they create arrays
 (the 
\family typewriter
char
\family default
 array takes twice the memory of a byte array).
\end_layout

\begin_deeper
\begin_layout Standard
Using 
\family typewriter
toCharArray()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String s = "a string";
\end_layout

\begin_layout Plain Layout

char []c = s.toCharArray(); 
\end_layout

\begin_layout Plain Layout

int n = c.length;
\end_layout

\begin_layout Plain Layout

for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	...
 c[i] ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 98.50, Win: 61.95, BB: 243.20, iPhone: 151.10
\end_layout

\begin_layout Standard
Using 
\family typewriter
getBytes()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

byte []b = s.getBytes();
\end_layout

\begin_layout Plain Layout

int n = b.length;
\end_layout

\begin_layout Plain Layout

for (int j =0; j < n; j++)
\end_layout

\begin_layout Plain Layout

	if (b[j] == (byte)'g')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 94.50, Win: 54.75, BB: 155.75, iPhone: 363.85
\end_layout

\begin_layout Standard
Now, using 
\family typewriter
charAt()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int n = s.length();
\end_layout

\begin_layout Plain Layout

for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	...
 s.charAt(i) ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Palm: 272.5, Win: 134.55, BB: 108.90, iPhone: 557.30
\end_layout

\begin_layout Standard

\family typewriter
getBytes()
\family default
 convert 
\family typewriter
char
\family default
s to bytes using the 
\family typewriter
totalcross.sys.
\begin_inset Newline newline
\end_inset

CharacterConvertion
\family default
 class.
 It is faster in TotalCross because it detects the standard 
\family typewriter
CharacterConvertion
\family default
 class being used and, in this case, the native implementation of 
\family typewriter
chars2bytes()
\family default
 is used.
\end_layout

\begin_layout Standard
The iPhone has a virtual memory that swaps unused portions to disk; this
 may explain why this test ran so slowly when comparing to the other platforms.
\end_layout

\end_deeper
\begin_layout Enumerate
The use of 
\family typewriter
short
\family default
 and byte data types are slower than using 
\family typewriter
int
\family default
 and also saves no memory at all.
 This happens because boolean, 
\family typewriter
short
\family default
, and byte are internally stored as 
\family typewriter
int
\family default
 and they have to be converted to/from 
\family typewriter
int
\family default
 when are operated on.
 They should only be used when creating arrays; in such situation they do
 save memory.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Palm: 0.47, Win: 0.27, BB: 0.72, iPhone: 0.68
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
short
\family default
 Palm: 0.53, Win: 0.32, BB: 0.71, iPhone: 0.81
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
byte
\family default
 Palm: 0.56, Win: 0.32, BB: 0.73, iPhone: 0.81
\end_layout

\end_deeper
\begin_layout Standard
Remember that although the time of each operation is small, in your whole
 program every speed improvement gained using the approaches described above
 will count a lot.
\end_layout

\begin_layout Standard
As a side note, running the same tests on SuperWaba 5.85, TotalCross 1.0 beta
 4 was 32% faster on Palm OS, and 10% faster on Windows Mobile.
\end_layout

\begin_layout Part
APPENDIXES 
\end_layout

\begin_layout Chapter
\start_of_appendix
Copyright
\begin_inset CommandInset label
LatexCommand label
name "chap:Copyright"

\end_inset


\end_layout

\begin_layout Standard
All contents of this tutorial, including text, programs, applets, source
 code, and images are copyrighted and owned by SuperWaba Ltda, all rights
 reserved.
 No material can be reproduced and/or distributed electronically or in print
 without written permission.
\end_layout

\begin_layout Chapter
Platform specific known features/flaws
\end_layout

\begin_layout Section
Palm OS
\end_layout

\begin_layout Standard
Palm OS has a very limited number of threads available to the programmer.
 In our tests, we couldn't create more than 10 threads.
\end_layout

\begin_layout Standard
When an application crashes, the device usually resets.
\end_layout

\begin_layout Section
Windows CE
\end_layout

\begin_layout Standard
When an application crashes, it usually freezes and must be closed by the
 user.
\end_layout

\begin_layout Section
BlackBerry
\end_layout

\begin_layout Itemize

\family typewriter
try
\family default
/
\family typewriter
catch
\family default
 block with 
\family typewriter
Throwable
\end_layout

\begin_deeper
\begin_layout Quote
“The BlackBerry JVM is optimized to eliminate the stack trace if it locates
 code that catches the exception using 
\family typewriter
catch (Exception e)
\family default
.
 It does not eliminate the stack trace if your application catches the 
\family typewriter
Throwable
\family default
 exception.
\end_layout

\begin_layout Quote
For example, the following code does not print a stack trace:
\end_layout

\begin_layout Quote
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

catch (IOException e) {
\end_layout

\begin_layout Plain Layout

	e.printStackTrace()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Quote
To print a stack trace, write code like in the following example:
\end_layout

\begin_layout Quote
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

catch (Throwable t) {
\end_layout

\begin_layout Plain Layout

	t.printStackTrace();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Quote
When you debug your application, to view the stack trace, catch a 
\family typewriter
Throwable
\family default
 instance” - Excerpted from “BlackBerry Java Development Environment - Fundament
als Guide”
\end_layout

\begin_layout Standard
In short, the above means the following:
\end_layout

\begin_layout Itemize
When you catch an exception as 
\family typewriter
Throwable
\family default
, you may print the stack trace using 
\family typewriter
printStackTrace()
\family default
.
 Otherwise, it assumes your code handled the exception properly and discards
 the stack trace.
 In this case 
\family typewriter
printStackTrace()
\family default
 will print nothing.
\end_layout

\begin_layout Itemize
When you catch an exception as 
\family typewriter
Throwable
\family default
, you don't actually stop the exception propagation.
 It only lets you inspect the exception for debugging purposes.
 The exception is still propagated to the caller method!
\end_layout

\begin_layout Itemize
Catching as 
\family typewriter
Exception
\family default
 (or a subclass of it) allows you to stop the propagation, but does not
 give you access to the stack trace.
\end_layout

\begin_layout Itemize
It is not possible to retrieve stack trace or redirect the 
\family typewriter
prinStackTrace()
\family default
 method to other stream.
 Therefore, it's not possible to log exceptions in BlackBerry!
\end_layout

\begin_layout Standard
So be careful when using 
\family typewriter
try
\family default
/
\family typewriter
catch
\family default
 blocks with 
\family typewriter
Throwable
\family default
, it does not the same way on BlackBerry.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
finalize()
\family default
 method support
\end_layout

\begin_deeper
\begin_layout Standard
Since BlackBerry does not support 
\family typewriter
finalize()
\family default
 methods, TotalCross implements it in a manner that objects are finalized
 only after the program quits, instead of doing it after every garbage collector
 runs.
\end_layout

\end_deeper
\begin_layout Itemize
When an application crashes, the devices shows a white screen with the name
 of the exception that occurred.
 Holding Alt and pressing l+g+l+g shows its event log.
 Searching it, it is possible to see the exception stack trace.
\end_layout

\begin_layout Itemize
It is not possible to access the root (
\family typewriter
/
\family default
) directory.
\end_layout

\begin_layout Section
iPhone and Android
\end_layout

\begin_layout Standard
When an application crashes, it is usually closed by the system.
\end_layout

\begin_layout Standard
After closing a TotalCross application on a iPhone jailbroken device, you
 must wait some seconds to open another TotalCross application.
 Trying to open it again almost instantaneously after closing another one,
 it will start its opening and suddenly close.
\end_layout

\begin_layout Standard
Pressing the home button puts it to background.
 If it is doing some data processing, it won't stop.
 The SO may kill your background application if it is in need of resources.
 There is no way to prevent it.
\end_layout

\begin_layout Standard
Unless you are using a jailbroken iPhone, your application cannot access
 another application folder.
 On Android is also possible for it to access a memory card.
\end_layout

\begin_layout Chapter
Tutorials for third-party tools
\end_layout

\begin_layout Section
Deploying with Ant
\end_layout

\begin_layout Standard
Apache Ant is a Java-based build tool, similar to Make, that may be executed
 from the shell or from an IDE, like Eclipse.
\end_layout

\begin_layout Standard
The TotalCross SDK comes with a sample Ant build file.
 Just copy the 
\family typewriter
build.xml
\family default
 file located in 
\family typewriter
TotalCrossSDK/docs/companion_resources/ant_build
\family default
 to your application's directory, and change its properties as described
 below:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="40col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Property Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
project name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“ACME”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Project's name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
sdk.root
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/TotalCrossSDK”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TotalCross SDK installation path
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset Quotes eld
\end_inset

C:/ACME/main/Live.class”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path and name of the class that extends 
\family typewriter
MainWindow
\family default
 (must end with 
\family typewriter
.class
\family default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/ACME/Live.jar”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path to the 
\family typewriter
.jar
\family default
 that contains all classes and resources.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/ACME/main”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path to where the class that extends 
\family typewriter
MainWindow
\family default
 is located.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
platforms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“-palm -wince -win32”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Platforms to deploy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
extra.args
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“/k /v”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any extra arguments you want to pass to the deployer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
target.dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“.”
\family default
 (single dot - current path)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The target directory where the files will be created.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Configuring Eclipse to Run and Debug TotalCross Programs
\end_layout

\begin_layout Standard
This is a guide to help you to setup the Eclipse IDE (www.eclipse.org) to
 develop TotalCross programs.
\end_layout

\begin_layout Standard
Because this isn't a guide for Eclipse or Java, it assumes the following:
\end_layout

\begin_layout Itemize
Java JDK 6 is installed and configured.
\end_layout

\begin_layout Itemize
The Eclipse IDE with Java Development Tools installed.
 Please notice this guide was created using the Eclipse Ganymede (version
 3.4.x) package “Eclipse IDE for Java Developers”, and the steps presented
 here may not be valid for other versions.
\end_layout

\begin_layout Itemize
We'll refer to the TotalCross location as TotalCross SDK.
\end_layout

\begin_layout Standard
We'll use the UIGadgets sample that comes with the SDK to skip the programming
 and focus on the project setup:
\end_layout

\begin_layout Enumerate
Create a new Java Project: Open the menu File and click on New > Java Project.
\end_layout

\begin_layout Enumerate
Choose a project name for your project and click on Finish.
 We'll use UIGadgets.
\end_layout

\begin_layout Enumerate
Click on “+” to expand the project and right-click on the folder “src” and
 choose “Import...”.
\end_layout

\begin_layout Enumerate
On the new “Import” dialog shown, click on “+” to expand the folder “General”,
 select “File System” and click “Next >”.
\end_layout

\begin_layout Enumerate
Now write the complete file path to the UIGadgets example, or use “Browse”
 to navigate to the file system.
 Our source is located at 
\family typewriter
TotalCrossSDK/src/tc/samples/ui/gadgets
\family default
.
\end_layout

\begin_layout Enumerate
After inputing the source location, check the file 
\family typewriter
UIGadgets.java
\family default
 on the right panel; Below you can see the default input folder is 
\family typewriter
UIGadgets/src
\family default
, change it to 
\family typewriter
UIGadgets/src/tc/ samples/ui/gadgets
\family default
 and click on “Finish”.
\end_layout

\begin_layout Enumerate
Now we can see our project has 
\family typewriter
tc.samples.ui.gadgets.UIGadgets.java
\family default
 on it, but it is also displaying several build errors.
 To fix this, right-click on the project and choose “Properties”.
\end_layout

\begin_layout Enumerate
On the left panel, select “Java Build Path”; Then, on the right panel, click
 on the “Libraries” tab and on the button “Add External JARs...”; Browse your
 file system to 
\family typewriter
TotalCrossSDK/dist
\family default
 and select the file 
\family typewriter
tc.jar
\family default
.
\end_layout

\begin_layout Enumerate
Now the “Libraries” tab should also show the 
\family typewriter
tc.jar
\family default
.
 Click on “+” to expand it and select “Javadoc location”.
 Now click on the button “Edit...” to open a new dialog, then browse your file
 system and select the 
\family typewriter
TotalCrossSDK/docs/html/
\family default
 directory and press “Ok” to confirm.
\end_layout

\begin_layout Enumerate
Back to the “Libraries” tab, select “Source attachment” and click on the
 button “Edit...” to open a new dialog, then browse your file system and select
 the 
\family typewriter
TotalCrossSDK/src
\family default
 directory and press “Ok” to confirm.
 This finishes the build path configuration.
\end_layout

\begin_layout Enumerate
Look again at the left panel and select “Java Compiler”.
 Check the option “Enable project specific settings” and change the “Compiler
 compliance level” to “1.3”.
\end_layout

\begin_layout Enumerate
Press “Ok” to confirm and close the “Properties” dialog.
\end_layout

\begin_layout Enumerate
Re-build the project and the build errors should all be gone (skip this
 step if your Eclipse is configured to Build automatically).
\end_layout

\begin_layout Chapter
Logging errors Example
\end_layout

\begin_layout Standard
We have developped a way to automatically generate an error log.
 In our case, the log is sent by email on each data synchronization.
 Thus, it is possible to catch errors that occur when the application is
 in production and the user can't send the device to us.
 The option described here uses commands that are available in version 1.52,
 released on March 20.
 The code written here is NOT in the SDK.
 
\end_layout

\begin_layout Standard
Firstly, you need to centralize all exception processing to throw them into
 a file.
 We must also find out if the program aborted for some reason.
 With the class below you can do this for Android.
 You can change it for other devices: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class GerenciamentoDeErros 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

	public static String retornaRaizTemp()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		if (Settings.onJavaSE)          
\end_layout

\begin_layout Plain Layout

			return Settings.appPath+"/../";              
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try        
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			if (new File("/sdcard/DCIM").exists())             
\end_layout

\begin_layout Plain Layout

				return "/sdcard";       
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		catch (Exception e) {}        		
\end_layout

\begin_layout Plain Layout

		return Settings.appPath;    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public static String NOME_ARQUIVO = retornaRaizTemp()+"/errolm.log";   
     
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public static void finalizouCorretamente()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		try       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			File fin = new File("device/finalizou",File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

			fin.writeBytes(new byte[]{(byte)1},0,1);          
\end_layout

\begin_layout Plain Layout

			fin.close();       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (Exception e)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();       
\end_layout

\begin_layout Plain Layout

		}    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void verificaSeFinalizou()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		try       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			File fin = new File("device/finalizou",File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

			byte[] b = new byte[1];          
\end_layout

\begin_layout Plain Layout

			int leu = fin.readBytes(b,0,1);          
\end_layout

\begin_layout Plain Layout

			if (leu != 1 || b[0] != 1)                       
\end_layout

\begin_layout Plain Layout

				if (Settings.platform.equals(Settings.ANDROID))             
\end_layout

\begin_layout Plain Layout

				{                
\end_layout

\begin_layout Plain Layout

					TelaBase.mensagem("The program has not been finalized properly.
 Synchronize the device as soon as possible so that the error report can
 be sent");     					
\end_layout

\begin_layout Plain Layout

					processaLogCat();             
\end_layout

\begin_layout Plain Layout

				}                    					
\end_layout

\begin_layout Plain Layout

				fin.setPos(0);          
\end_layout

\begin_layout Plain Layout

				fin.writeBytes(new byte[]{(byte)0},0,1);          
\end_layout

\begin_layout Plain Layout

				fin.close();       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (FileNotFoundException fnfe)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			Vm.debug("finalizou does not exist");       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (Exception e)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();       
\end_layout

\begin_layout Plain Layout

		}    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(Throwable t)    
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (!Settings.onJavaSE)
\end_layout

\begin_layout Plain Layout

			log(t.getClass().getName()+" "+t.getMessage());
\end_layout

\begin_layout Plain Layout

		log(Vm.getStackTrace(t));
\end_layout

\begin_layout Plain Layout

		if (Settings.onJavaSE)
\end_layout

\begin_layout Plain Layout

			t.printStackTrace();
\end_layout

\begin_layout Plain Layout

		TelaBase.mensagem("An error has occurred.
 Synchronize the device to send the error report.");    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(String s)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		byte[] bytes = s.getBytes();
\end_layout

\begin_layout Plain Layout

		log(bytes,0,bytes.length);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(byte[] bytes, int ofs, int len)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			File f = new File(NOME_ARQUIVO, File.CREATE);
\end_layout

\begin_layout Plain Layout

			f.setPos(f.getSize());
\end_layout

\begin_layout Plain Layout

			f.writeBytes(("========== "+new Date()+" "+new Time()+" TC: "+Settings.versionS
tr+" LM: "+Settings.appVersion+" ==========").getBytes());
\end_layout

\begin_layout Plain Layout

			f.writeBytes(bytes, ofs, len);
\end_layout

\begin_layout Plain Layout

			f.close();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	private static void processaLogCat()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (!Settings.platform.equals(Settings.ANDROID))
\end_layout

\begin_layout Plain Layout

			return;
\end_layout

\begin_layout Plain Layout

		String saida1 = "/sdcard/errocheio.log";
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			new File(saida1).delete();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e) {}
\end_layout

\begin_layout Plain Layout

		Vm.exec("cmd","logcat -d -f "+saida1+" -v time *:I",0,true);
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			byte[] enter = {'
\backslash
n',' '};
\end_layout

\begin_layout Plain Layout

			File f = new File(saida1);
\end_layout

\begin_layout Plain Layout

			while (!f.exists())
\end_layout

\begin_layout Plain Layout

				Vm.sleep(500);
\end_layout

\begin_layout Plain Layout

			File fi = new File(saida1, File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

			ByteArrayStream bas = new ByteArrayStream(f.getSize()/2);
\end_layout

\begin_layout Plain Layout

			LineReader lr = new LineReader(fi);
\end_layout

\begin_layout Plain Layout

			bas.writeBytes(enter,0,enter.length);
\end_layout

\begin_layout Plain Layout

			String s;
\end_layout

\begin_layout Plain Layout

			while ((s = lr.readLine()) != null)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				if (s.indexOf(" W/ResourceType") != -1) // remove useless tags
\end_layout

\begin_layout Plain Layout

					continue;
\end_layout

\begin_layout Plain Layout

				if (s.indexOf(" I/DEBUG") != -1 && s.endsWith("code around pc:"))
\end_layout

\begin_layout Plain Layout

					while ((s = lr.readLine()) != null && s.indexOf(" I/DEBUG")!= -1) {}
 // skips the stack, which is useless (and consumes 20% of log file!)
\end_layout

\begin_layout Plain Layout

				if (s != null)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					bas.writeBytes(s);
\end_layout

\begin_layout Plain Layout

					bas.writeBytes(enter,0,enter.length);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			fi.close();
\end_layout

\begin_layout Plain Layout

			log(bas.getBuffer(),0,bas.getPos());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
How to use it:
\end_layout

\begin_layout Enumerate
On the application 
\family typewriter
initUI()
\family default
, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GerenciamentoDeErros.verificaSeFinalizou(); 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
On the application 
\family typewriter
onExit()
\family default
, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GerenciamentoDeErros.finalizouCorretamente(); 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Whenever treating exceptions, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	GerenciamentoDeErros.log(e);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
When synchronizing, check if the error file exists, load it, send it, and
 erase it:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String nomeLog = GerenciamentoDeErros.NOME_ARQUIVO;
\end_layout

\begin_layout Plain Layout

if (new File(nomeLog).exists())
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sinc.log("Sending error report.");
\end_layout

\begin_layout Plain Layout

	File log = new File(nomeLog,File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

	byte[] lbuf = new byte[2048];
\end_layout

\begin_layout Plain Layout

	int tam = log.getSize();
\end_layout

\begin_layout Plain Layout

	final int TAM_MAX = 100000;
\end_layout

\begin_layout Plain Layout

	if (tam > TAM_MAX) // If the file is too big, only sends the last 100 K
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		log.setPos(tam-TAM_MAX);
\end_layout

\begin_layout Plain Layout

		tam = TAM_MAX;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	ds.writeInt(tam);
\end_layout

\begin_layout Plain Layout

	int nn;
\end_layout

\begin_layout Plain Layout

	while ((nn = log.readBytes(lbuf,0,lbuf.length)) > 0)
\end_layout

\begin_layout Plain Layout

		ds.writeBytes(lbuf,0,nn);
\end_layout

\begin_layout Plain Layout

	log.delete();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else ds.writeInt(0);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Observations:
\end_layout

\begin_layout Enumerate
The 
\family typewriter
GerenciamentoDeErros
\family default
 class allows logging everything.
 AVOID THAT: only errors should be there.
\end_layout

\begin_layout Enumerate
In our synchronization, we send the log error using a servlet; if you preffer
 using a webservice, you must implement something different.
\end_layout

\begin_layout Enumerate
In the server, we get the report and send it by e-mail directly to the developer
 support service.
 If the report has tcvmlib errors, you should open a request in our support
 service with the error log and addicional information to help us to reproduce
 the errors.
 
\end_layout

\end_body
\end_document
