<?xml version="1.0" encoding="iso-8859-1"?>
<!--
/*********************************************************************************
 *  TotalCross Software Development Kit                                          *
 *  Copyright (C) 2000-2011 SuperWaba Ltda.                                      *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *********************************************************************************/

IMPORTANT:
           SDK -> SDK WITH DEMO VIRTUAL MACHINES WITH TRIAL PERIOD
           VMS -> ONLY VIRTUAL MACHINES WITHOUT TRIAL PERIOD

-->

<project name="TotalCross SDK deploy" default="help" basedir=".">

<description>
   This file is used to deploy the TotalCross C based components.
</description>

<!-- import ANT Contrib -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<taskdef classpath="orangevolt-ant-tasks-1.3.2.jar" resource="com/orangevolt/tools/ant/taskdefs.properties"/>
	
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   setup all build process properties.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<condition property="exe" value=".exe" else=""><os family="windows" /></condition>

<!-- compiler settings -->
<condition property="rootpath" value="${basedir}/../..">
	<os family="unix"/>
</condition>
<property name="rootpath"      value="p:"/> <!-- MUST BE ABSOLUTE PATH -->
<property file="${rootpath}/userpaths.properties"/>
<fail unless="msvc.path" message="Cannot find file ${rootpath}/userpaths.properties!"/>

<!-- Checks for vc6 and vc2008 -->
<if>
 	<equals arg1="${msvc.version}" arg2="vc6" />
<then>
 	<property name="msvc.executable" value="msdev.exe" />
</then>
<elseif>
	<equals arg1="${msvc.version}" arg2="vc2008" />
<then>
	<property name="msvc.executable" value="devenv.exe" />
</then>
</elseif>
<else>
	<fail message="Must set the property msvc.version to either vc6 or vc2008 in userpaths.properties" />
</else>
</if>  

<!-- IDEs and compilers project files -->
<property name="msvc.project.path" value="${basedir}/${msvc.version}"/>
<property name="evc.project.path"  value="${basedir}/evc3"/>
<property name="gcc.project.path"  value="${basedir}/gcc-posix"/>
<property name="palm.project.path"  value="${basedir}/gcc-palm"/>
<property name="evc.project"       value="${evc.project.path}/TotalCross.vcw"/>
<property name="android.project.path" value="${basedir}/android"/>
<property name="android.temp"      value="${android.project.path}/apps/tcvm/deploy" />

<!-- properties regarding the TC paths -->
<property name="source.sdk.path"   value="${basedir}/../../TotalCrossSDK"/>
<property name="source.vms.path"   value="${basedir}/.."/>
<property name="base.target.path"  value="${basedir}/../../output/release"/>
<property name="target.sdk.path"   value="${base.target.path}/TotalCrossSDK"/>
<property name="target.vms.path"   value="${base.target.path}/TotalCrossVMS"/>
<property name="target.noras.path" value="${base.target.path}/TotalCrossVMS_NORAS"/>
<property name="tools"             value="${source.sdk.path}/etc/tools"/>

<property name="noras_dir"         value="${source.vms.path}/src/init/noras_ids" />

<condition property="android.sdk.path" value="P:/android-sdk-windows" else=""><os family="windows" /></condition>
<property name="apk" value="${android.temp}/TotalCross.apk" />

<!-- installshield paths -->
<property file="${rootpath}/ishield.properties"/>

<!-- builder and iphone information -->
<property file="${rootpath}/buildserver.properties"/>

<!-- load platform environment variables -->
<property environment="env"/>

<mkdir dir="${source.sdk.path}/dist" />
	
  
<!-- this target displays a help message which documents this configuration file features -->

<target name="help" >
  <echo message="To see the possible targets, type 'ant -p'"/>
</target>


<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildPalmOS5
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="buildPalmOS5_launcher" depends="updateCompilerDate4D">
    <echo message="GENERATING PALM OS 5 FILES - LAUNCHER"/>

    <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i P:\TotalCrossVM\builders\gcc-palm\launcher\runmake.sh'/></exec>
    <copy file="P:\TotalCrossVM\builders\gcc-palm\Launcher\Launcher.prc" todir="${source.sdk.path}\etc\launchers\palm" overwrite="yes"/>
</target>

<target name="buildPalmOS5_vms" depends="updateCompilerDate4D">

  <echo message="GENERATING PALM OS 5 FILES - VMS"/>

  <copy file="gcc-palm/tcvm/options_nodemo.mk" tofile="gcc-palm/tcvm/options.mk" overwrite="yes"/>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i P:\TotalCrossVM\builders\gcc-palm\tcvm\clean.sh'/></exec>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i P:\TotalCrossVM\builders\gcc-palm\tcvm\runmake.sh'/></exec>
  <copy file="gcc-palm/tcvm/TCVM.prc" todir="${target.vms.path}/dist/vm/palm" overwrite="yes"/>

  <property name="matchbox"    value="${source.sdk.path}\etc\tools\matchbox\MatchBox.exe"/>
  <mkdir dir="${target.vms.path}\dist\vm\palm"/>
  <exec executable="${matchbox}" failonerror="yes"><arg line='/palm /name "TotalCross Files for Palm OS" /readme palmreadme.txt /output ${target.vms.path}\dist\vm\palm\Install.exe /files ${target.vms.path}\dist\vm\palm\TCVM.prc ${source.sdk.path}\dist\vm\palm\TCBase.pdb ${source.sdk.path}\etc\fonts\TCFont.pdb'/></exec>

</target>

<target name="buildPalmOS5_vms_noras" depends="updateCompilerDate4D">

  <echo message="GENERATING PALM OS 5 FILES - VMS NORAS"/>

  <copy file="gcc-palm/tcvm/options_noras.mk" tofile="gcc-palm/tcvm/options.mk" overwrite="yes"/>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i P:\TotalCrossVM\builders\gcc-palm\tcvm\clean.sh'/></exec>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i P:\TotalCrossVM\builders\gcc-palm\tcvm\runmake.sh'/></exec>
  <copy file="gcc-palm/tcvm/TCVM.prc" todir="${target.noras.path}/dist/vm/palm" overwrite="yes"/>

  <property name="matchbox"    value="${source.sdk.path}\etc\tools\matchbox\MatchBox.exe"/>
  <mkdir dir="${target.noras.path}\dist\vm\palm"/>
  <exec executable="${matchbox}" failonerror="yes"><arg line='/palm /name "TotalCross Files for Palm OS" /readme palmreadme.txt /output ${target.noras.path}\dist\vm\palm\Install.exe /files ${target.noras.path}\dist\vm\palm\TCVM.prc ${source.sdk.path}\dist\vm\palm\TCBase.pdb ${source.sdk.path}\etc\fonts\TCFont.pdb'/></exec>

</target>

<target name="buildPalmOS5_sdk" depends="updateCompilerDate4D">

  <echo message="GENERATING PALM OS 5 FILES - SDK"/>

  <copy file="gcc-palm/tcvm/options_demo.mk" tofile="gcc-palm/tcvm/options.mk" overwrite="yes"/>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i ${palm.project.path}\tcvm\clean.sh'/></exec>
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i ${palm.project.path}\tcvm\runmake.sh'/></exec>
  <copy file="gcc-palm/tcvm/options_nodemo.mk" tofile="gcc-palm/tcvm/options.mk" overwrite="yes"/>
  <copy file="gcc-palm/tcvm/TCVM.prc" todir="${target.sdk.path}/dist/vm/palm" overwrite="yes"/>

  <property name="matchbox"    value="${source.sdk.path}\etc\tools\matchbox\MatchBox.exe"/>
  <mkdir dir="${target.sdk.path}\dist\vm\palm"/>
  <exec executable="${matchbox}" failonerror="yes"><arg line='/palm /name "TotalCross Files for Palm OS" /readme palmreadme.txt /output ${target.sdk.path}\dist\vm\palm\Install.exe /files ${target.sdk.path}\dist\vm\palm\TCVM.prc ${target.sdk.path}\dist\vm\palm\TCBase.pdb ${source.sdk.path}\etc\fonts\TCFont.pdb'/></exec>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWin32 - Generate the files for Windows 98 and beyond
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWin32_vms" depends="updateCompilerDate4D">

  <echo message="GENERATING WIN32 FILES - VMS"/>

  <exec executable="${msvc.path}/${msvc.executable}" failonerror="yes">
  <arg line='${msvc.project.path}/TCVM.dsw /MAKE "TCVM - Win32 Release" /REBUILD'/>
  <arg line='${msvc.project.path}/TCVM.dsw /MAKE "TCSync - Win32 Release" /REBUILD'/>
  </exec>

  <copy file="${msvc.project.path}/release/TCSync.dll" todir="${target.vms.path}/dist/vm/win32" overwrite="yes"/>
  <copy file="${msvc.project.path}/release/TCVM.dll"   todir="${target.vms.path}/dist/vm/win32" overwrite="yes"/>

</target>

<target name="buildWin32_vms_noras" depends="updateCompilerDate4D">

  <echo message="GENERATING WIN32 FILES - VMS"/>

  <exec executable="${msvc.path}/${msvc.executable}" failonerror="yes">
  <arg line='${msvc.project.path}/TCVM.dsw /MAKE "TCVM - Win32 Noras" /REBUILD'/>
  </exec>

  <copy file="${msvc.project.path}/noras/TCVM.dll"   todir="${target.noras.path}/dist/vm/win32" overwrite="yes"/>

</target>

<target name="buildWin32_sdk" depends="updateCompilerDate4D">

  <echo message="GENERATING WIN32 FILES - SDK"/>
  <if>
    <equals arg1="${msvc.version}" arg2="vc6" />
    <then>
      <exec executable="${msvc.path}/${msvc.executable}" failonerror="yes">
        <arg line='${msvc.project.path}/TCVM.dsw /MAKE "TCVM - Win32 Demo" /REBUILD'/>
        <arg line='${msvc.project.path}/TCVM.dsw /MAKE "TCSync - Win32 Release" /REBUILD'/>
        </exec>
      </then>
    <elseif>
      <equals arg1="${msvc.version}" arg2="vc2008" />
      <then>
        <exec executable="${msvc.path}/${msvc.executable}" failonerror="yes">
          <arg line='${msvc.project.path}/TCVM.sln /rebuild "DEMO Release|Win32"'/>
          <!--arg line='${msvc.project.path}/TCVM.sln /MAKE "TCSync - Win32 Release" /REBUILD'/-->
          </exec>
        </then>
      </elseif>
    <else>
      <fail message="Must set the property msvc.version to either vc6 or vc2008 in userpaths.properties" />
      </else>
    </if>         
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWinCE

       call evc commandline compiler
       Important: to be able to compile some of these files, you must delete wce211\bin
       and copy the wce300\bin to wce211\bin (thus, updating all old compilers to new versions)
       these folders are located under <program files>\Microsoft eMbedded Tools\EVC\

       Note that the compiler may hang at random step, you just press ^c and start over again. M$ things...
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWinCE_vms" depends="updateCompilerDate4D">

  <echo message="GENERATING WINCE FILES - VMS"/>

  <echo message="=> 1 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Release POCKETPC"    /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.vms.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/ce" excludes="**/Litebase.*,**/TCDB2e.dll" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_vms.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.vms.path}"/>
  </antcall>

</target>

<target name="buildWinCE_vms_noras" depends="updateCompilerDate4D">

  <echo message="GENERATING WINCE FILES - VMS"/>

  <echo message="=> 1 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Noras POCKETPC"    /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.noras.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/noras" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_noras.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.noras.path}"/>
  </antcall>

</target>

<target name="buildWinCE_vms_noras_PocketPC_ARM" >

  <echo message="GENERATING WINCE ARM FILES - SDK"/>

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. 
     CHANGING THIS DON'T FORGET TO UPDATE THE TARGET buildWinCE_sdk !
  -->
  <echo message="=> 1 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>	

  <echo message="=> 2 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Motorola - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 6 of 6"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.noras.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/noras" excludes="**/Litebase.*" />
  </copy>
  <copy todir="${target.noras.path}/dist/vm/wince/PocketPC/ARM" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/ce/PocketPC/ARM" includes="OpticonH16.dll,SocketScan.dll,Symbol.dll,Dolphin.dll,Motorola.dll" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_noras.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle_PocketPC_ARM">
   <param name="path.param" value="${target.noras.path}"/>
  </antcall>
</target>	
	
<target name="buildWinCE_sdk" depends="updateCompilerDate4D">

  <echo message="GENERATING WINCE FILES - SDK"/>

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. -->
  <echo message="=> 1 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Demo MIPS POCKETPC"   /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Demo SH3 POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <echo message="=> 6 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 7 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 8 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 9 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>10 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Intermec - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>11 of 11"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Motorola - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_sdk.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.sdk.path}"/>
  </antcall>

</target>

<target name="buildWinCE_sdk_ARM" depends="updateCompilerDate4D">

  <echo message="GENERATING WINCE FILES - SDK"/>

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. -->
  <echo message="=> 3 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <echo message="=> 6 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 7 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 8 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 9 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>10 of 10"/><exec dir="${evc.path}" executable="${evc.path}/evc.exe" failonerror="yes"><arg line='${evc.project} /make "Intermec - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.sdk.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/demo" excludes="**/Litebase.*" />
  </copy>
  <copy todir="${target.sdk.path}/dist/vm/wince/PocketPC/ARM" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/ce/PocketPC/ARM" includes="OpticonH16.dll,SocketScan.dll,Symbol.dll,Dolphin.dll,Intermec.dll" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_sdk.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle_PocketPC_ARM">
   <param name="path.param" value="${target.sdk.path}"/>
  </antcall>

</target>  
  
<target name="buildWinCECabsSingle">

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwiz.exe" failonerror="no">
  <arg line="totalcross.inf /cpu HPC2000_ARM HPC211_ARM PocketPC_ARM PocketPC_MIPS PocketPC_SH3"/>
  </exec>

  <!-- copy the cab files -->
  <move todir="${path.param}/dist/vm/wince">
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.cab" casesensitive="no"/>
  </move>

  <!-- copy bat and ini files -->
  <copy todir="${path.param}/dist/vm/wince" overwrite="yes" >
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="CEinstall.ini,_CEinstall-RunMe.bat,CEinstall_WMOBILE.ini,_CEinstall-RunMe_WMOBILE.bat,ceinstall*.*" casesensitive="no"/>
  </copy>

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwizsp.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move file="${source.sdk.path}/etc/tools/makecab/totalcross.PocketPC_ARM.CAB" tofile="${path.param}/dist/vm/wince/totalcross.WMobile_ARM.CAB" />

  <delete>
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.dat" casesensitive="no"/>
  </delete>

</target>

<target name="buildWinCECabsSingle_PocketPC_ARM">

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwiz.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move todir="${path.param}/dist/vm/wince">
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.cab" casesensitive="no"/>
  </move>

  <!-- copy bat and ini files -->
  <copy todir="${path.param}/dist/vm/wince" overwrite="yes" >
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="CEinstall.ini,_CEinstall-RunMe.bat,ceinstall*.*" casesensitive="no"/>
  </copy>

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwizsp.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move file="${source.sdk.path}/etc/tools/makecab/totalcross.PocketPC_ARM.CAB" tofile="${path.param}/dist/vm/wince/totalcross.WMobile_ARM.CAB" />

  <delete>
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.dat" casesensitive="no"/>
  </delete>

</target>	
	
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: createSkeleton - Create the folders from scratch
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="createSkeleton_sdk" >
  <delete failonerror="yes" dir="${target.sdk.path}"/>
  <antcall target="updateSkeleton_sdk"/>
</target>

<target name="updateSkeleton_sdk" description="copy the changed files to the SDK">
  <echo message="Copying SDK"/>
  <copy todir="${target.sdk.path}" overwrite="yes" >
   <fileset dir="${source.sdk.path}"
    excludes=".*,deletemounts.reg,.settings/**,src/tc/samples/app/activation/**,src/totalcross/android/**,src/**/*.html,**/subbuild.xml,etc/tools/bb/bin/sigtool.csk,etc/tools/bb/lib/**,etc/tools/bb/bin/sigtool.db,build.xml,*.bak,*.pdb,etc/obfuscator/**,src/tc/*.java,etc/fonts/**,etc/tools/makecab/totalcross*.inf,etc/scripts/**,etc/tools/makesis/**,**/CVS/**,output/**,docs/**,dist/**,src/ras/**,src/tc/test/**,src/tc/tools/**,src/totalcross/**/*4?.java,tc/*.java,src/totalcross/lang/**"/>
  </copy>
  <copy todir="${target.sdk.path}" file="${source.sdk.path}/license.txt" overwrite="yes"  />
  <copy file="${source.sdk.path}/docs/companion_resources/ant_build/build.xml" todir="${target.sdk.path}/docs" overwrite="yes" />
  <copy file="${source.sdk.path}/etc/tools/bb/lib/5.0.0/net_rim_api.jar" tofile="${target.sdk.path}/etc/tools/bb/lib/net_rim_api.jar" overwrite="true" />
</target>

<target name="createSkeleton_vms" >
  <delete failonerror="yes" dir="${target.vms.path}"/>
  <mkdir dir="${target.vms.path}"/>
</target>

<target name="createSkeleton_vms_noras" >
  <delete failonerror="yes" dir="${target.noras.path}"/>
  <mkdir dir="${target.noras.path}"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildSkeleton - Build the folders
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildSkeletonIPhone_sdk" depends="updateSkeleton_sdk">

  <!-- Updates and builds the SDK and iPhone samples, without cleaning -->
  <!-- try to delete this, it may be blocked by the classpath referencing it -->
  <delete failonerror="true">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </delete>

  <echo message="Building TotalCross SDK"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="build"           inheritAll="false"/>

  <ant antfile="build.xml" dir="${source.sdk.path}" target="samples"         inheritAll="false">
   <property name="supportedPlatforms" value="-iphone" />
  </ant>
  <copy toDir="${target.sdk.path}/dist/samples"> <fileset dir="${source.sdk.path}/dist/samples" /></copy>

  <!-- copy the changed files to the release folder -->
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/dist" includes="*.pdb" /></copy>
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/etc/fonts" includes="TCFont.pdb" /> </copy>
  <copy todir="${target.sdk.path}/dist/vm/win32" file="${source.sdk.path}/dist/vm/win32/TCSyncLib.tcz" />
  <copy todir="${target.sdk.path}/dist/vm"> <fileset dir="${source.sdk.path}/dist" includes="*.tcz" excludes="TCSyncLib.tcz" /></copy>
  <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tc.jar" />

</target>

<target name="buildIphoneTest_sdk" depends="updateSkeleton_sdk">

  <!-- Updates and builds the SDK for iPhone without cleaning, samples are not built! -->
  <!-- try to delete this, it may be blocked by the classpath referencing it -->
  <delete failonerror="true">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </delete>

  <echo message="Building TotalCross SDK"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="build"           inheritAll="false"/>

  <!-- copy the changed files to the release folder -->
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/dist" includes="*.pdb" /></copy>
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/etc/fonts" includes="TCFont.pdb" /> </copy>
  <copy todir="${target.sdk.path}/dist/vm/win32" file="${source.sdk.path}/dist/vm/win32/TCSyncLib.tcz" />
  <copy todir="${target.sdk.path}/dist/vm"> <fileset dir="${source.sdk.path}/dist/vm" includes="*.tcz" excludes="TCSyncLib.tcz" /></copy>
  <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tc.jar" />

</target>

<target name="buildSkeletonLinux_sdk" depends="updateSkeleton_sdk">

  <!-- Updates and builds the SDK and Linux samples, without cleaning -->
  <!-- try to delete this, it may be blocked by the classpath referencing it -->
  <delete failonerror="true">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </delete>

  <echo message="Building TotalCross SDK"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="build"           inheritAll="false"/>

  <ant antfile="build.xml" dir="${source.sdk.path}" target="samples"         inheritAll="false">
   <property name="supportedPlatforms" value="-linux" />
  </ant>
  <copy toDir="${target.sdk.path}/dist/samples"> <fileset dir="${source.sdk.path}/dist/samples" /></copy>

  <!-- copy the changed files to the release folder -->
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/dist" includes="*.pdb" /></copy>
  <copy todir="${target.sdk.path}/dist/vm/palm"> <fileset dir="${source.sdk.path}/etc/fonts" includes="TCFont.pdb" /> </copy>
  <copy todir="${target.sdk.path}/dist/vm/win32" file="${source.sdk.path}/dist/TCSyncLib.tcz" />
  <copy todir="${target.sdk.path}/dist/vm"> <fileset dir="${source.sdk.path}/dist" includes="*.tcz" excludes="TCSyncLib.tcz" /></copy>
  <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tc.jar" />

</target>

<target name="buildSkeleton_sdk" >

  <!-- try to delete this, it may be blocked by the classpath referencing it -->
  <delete failonerror="true">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </delete>

  <echo message="Building TotalCross SDK"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="clean"           inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="build"           inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_sdk" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="javadoc"         inheritAll="false"/>

  <!-- copy the changed files to the release folder -->
  <mkdir dir="${target.sdk.path}/dist/vm" />
  <copy todir="${target.sdk.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>	
  <copy todir="${target.sdk.path}/docs/html"> <fileset dir="${source.sdk.path}/docs/html" /></copy>
  <copy todir="${target.sdk.path}/dist/vm/palm" file="${source.sdk.path}/dist/vm/palm/TCBase.pdb" />
  <copy todir="${target.sdk.path}/dist/vm/palm" file="${source.sdk.path}/etc/fonts/TCFont.pdb" />
  <copy todir="${target.sdk.path}/dist/vm/win32" file="${source.sdk.path}/dist/vm/win32/TCSyncLib.tcz" />
  <copy todir="${target.sdk.path}/dist/vm"> <fileset dir="${source.sdk.path}/dist/vm" includes="*.tcz" /></copy>
  <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tc.jar" />

</target>

<target name="buildSamples_sdk" >
  <ant antfile="build.xml" dir="${source.sdk.path}" target="samples"         inheritAll="false"/>
  <copy toDir="${target.sdk.path}/dist/samples"> <fileset dir="${source.sdk.path}/dist/samples" /></copy>
</target>

<target name="buildJava_sdk" >

  <ant antfile="build.xml" dir="${source.sdk.path}" target="clean" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="desktop" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="device" inheritAll="false"/>

  <copy toDir="${target.sdk.path}/dist">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </copy>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   BlackBerry builds
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildBB_sdk" depends="updateCompilerDate4B">

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_sdk" inheritAll="false"/>

  <mkdir dir="${target.sdk.path}/dist/vm" />
  <copy todir="${target.sdk.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<target name="buildBB_vms" depends="updateCompilerDate4B">

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_vms" inheritAll="false"/>

  <copy todir="${target.vms.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<target name="buildBB_vms_noras" depends="updateCompilerDate4B">

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_vms_noras" inheritAll="false"/>

  <copy todir="${target.noras.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildInstalls - run installshield to create the SDK and Samples
        installers for win32
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildInstalls" depends="getVersion">

  <property name="target.file"  value="${target.path}/../TotalCross${type}${file_suffix}"/>

  <!-- delete old files -->
  <delete file="${target.file}.exe" />

  <!-- update readme files -->
  <copy file="${type}_sfx.diz" toDir="${rootpath}/">
    <filterset>
      <filter token="VERSION" value="${tc.version}"/>
    </filterset>
  </copy>

  <echo message="Creating ${target.file} file..."/>
  <!-- create the splitted rar then the full sfx -->
  <exec dir="${rootpath}/" executable="${winrar.path}/rar.exe" failonerror="yes"><arg line='a -sfx -y -ep1 -m5 -r -s -idq -z${type}_sfx.diz ${target.file} ${target.path}\*.*'/></exec>

  <!-- delete temp files -->
  <delete file="${rootpath}/${type}_sfx.diz"/>

</target>

<target name="buildInstalls_sdk" depends="getVersion">
  <antcall target="buildInstalls">
      <param name="type" value="SDK" />
      <param name="file_suffix" value="" />
      <param name="target.path" value="${target.sdk.path}" />
  </antcall>
</target>

<target name="buildInstalls_vms" depends="getVersion">
  <antcall target="buildInstalls">
      <param name="type" value="VMS" />
      <param name="file_suffix" value="" />
      <param name="target.path" value="${target.vms.path}" />
  </antcall>
</target>

<target name="buildInstalls_vms_noras" depends="getVersion">
  <antcall target="buildInstalls">
      <param name="type" value="VMS_NORAS" />
      <param name="file_suffix" value="${norasid}" />
      <param name="target.path" value="${target.noras.path}" />
  </antcall>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: IPhone builds

  1. build the tcvm, launcher & tcpriv
  2. copy the launcher
  3. copy the tcvm & tcpriv
  4. create a rep for the tcvm and the samples
  5. ftp to the sw.com.br
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildIPhone_sdk_base" >
  <if><equals arg1="${iphone.build_clean}" arg2="YES" /><then>
    <property name="arg_clean" value="-clean" />
    <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  </then>
  <else>
    <property name="arg_clean" value="" />
  </else>
  </if>
  
  <if><equals arg1="${type}" arg2="noras" /><then>
    <fail unless="norasid" />
  </then>
  </if>
  
    <if><equals arg1="${type}" arg2="demo" /><then>
      <property name="extra_args" value="-demo" />
    </then>
    <elseif><equals arg1="${type}" arg2="noras" /><then>
      <fail unless="norasid"/>
      <property name="extra_args" value="-noras ${norasid}" />
    </then></elseif>
   <elseif><equals arg1="${type}" arg2="release" /><then>
     <property name="extra_args" value="" />
   </then></elseif>
    </if>
  
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force ${arg_clean} ${extra_args}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>
	
<target name="buildIPhone_sdk_clean" depends="updateCompilerDate4D">
  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="buildIPhone_sdk" >
  <sshexec command="bash -l ~/build.sh -tcvm -2 -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="copyIPhoneTestToDevice" depends="getVersion">

  <!-- iphone 2 -->
  <scp todir="${iphone.user}:${iphone.pass}@${iphone.ip}:/var/mobile" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes">
    <fileset dir="${target.path}/dist/vm/iphone2+">
      <include name="**/*.deb"/>
    </fileset>
  </scp>
  <sshexec command="dpkg -i /var/mobile/TotalCross.deb" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes"/>
  <sshexec command="killall SpringBoard" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes"/>

</target>
	
<target name="copyIPhoneLauncher_sdk" >
   <if><equals arg1="${iphone.version_2}" arg2="YES" /><then>
      <scp file="${buildserver.tc.iphone2.path}/demo/Launcher" todir="${source.sdk.path}/etc/launchers/iphone2" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
   </then></if>
</target>

<target name="copyIPhoneTCVM" depends="getVersion">

  <!-- iphone 2 -->
  <mkdir dir="${gcc.project.path}/tcvm/iphone2/${type}"/>
  <scp file="${buildserver.tc.iphone2.path}/${type}/.libs/libtcvm.dylib" todir="${gcc.project.path}/tcvm/iphone2/${type}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <scp file="${buildserver.tc.iphone2.path}/${type}/tcpriv" todir="${gcc.project.path}/tcvm/iphone2/${type}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <java classname="tc.tools.deployer.IPhoneBuildNatives" fork="yes" dir="${source.sdk.path}/output">
    <classpath>
        <pathelement location="${source.sdk.path}/output/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="-2"/>
    <arg line="-n TotalCross"/>
    <arg line="-c 'TotalCross VM'"/>
    <arg line="-d 'The TotalCross Virtual Machine'"/>
    <arg line="-v ${tc.version}"/>
    <arg line="-b ${gcc.project.path}/tcvm/iphone2/${type}/libtcvm.dylib"/>
    <arg line="-t ${target.path}/dist/vm/iphone2+"/>
    <arg value="${source.sdk.path}/dist/vm/TCBase.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFont.tcz"/>
    <arg value="${gcc.project.path}/tcvm/iphone2/${type}/tcpriv"/>
  </java>

  <!-- package the files -->
  <mkdir dir="${target.path}/dist/vm/iphone2+"/>
  <java classname="tc.tools.deployer.IPhoneBuildSource" fork="yes" dir="${target.path}/dist/vm/iphone2+">
    <classpath>
        <pathelement location="${source.sdk.path}/output/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="."/>
    <arg line="-2"/>
  </java>

</target>

<target name="copyIPhoneTestToDevice_sdk" depends="getVersion">
   <antcall target="copyIPhoneTestToDevice">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>

<target name="copyIPhoneTestToDevice_vms" depends="getVersion">
   <antcall target="copyIPhoneTestToDevice">
      <param name="type" value="release" />
      <param name="target.path" value="${target.vms.path}" />
   </antcall>
</target>

<target name="copyIPhoneTCVM_sdk" depends="getVersion">
   <antcall target="copyIPhoneTCVM">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>

<target name="copyIPhoneTCVM_vms" depends="getVersion">
  <antcall target="copyIPhoneTCVM">
      <param name="type" value="release" />
      <param name="target.path" value="${target.vms.path}" />
  </antcall>
</target>

<target name="buildIPhone_vms" depends="getVersion,updateCompilerDate4D">

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
  <echo message="retrieve remote release builds" />

  <antcall target="copyIPhoneTCVM_vms" />

</target>

<target name="buildIPhone_vms_noras" depends="getVersion,updateCompilerDate4D">

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean -noras ${norasid}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
  <echo message="retrieve remote NORAS release builds" />

  <antcall target="copyIPhoneTCVM">
      <param name="type" value="release" />
      <param name="target.path" value="${target.noras.path}" />
  </antcall>

</target>

<target name="ftp_iphone_sdk" depends="getVersion">

  <property file="${rootpath}/swcombr.properties"/>
  <property name="tempf" value="${source.sdk.path}/output/tempfiles"/>
  <property name="iphone.remote.dir" value="tc${tc.version}" />
  <echo message="TotalCross iPhone remote directory: ${iphone.remote.dir}"/>

  <!-- copies the files that will be sent via ftp to a single dir -->
  <delete dir="${tempf}" />
  <mkdir dir="${tempf}" />
  <copy todir="${tempf}/samples">
   <fileset dir="${target.sdk.path}/dist/samples" includes="**/*.zip,**/*.plist" excludes="**/iphone2+/**" />
  </copy>
  <copy todir="${tempf}">
   <fileset dir="${target.sdk.path}/dist/vm/iphone1" includes="TotalCross.zip,TotalCross.plist" />
  </copy>

  <!-- create the rep.xml file for all these files -->
  <java classname="tc.tools.deployer.IPhoneBuildSource" fork="yes" dir="${tempf}">
    <classpath>
        <pathelement location="${source.sdk.path}/output/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="."/>
  </java>

  <!-- copy the files again removing the folders -->
  <delete dir="${tempf}/samples" />
  <delete file="${tempf}/TotalCross.plist" />
  <copy todir="${tempf}" flatten="yes">
   <fileset dir="${target.sdk.path}/dist/samples" includes="**/*.zip" excludes="**/iphone2+/**" />
  </copy>

  <!-- replace the target folder that will appear in the device -->
  <replace file="${tempf}/rep.xml" token="http://www.totalcross.com/iphone" value="http://www.totalcross.com/${iphone.remote.dir}" />

  <!-- delete current folder, recreate the folder and ftp to the site -->
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" action="del" >
   <fileset includes="totalcross.com/${iphone.remote.dir}/**" />
  </ftp>
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="totalcross.com/${iphone.remote.dir}" action="mkdir" />
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="totalcross.com/${iphone.remote.dir}" verbose="yes">
     <fileset dir="${tempf}" />
  </ftp>

  <delete dir="${tempf}" />

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Linux builds

  1. build the tcvm, launcher
  2. copy the launcher
  3. copy the tcvm
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildLinux_sdk_clean" depends="updateCompilerDate4D">
  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="buildLinux_sdk" >
  <sshexec command="bash -l ~/build.sh -tcvm -linux -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="copyLinuxLauncher_sdk" >
  <scp file="${buildserver.tc.linux.path}/demo/Launcher" todir="${source.sdk.path}/etc/launchers/linux" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
</target>

<target name="copyLinuxTCVM" depends="getVersion">

  <mkdir dir="${gcc.project.path}/tcvm/linux/${type}"/>
  <scp file="${buildserver.tc.linux.path}/${type}/.libs/libtcvm.so" todir="${gcc.project.path}/tcvm/linux/${type}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <java classname="tc.tools.deployer.LinuxBuildNatives" fork="yes" dir="${source.sdk.path}/output">
    <classpath>
        <pathelement location="${source.sdk.path}/output/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="-n TotalCross"/>
    <arg line="-c 'TotalCross VM'"/>
    <arg line="-d 'The TotalCross Virtual Machine'"/>
    <arg line="-v ${tc.version}"/>
    <arg line="-b ${gcc.project.path}/tcvm/linux/${type}/libtcvm.so"/>
    <arg line="-t ${target.path}/dist/vm/linux"/>
    <arg value="${source.sdk.path}/dist/vm/TCBase.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFont.tcz"/>
  </java>

</target>

<target name="copyLinuxTCVM_sdk" depends="getVersion">

   <antcall target="copyLinuxTCVM">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>

</target>

<target name="buildLinux_vms" depends="getVersion,updateCompilerDate4D">

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
  <echo message="retrieve remote release build" />

  <antcall target="copyLinuxTCVM">
      <param name="type" value="release" />
      <param name="target.path" value="${target.vms.path}" />
  </antcall>

</target>

<target name="buildLinux_vms_noras" depends="getVersion,updateCompilerDate4D">

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean -noras ${norasid}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
  <echo message="retrieve remote NORAS release build" />

  <antcall target="copyLinuxTCVM">
      <param name="type" value="release" />
      <param name="target.path" value="${target.noras.path}" />
  </antcall>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Android builds
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="clean_android_native" description="Cleans the native files for Android" >
  <delete dir="${android.project.path}/out/apps/tcvm" failonerror="false" />
</target>

<target name="build_android_native" depends="getVersion" description="Compiles libtcvm.so for Android">
  <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i ${android.project.path}\apps\tcvm\runmake.sh'/></exec>
  <sleep seconds="3"/>
</target>

<target name="build_android_java" depends="getVersion" description="Builds the TotalCross.apk for Android">
  
  <echo message="Assuming that the Android launcher is up-to-date. If its not, run P:\TotalCrossVM\src\launchers\android\makelauncher_jar.bat" />
  <!-- create the temp folder -->
  <delete dir="${android.temp}" failonerror="false" />
  <mkdir dir="${android.temp}" />

  <!-- compile the android classes and create the classes.dex -->
  <javac srcdir="${android.project.path}/apps/tcvm/gen" destdir="${android.temp}"
     includes="totalcross/android/**" />
  <javac srcdir="${source.vms.path}/src/launchers/android/src" destdir="${android.temp}"
     includes="totalcross/AndroidUtils.java" >
     <classpath>
        <pathelement location="${android.sdk.path}/platforms/android-4/android.jar"/>
        <pathelement location="${android.temp}"/>
     </classpath>
  </javac>
  
  <javac srcdir="${source.sdk.path}/src" encoding="ISO-8859-1" destdir="${android.temp}" 
     includes="totalcross/android/**,totalcross/Launcher4A.java,totalcross/MainClass.java,totalcross/TCEventThread.java" >
     <classpath>
        <pathelement location="${android.sdk.path}/platforms/android-4/android.jar"/>
        <pathelement location="${android.temp}"/>
     </classpath>
  </javac>
  
  <java jar="${android.sdk.path}/platforms/android-4/tools/lib/dx.jar" fork="yes">
    <arg line="--dex --verbose --output=${android.temp}/classes.dex ${android.temp}" />
  </java>
                      
  <!-- prepare the AndroidManifest.xml --> 
  <tstamp>
    <format property="code.version" pattern="yyMMddkkmm"/>
  </tstamp>
  <echo message="New package: ${code.version}" />
                        
  <copy file="${android.project.path}/apps/tcvm/AndroidManifest.xml" toDir="${android.temp}">
    <filterset recurse="false" begintoken='!' endtoken='!' >
      <filter token="1.0" value="${tc.version}"/>
    </filterset>
    <filterset recurse="false" begintoken='"-' endtoken='"' >
      <filter token="1" value='"${code.version}"'/>
    </filterset>
  </copy>
  
  <!-- update the tcfiles.zip with the tczs that will be installed -->
  <mkdir dir="${android.temp}/assets" />
  <zip destfile="${android.temp}/assets/tcfiles.zip" filesonly="true" level="9">
    <zipfileset dir="${source.sdk.path}/dist/vm"      includes="TCBase.tcz" />
    <zipfileset dir="${source.sdk.path}/etc/fonts" includes="TCFont.tcz" />
  </zip>
  
  <!-- run the aapt. this will create the TotalCross.apk -->
  <exec executable="${android.sdk.path}/platforms/android-4/tools/aapt.exe" spawn="true">
   <arg line='p -f -M ${android.temp}\AndroidManifest.xml -S ${android.temp}/../res -I ${android.sdk.path}/platforms/android-4/android.jar -F ${apk}'/>
  </exec>
  
  <!-- copy the libtcvm.so to the correct path-->
  <mkdir dir="${android.temp}/lib/armeabi" />
  <copy file="${android.temp}/../libs/armeabi/libtcvm.so" todir="${android.temp}/lib/armeabi" />
  
  <!-- updates the apk -->
  <jar update="true" destfile="${apk}">
    <fileset dir="${android.temp}" includes="**/*.so,classes.dex"  />
  </jar>
  <!-- updates the apk - tcfiles.zip must be STORED uncompressed -->
  <jar update="true" destfile="${apk}" compress="false" keepcompression="true">
    <fileset dir="${android.temp}" includes="**/tcfiles.zip"  />
  </jar>
  
  <!-- sign the apk -->
  <exec executable="jarsigner${exe}">
   <arg line="-keystore ${source.sdk.path}/etc/security/tcandroidkey.keystore -storepass @ndroid$w -keypass @ndroidsw ${apk} tcandroidkey" />
  </exec>                         
  <sleep seconds="4"/>
  
  <!-- test if the apk contains the needed files -->
  <delete dir="${android.temp}/apk" />
  <unjar src="${apk}" dest="${android.temp}/apk" overwrite="yes"/>
  <available file="${android.temp}/apk/META-INF/TCANDROI.SF" property="apk.is.signed"/>
  <fail unless="apk.is.signed" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: NOT SIGNED. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/AndroidManifest.xml" property="apk.has.xml"/>
  <fail unless="apk.has.xml" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: XML NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/classes.dex" property="apk.has.dex"/>
  <fail unless="apk.has.dex" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: DEX NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <delete dir="${android.temp}/apk" />

</target>

<target name="build_android_java_singleapk" depends="getVersion" description="Builds a single APK with TotalCross+Litebase+UIGadgets for Android">
  
  <!-- 
    IMPORTANT: both Litebase and TotalCross Android native ant targets must have been build before running this one.
    
    Instructions:
    
    1. Change the apkApp property below to match the name and folder of the apk you want to generate
    2. In the "update the tcfiles.zip", change the uigadgets.tcz to the one you want to add. You can add other files too.
       IMPORTANT: the tcz name must be converted to LOWER CASE
    3. Replace the icon in P:\TotalCrossVM\builders\android\apps\singleapk\res\drawable-hdpi
    4. Edit the P:\TotalCrossVM\builders\android\apps\singleapk\AndroidManifest.xml
       In that file, DONT CHANGE:
          package="totalcross.android"
       In that file, CHANGE:
        android:sharedUserId="totalcross.app.uigadgets" -> replace uigadgets by the name of your tcz file (IN LOWERCASE) - KEEP "totalcross.app." prefix
        android:label="UIGadgets" -> replace in both places with your application's name. It will appear under the icon in the home screen.
        android:versionName="1.0" -> replace with the version of your app.
  -->
  <property name="apkApp" value="${android.project.path}/apps/singleapk/UIGadgets.apk" />
  
  <echo message="Assuming that the Android launcher is up-to-date. If its not, run P:\TotalCrossVM\src\launchers\android\makelauncher_jar.bat" />
  <!-- create the temp folder -->
  <delete dir="${android.temp}" failonerror="false" />
  <mkdir dir="${android.temp}" />

  <!-- compile the android classes and create the classes.dex -->
  <javac srcdir="${android.project.path}/apps/tcvm/gen" destdir="${android.temp}"
     includes="totalcross/android/**" />
  <javac srcdir="${source.vms.path}/src/launchers/android/src" destdir="${android.temp}"
     includes="totalcross/AndroidUtils.java" >
     <classpath>
        <pathelement location="${android.sdk.path}/platforms/android-4/android.jar"/>
        <pathelement location="${android.temp}"/>
     </classpath>
  </javac>
  
  <javac srcdir="${source.sdk.path}/src" encoding="ISO-8859-1" destdir="${android.temp}" 
     includes="totalcross/android/**,totalcross/Launcher4A.java,totalcross/MainClass.java,totalcross/TCEventThread.java" >
     <classpath>
        <pathelement location="${android.sdk.path}/platforms/android-4/android.jar"/>
        <pathelement location="${android.temp}"/>
     </classpath>
  </javac>
  
  <java jar="${android.sdk.path}/platforms/android-4/tools/lib/dx.jar" fork="yes">
    <arg line="--dex --verbose --output=${android.temp}/classes.dex ${android.temp}" />
  </java>
                      
  <!-- prepare the AndroidManifest.xml --> 
  <tstamp>
    <format property="code.version" pattern="yyMMddkkmm"/>
  </tstamp>
  <echo message="New package: ${code.version}" />

  <copy file="${android.project.path}/apps/singleapk/AndroidManifest.xml" toDir="${android.temp}">
    <filterset recurse="false" begintoken='!' endtoken='!' >
      <filter token="1.0" value="${tc.version}"/>
    </filterset>
    <filterset recurse="false" begintoken='"-' endtoken='"' >
      <filter token="1" value='"${code.version}"'/>
    </filterset>
  </copy>
  
  <!-- update the tcfiles.zip with the tczs that will be installed -->
  <mkdir dir="${android.temp}/assets" />
  <zip destfile="${android.temp}/assets/tcfiles.zip" filesonly="true" level="9">
    <zipfileset dir="${source.sdk.path}/dist/vm"   includes="TCBase.tcz" />
    <zipfileset dir="${source.sdk.path}/etc/fonts" includes="TCFont.tcz" />
    <zipfileset dir="${rootpath}/LitebaseSDK_200/dist/lib" includes="LitebaseLib.tcz" />
    <zipfileset dir="${android.project.path}/apps/singleapk" includes="uigadgets.tcz" />
  </zip>
  
  <!-- run the aapt. this will create the TotalCross.apk -->
  <exec executable="aapt.exe" spawn="true">
   <arg line='p -f -M ${android.temp}\AndroidManifest.xml -S ${android.project.path}/apps/singleapk/res -I ${android.sdk.path}/platforms/android-4/android.jar -F ${apkApp}'/>
  </exec>
  
  <!-- copy the libtcvm.so to the correct path-->
  <mkdir dir="${android.temp}/lib/armeabi" />
  <copy file="${android.temp}/../libs/armeabi/libtcvm.so" todir="${android.temp}/lib/armeabi" />
  <copy file="${android.temp}/../../litebase/libs/armeabi/libLitebase.so" todir="${android.temp}/lib/armeabi" />
  
  <!-- updates the apk -->
  <jar update="true" destfile="${apkApp}">
    <fileset dir="${android.temp}" includes="**/*.so,classes.dex"  />
  </jar>
  <!-- updates the apk - tcfiles.zip must be STORED uncompressed -->
  <jar update="true" destfile="${apkApp}" compress="false" keepcompression="true">
    <fileset dir="${android.temp}" includes="**/tcfiles.zip"  />
  </jar>
  
  <!-- sign the apk -->
  <exec executable="jarsigner${exe}">
   <arg line="-keystore ${source.sdk.path}/etc/security/tcandroidkey.keystore -storepass @ndroid$w -keypass @ndroidsw ${apkApp} tcandroidkey" />
  </exec>                         
  <sleep seconds="4"/>
  
  <!-- test if the apk contains the needed files -->
  <delete dir="${android.temp}/apk" />
  <unjar src="${apkApp}" dest="${android.temp}/apk" overwrite="yes"/>
  <available file="${android.temp}/apk/META-INF/TCANDROI.SF" property="apk.is.signed"/>
  <fail unless="apk.is.signed" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: NOT SIGNED. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/AndroidManifest.xml" property="apk.has.xml"/>
  <fail unless="apk.has.xml" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: XML NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/classes.dex" property="apk.has.dex"/>
  <fail unless="apk.has.dex" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: DEX NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <delete dir="${android.temp}/apk" />

</target>

<target name="build_android" depends="build_android_native" description="Compiles libtcvm.so and builds the TotalCross.apk for Android" >
  <retry retrycount="3">
    <antcall target="build_android_java" />
  </retry>
</target>

<target name="adb_android" description="Just installs TotalCross on Android (no build is performed)." >
  <property name="apk" value="${apk}" />
  <exec executable="adb${exe}" >
   <arg line="install -r ${apk}" />
  </exec>
</target>

<target name="install_android" depends="build_android,adb_android" description="Builds and installs TotalCross on Android." />

<target name="buildAndroid_sdk" >           
  <delete dir="${android.project.path}/out/src" />
  <copy file="${android.project.path}/apps/options_demo.mk" tofile="${android.project.path}/apps/options.mk" overwrite="yes"/>
  <antcall target="build_android" />
  <copy file="${android.temp}/TotalCross.apk" todir="${target.sdk.path}/dist/vm/android" overwrite="true" />
</target>   

<target name="buildAndroid_vms" depends="build_android">
  <delete dir="${android.project.path}/out/src" />
  <copy file="${android.project.path}/apps/options_nodemo.mk" tofile="${android.project.path}/apps/options.mk" overwrite="yes"/>
  <antcall target="build_android" />
  <copy file="${android.temp}/TotalCross.apk" todir="${target.vms.path}/dist/vm/android" overwrite="true" />
</target>   

<target name="buildAndroid_vms_noras" depends="build_android">
  <delete dir="${android.project.path}/out/src" />
  <copy file="${android.project.path}/apps/options_noras.mk" tofile="${android.project.path}/apps/options.mk" overwrite="yes"/>
  <antcall target="build_android" />
  <copy file="${android.temp}/TotalCross.apk" todir="${target.noras.path}/dist/vm/android" overwrite="true" />
</target>   

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: getVersion

-description:
        retrieves the Superwaba version from the file "waba/sys/Settings.java"
        in the form 4_21

      public static final String versionStr = "4.21"

      IMPORTANT: THIS ONE DOES NOT REPLACE _ BY . !
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="getVersion" >

  <loadfile srcfile="${source.sdk.path}/src/totalcross/sys/Settings.java" property="tc.version">
    <filterchain>
      <linecontains>
        <contains value="versionStr"/>
      </linecontains>
      <striplinebreaks/>
      <tokenfilter>
       <replacestring from="public" to=""/>
       <replacestring from="static" to=""/>
       <replacestring from="final" to=""/>
       <replacestring from="String" to=""/>
       <replacestring from="versionStr" to=""/>
       <replacestring from="=" to=""/>
       <deletecharacters chars='";'/>
       <trim/>
      </tokenfilter>
    </filterchain>
  </loadfile>

  <echo message="TotalCross version : '${tc.version}'"/>
</target>

<!-- updates the file that stores the compilation date. -->
<target name="updateCompilerDate4D" >

   <tstamp />
   <echo message="Compiler date: ${DSTAMP}" />
   <concat destfile="${source.vms.path}/src/init/compilation.date">#define COMPILATION_DATE ${DSTAMP}</concat>

</target>

<target name="updateCompilerDate4B" >

   <tstamp />
   <echo message="Compiler date: ${DSTAMP}" />
   <concat destfile="${source.sdk.path}/src/ras/CompilationDate4B.java">package ras; public class CompilationDate4B {public static final int COMPILATION_DATE = ${DSTAMP} ^ 12341234;}</concat>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: companion

-description:
        Converts the TotalCross companion file
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="companion" description="Generates the PDF for TotalCross Companion">
	<delete file="${target.sdk.path}/docs/TotalCross Companion.pdf" />
	
	<!-- Get the Open Office path -->
	<win32.registry root="HKEY_LOCAL_MACHINE" key="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\soffice.exe">
		<get property="soffice.path" entry="Path"/>
	</win32.registry>
	
	<java jar="P:/extlibs/jod/lib/jodconverter-core-3.0-beta-3.jar" fork="yes" dir="p:/extlibs/jod">
		<!-- set the environment vairblae office.home with the soffice path -->
		<sysproperty key="office.home" value="${soffice.path}"/>
		<arg line='"${source.sdk.path}/docs/TotalCross Companion.odt"'/>
		<arg line='"${target.sdk.path}/docs/TotalCross Companion.pdf"'/>
	</java>
	
	<available file="${target.sdk.path}/docs/TotalCross Companion.pdf" property="pdf.generated"/>
	<fail unless="pdf.generated" message="THE COMPANION.PDF WAS NOT GENERATED. PLEASE TRY AGAIN"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: ftp things to the site
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="ftp_demo_vms" >

  <property file="${rootpath}/swcombr.properties"/>
  <property name="temp" value="${source.sdk.path}/output/tempftp"/>
  <property name="vm.dir" value="${target.sdk.path}/dist/vm"/>
  <mkdir dir="${temp}" />

  <zip destfile="${temp}/tc_bb430.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/4.3.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_bb470.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/4.7.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_bb500.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/5.0.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_palm5.zip" compress="true" filesonly="true" basedir="${vm.dir}/palm" includes="TCBase.pdb,TCFont.pdb,TCVM.prc" />
  <zip destfile="${temp}/tc_win32.zip" compress="true" >
    <zipfileset dir="${vm.dir}/win32" includes="TCSync.dll,TCSyncLib.tcz,TCVM.dll" />
    <zipfileset dir="${vm.dir}" includes="TCBase.tcz,TCFont.tcz" />
  </zip>
  <zip destfile="${temp}/tc_android.zip" compress="true" filesonly="true" basedir="${vm.dir}/android" />
  <copy todir="${temp}"><fileset dir="${vm.dir}/iphone2+" includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>
  <copy todir="${temp}"><fileset dir="${vm.dir}/linux"    includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>
  
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="superwaba.com.br/vms" verbose="yes">
     <fileset dir="${vm.dir}/wince" includes="*.CAB" />
     <fileset dir="${temp}" />
  </ftp>

  <delete dir="${temp}" />

</target>

<target name="ftp_javadoc" >

  <property file="${rootpath}/swcombr.properties"/>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" action="del" >
   <fileset includes="totalcross.com/doc/**" />
  </ftp>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="totalcross.com/doc" verbose="yes">
     <fileset dir="${target.sdk.path}/docs/html" />
  </ftp>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: checks if we must update the versions of the files prior to a build.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="checkVersionOnProjects" depends="getVersion">

  <if>
    <equals arg1="${msvc.version}" arg2="vc6" />
  <then>
    <loadfile srcfile="${msvc.project.path}/TCVM.dsp" property="version.updated">
      <filterchain>
        <linecontains>
          <contains value='/version:${tc.version}'/>
        </linecontains>
      </filterchain>
    </loadfile>
  </then>
  <elseif>
    <equals arg1="${msvc.version}" arg2="vc2008" />
  <then>
    <loadfile srcfile="${msvc.project.path}/TCVM.vcproj" property="version.updated">
      <filterchain>
        <linecontains>
          <contains value='Version="${tc.version}"'/>
        </linecontains>
      </filterchain>
    </loadfile>
  </then>
  </elseif>
  <else>
    <fail message="Must set the property msvc.version to either vc6 or vc2008 in userpaths.properties" />
  </else>
  </if> 

  <fail unless="version.updated" message="************************************* Please update the project version information on VC6, EVC, gcc-arm/vm/resources.rcp!!! **********"/>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: builds NORAS sdks for all companys.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="single_noras">            
   <echo message="BUILDING NORAS FOR COMPANY ID ${norasid}" />
   
   <copy file="${noras_dir}/noras_${norasid}.inc" tofile="${noras_dir}/noras.inc" overwrite="yes" />
   <antcall target="checkVersionOnProjects"/>  
   <antcall target="createSkeleton_vms_noras"/>  
   <antcall target="buildBB_vms_noras"/>  
   <antcall target="buildIPhone_vms_noras" inheritall="true"/>  
   <antcall target="buildLinux_vms_noras" inheritall="true"/>
   <antcall target="buildWinCE_vms_noras"/>  
   <antcall target="buildWin32_vms_noras"/>  
   <antcall target="buildPalmOS5_vms_noras"/>  
   <antcall target="buildAndroid_vms_noras"/>
   <antcall target="buildInstalls_vms_noras" inheritall="true"/>  
</target>

<target name="prepare_noras" >
  <antcall target="single_noras"><param name="norasid" value="20" /></antcall>
  <copy file="${noras_dir}/noras_none.inc" tofile="${noras_dir}/noras.inc" overwrite="yes" />
</target>

<target name="buildPostInstall" >

  <property name="temp" value="${source.sdk.path}/output/classes_desktop" />
  <javac srcdir="${source.sdk.path}/src/tc/tools" destdir="${temp}" target="1.1" source="1.2" includes="PostInstall.java" debug="true" />

  <java classname="tc.Deploy" fork="yes" dir="${temp}">
   <classpath>
     <pathelement location="${temp}"/>
   </classpath>
   <arg line="PostInstall.class -win32"/>
  </java>
  
  <copy file="${temp}\install\win32\PostInstall.exe" todir="${target.sdk.path}" />
  <copy file="${temp}\install\win32\PostInstall.tcz" todir="${target.sdk.path}" />

</target>

<target name="ftp_sdk">
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="files" verbose="yes" retriesAllowed="3">
     <fileset dir="${rootpath}/releases" includes="*.exe" />
  </ftp>
</target>
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: build targets
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="iphone2_test" description="Update the SDK device, builds and upload iPhone 2 to the device">
   <property name="type" value="demo" />
   <property name="target.path" value="${target.sdk.path}" />
   <antcall target="build_iphone" />
   <antcall target="copyIPhoneTCVM" />
   <antcall target="copyIPhoneTestToDevice" />
</target>
  
<target name="build_iphone" >
  <fail unless="type" />
  <antcall target="buildIPhone_sdk_base" />
  <antcall target="copyIPhoneLauncher_sdk" />
</target>
 
<target name="iphone_test" depends="buildIPhone_sdk,copyIPhoneLauncher_sdk,copyIPhoneTCVM_sdk,copyIPhoneTestToDevice_sdk" description="Update the SDK device and samples, rebuild and upload iPhone to the device" />

<target name="update_linux" depends="buildLinux_sdk,copyLinuxLauncher_sdk,buildSkeletonLinux_sdk,copyLinuxTCVM_sdk" description="Update the SDK device and samples, rebuild and upload iPhone to the site" />
<target name="update_iphone" description="Update the SDK device and samples, rebuild and upload iPhone to the site" >
  <property name="type" value="demo" />
  <property name="target.path" value="${target.sdk.path}" />
  <antcall target="buildIPhone_sdk_base" />
  <antcall target="copyIPhoneLauncher_sdk" />
  <antcall target="buildSkeletonIPhone_sdk" />
  <antcall target="copyIPhoneTCVM" />
  <antcall target="ftp_iphone_sdk" />
</target>
<target name="update_sdk" depends="updateSkeleton_sdk,buildSkeleton_sdk" description="Update SDK DEMO, just copying over the changed files" />
<target name="updateJavaInInstall" depends="updateSkeleton_sdk,buildJava_sdk,buildInstalls_sdk" description="Update the Java files and rebuilds the installer" />

<target name="build_sdk_java" depends="createSkeleton_sdk,buildSkeleton_sdk" description="Builds the Java device, desktop and javadocs."/>
<target name="build_sdk" depends="checkVersionOnProjects,createSkeleton_sdk,buildSkeleton_sdk,buildIPhone_sdk_clean,copyIPhoneLauncher_sdk,copyIPhoneTCVM_sdk,buildLinux_sdk_clean,copyLinuxLauncher_sdk,copyLinuxTCVM_sdk,companion,buildSamples_sdk,buildWinCE_sdk,buildWin32_sdk,buildPalmOS5_sdk,buildAndroid_sdk,buildPostInstall,buildInstalls_sdk" description="Create SDK DEMO from scratch" />
<target name="build_sdk_fast" depends="checkVersionOnProjects,createSkeleton_sdk" description="Create a smaller version of the SDK DEMO from scratch" >
  <property name="iphone.build_clean" value="YES" />
  <property name="type" value="demo" />
  <property name="target.path" value="${target.sdk.path}" />
  <antcall target="buildIPhone_sdk_base" />
  <antcall target="copyIPhoneLauncher_sdk" />
  <antcall target="buildSkeleton_sdk" />
  <antcall target="buildBB_sdk" />
  <antcall target="copyIPhoneTCVM" />
  <antcall target="buildWinCE_sdk_ARM" />
  <antcall target="buildWin32_sdk" />
  <antcall target="buildPalmOS5_sdk" />
  <antcall target="buildAndroid_sdk" />
  <antcall target="buildPostInstall" />
  <antcall target="buildInstalls">
    <param name="type" value="SDK" />
    <param name="file_suffix" value="_SMALL" />
    <param name="target.path" value="${target.sdk.path}" />
  </antcall>  
</target>
<target name="build_vms" depends="checkVersionOnProjects,createSkeleton_vms,buildBB_vms,buildIPhone_vms,buildLinux_vms,buildWinCE_vms,buildWin32_vms,buildPalmOS5_vms,buildAndroid_vms,buildInstalls_vms" description="Build the VMs full version" />
<target name="build_vms_noras" depends="prepare_noras" description="Build the VMs full version WITHOUT RAS for all NORAS costumers" />
<target name="build_all_from_android" depends="buildAndroid_sdk,buildPostInstall,buildInstalls_sdk,build_vms,build_vms_noras" description="Restarts the build_all from the Android generation" />

<target name="ftp" depends="ftp_demo_vms,ftp_sdk,ftp_iphone_sdk,ftp_javadoc" description="FTP the iphone sdk and javadoc" />
<target name="build_all" depends="build_sdk,build_vms,build_vms_noras" description="builds sdk, vms and vms_noras" />
</project>
