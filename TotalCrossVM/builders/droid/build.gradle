buildscript {
    repositories {           
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}
apply plugin: 'android'

android {
	compileSdkVersion "Google Inc.:Google APIs:22"
    buildToolsVersion '23.0.2'
	compileOptions.encoding = 'iso-8859-1'
	
    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
		applicationId 'totalcross.android'   
		multiDexEnabled true
    }
    
	productFlavors {
		standard {
		}
		
		singleApk {
		}
	}
	
    sourceSets {
        main {
			java.srcDirs = files(
				fileTree(dir: '../../../TotalCrossSDK/src').matching { include 'totalcross/android/**', 'totalcross/zxing/**', 'totalcross/*4A.java', 'totalcross/MainClass.java', 'totalcross/TCEventThread.java' }, 
				fileTree(dir: '../../src/launchers/android/src').matching { include 'totalcross/**' }
				)
            assets.srcDirs = ['src/main/assets']
			jniLibs.srcDirs = ['src/main/libs']
        }
    }
	
    signingConfigs {
        release {
            storeFile file('tcandroidkey.keystore')
            storePassword '@ndroid$w'
            keyAlias 'tcandroidkey'
            keyPassword '@ndroidsw'
        }
    }
	
    buildTypes {
        release {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android.txt')
			signingConfig signingConfigs.release
        }
    }
    
	task configureEnvironment() {
	    def envVars = [:]
	
	    envVars['TYPE']="demo"
	    envVars['NDK_OUT']= "." + "/../../../temp/android/TotalCross/" + "demo"
	
	    tasks.withType(Exec) { environment << envVars }
	}
    
    task buildAndroidNative(type:Exec) {
		workingDir "../.." +  "/src"
    	commandLine "cmd","/c",'P:/extlibs/android-ndk-r8b/ndk-build'

		doLast{
			copy {
				from "." + "/../../../../temp/android/TotalCross/" + "demo" + "/libs"
				into 'src/main/libs'
				include '**/*'
			}
		}
    }
    
	task assembleAssets(type:Zip) {
		outputs.upToDateWhen { false }
		from ('../../../TotalCrossSDK/dist/vm') {
			include 'TCBase.tcz'
			include 'TCUI.tcz'
		}
		from ('../../../TotalCrossSDK/etc/fonts') {
			include 'TCFont.tcz'
		}
		from ('../../../../Litebase/LitebaseSDK/dist/lib/') {
			include 'LitebaseLib.tcz'
		}
		entryCompression ZipEntryCompression.STORED
		baseName 'tcfiles'
		destinationDir file('src/main/assets') // directory that you want your archive to be placed in
	}
	
	task copyApk << {
		copy {
			from { 'build/outputs/apk' }
			into '../../../../output/release/TotalCrossSDK/dist/vm/android'
			include '**/droid-standard-release.apk'
			rename { String fileName ->
				fileName.replace('droid-standard-release', 'TotalCross')
			}
		}
		copy {
			from { zipTree('build/outputs/apk/droid-singleApk-release.apk') }
			into '../../../../output/release/TotalCrossSDK/etc/tools/android'
			include 'AndroidManifest.xml', 'resources.arsc'
			rename { String fileName ->
				fileName.replace('.', '_singleapk.')
			}
		}
	}
	
	task blah {
		println archivesBaseName
	}
	/*
	assembleDebug {}.doLast{
    	tasks.copySupportFiles.execute()
	}
	*/
	assembleDebug.mustRunAfter buildAndroidNative, assembleAssets
	assembleRelease.mustRunAfter buildAndroidNative, assembleAssets
	copyApk.mustRunAfter assembleRelease
    
    task buildAndroid_sdkNoClean(dependsOn: ['buildAndroidNative', 'assembleAssets', 'assembleDebug']) << {
    }
    
    project.afterEvaluate{
	    applicationVariants.all { com.android.build.gradle.api.ApplicationVariant variant ->
		    for (flavor in variant.productFlavors) {
		    	def prepareReleaseDependencies = project.tasks.getByName("prepare${flavor.name.capitalize()}ReleaseDependencies")
        		prepareReleaseDependencies.dependsOn(['buildAndroidNative', 'assembleAssets'])
		    }
		}
	}
}

 repositories { 
     jcenter()
     maven {
         url "https://maven.java.net/content/groups/public/"
     }
 }

dependencies {
	compile fileTree(dir: 'src/main/libs', include: ['*.jar'])
	compile 'com.google.android.gms:play-services:8.3.0'
}
